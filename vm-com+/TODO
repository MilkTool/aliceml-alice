Arbeitspakete
=============

Bemerkung: Zu jedem dieser Arbeitspakete müssen noch
Aufwandsabschätzungen abgegeben werden.


A. Emulieren des Stockwerks unter Lightning (stockhausen/vm-com+)
-------------------------------------------

1. Design des Alice-Data-Layer

   Dies führt zu der Implementierung einer Reihe von COM+-Klassen in C#.
   Wir können bisher kein Boxing/Unboxing machen (liegt am ML-Typsystem
   in Kombination mit Futures - die notwendigen Analysen besitzen wir
   noch nicht), daher sollten wir wohl Pinkus Trick mit den Tagged
   Pointers verwenden.

2. Pickling

   Für den Demonstrator wird die Alice-Data-Layer-Klassenhierarchie
   um Methoden erweitert, die die Serialisierung entsprechend
   parametrisieren.

   Für eine Production-Version müsste man parallel zur Serialisierung
   einen rekursiven Abstieg des Typausdrucks vornehmen.  Es ist noch
   offen, ob die Lightning-Serialisierung dies überhaupt unterstützt.

3. Builtins

   Auch diese werden in C# geschrieben sein.  Zudem werden sie statisch
   getypt sein und nicht mehr dynamisch - so dass vom bisherigen
   StockWerk.il nichts erhalten bleibt.

4. Komponist

   Auf lange Sicht sollte der zwar in Alice (mit ein paar unsicheren
   Builtins) implementiert werden, aber für diesen Zweck haben wir
   ihn schneller nativ implementiert.

Bemerkung: Verteilung wird zunächst vollkommen ausser Acht gelassen.


B. Compiler (stockhausen/stoc/backend-com+)
-----------

1. Kontrollstrukturen

   Hier ändert sich nicht viel gegenüber der bestehenden Version.

2. Datenstrukturen

   Da der Alice-Data-Layer in A.1 neu entworfen wird (unter
   Berücksichtigung statischer Typisierung), muss das Backend
   entsprechend angepasst werden.  Ansonsten sind keine Probleme
   zu erwarten.

3. Bootstrapping


C. Interoperabilität
--------------------

Vielleicht will man Bibliotheken haben, die Interoperabilität
vereinfachen.

1. Import und Verwendung von CLS-konformanten Klassen

   Am schönsten wäre hier auf lange Sicht eine enge Integration
   à la ML-COM+, aber das werden wir nicht schaffen.

   Daher schlage ich eine kleine Bibliothek von Reflektionsprimitiven
   vor, über die man wenigstens den interessanteren Teil der
   Lightning-Bibliotheken verwenden kann.

2. Export von Komponenten als CLS-konformante Klassen

   Mit Ausnahme des Pinku-Tricks sind wir sowieso CLS-konformant.
   Man muss allerdings eine externe Schnittstelle zum Komponisten
   bereitstellen, damit man überhaupt Alice-Komponenten laden kann.


D. Demos
--------

Hier ist einiges zu tun - vor allem müssen sie auch graphisch
ansprechend sein.


E. Web-Pages
------------
