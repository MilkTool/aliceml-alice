(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Name             from "Name"
import structure Label            from "Label"
import structure Path             from "Path"
import structure Type             from "Type"
import signature LABEL_REFLECTION from "LABEL_REFLECTION-sig"


structure LabelReflection :> LABEL_REFLECTION =
struct
  (* Types *)

    val path_lab	= Path.pervasive "lab"			(*UNFINISHED*)
    val typ_lab		= Type.inCon(Type.STAR, Type.CLOSED, path_lab)

  (* The module *)

    val modname_label	= Name.ExId "Label"
    structure Label	= Label					(* verify *)

  (* Type fields *)

    val typname_lab	= Name.ExId "t"
    type lab		= Label.t				(* verify *)

  (* Operations *)

    val lab_fromString	= Label.fromString "fromString"
    val _		= Label.fromString : string -> lab	(* verify *)
end
