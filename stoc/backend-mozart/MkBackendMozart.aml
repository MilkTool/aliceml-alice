(* -*- sml -*- *)

(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2000
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import
    signature SWITCHES
from "../infrastructure/SWITCHES.ozf"

import
    signature PHASE
from "../infrastructure/PHASE.ozf"

import
    structure EmptyContext
from "../infrastructure/EmptyContext.ozf"

import
    signature SIGNATURE
from "../infrastructure/SIGNATURE.ozf"

import
    structure MakeTracingPhase
from "../infrastructure/MakeTracingPhase.ozf"

import
    signature TARGET
from "../infrastructure/TARGET.ozf"

import
    structure FlatGrammar
from "../backend-common/FlatGrammar.ozf"

import
    structure CodeGenPhase
from "CodeGenPhase.ozf"

functor MakeMozartTarget(structure Switches: SWITCHES
			 structure Sig: SIGNATURE
			     where type t = FlatGrammar.sign): TARGET =
    struct
	structure C = EmptyContext
	structure Sig = Sig

	type t = CodeGenPhase.t

	fun sign component = CodeGenPhase.sign component

	fun apply () component = CodeGenPhase.apply component

	fun save () filename component =
	    CodeGenPhase.save (filename, !Switches.outputAssembly, component)
    end

functor MakeBackendMozart(structure Switches: SWITCHES
			  structure MozartTarget: TARGET
			      where type t = CodeGenPhase.t): PHASE =
    MakeTracingPhase(structure Phase =
			 struct
			     structure C = EmptyContext
			     structure I = FlatGrammar
			     structure O = MozartTarget

			     fun translate () (desc, component) =
				 CodeGenPhase.translate (desc, component)
			 end
		     structure Switches = Switches
		     val name = "Assembling")
