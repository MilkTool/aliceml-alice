(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2000
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import
    structure OS
from "../../lib/system/OS"

import
    structure Crash
from "../infrastructure/Crash"

import
    structure Source
from "../infrastructure/Source"

import
    structure Error
from "../infrastructure/Error"

import
    signature SWITCHES
from "../infrastructure/SWITCHES-sig"

import
    signature PHASE
from "../infrastructure/PHASE-sig"

import
    structure EmptyContext
from "../infrastructure/EmptyContext"

import
    signature SIGNATURE
from "../infrastructure/SIGNATURE-sig"

import
    structure MkTracingPhase
from "../infrastructure/MkTracingPhase"

import
    signature TARGET
from "../infrastructure/TARGET-sig"

import
    structure FlatGrammar
from "../backend-common/FlatGrammar"

import
    structure IL
from "IL"

import
    structure CodeGenPhase
from "CodeGenPhase"

functor MkComPlusTarget(Sig: SIGNATURE where type t = FlatGrammar.sign):
    TARGET =
    struct
	structure C = EmptyContext
	structure Sig = Sig

	type t = IL.t
	type value = unit

	fun sign (_, exportSign) = exportSign

	fun save () filename component =
	    let
		val ilFilename = filename ^ ".il"
		val ilasm =
		    "ilasm /quiet /dll \"" ^ ilFilename ^
		    "\" /out=\"" ^ filename ^ "\""
	    in
		IL.outputProgram (ilFilename, component);
		if OS.Process.system ilasm = OS.Process.success then ()
		else
		    raise Error.Error (Source.nowhere,
				       "invocation of `" ^ ilasm ^ "' failed")
	    end

	fun apply () _ =
	    raise Crash.Crash "MkBackendComPlus.apply: not implemented"
    end

functor MkBackendComPlus(structure Switches: SWITCHES
			 structure ComPlusTarget: TARGET
			     where type t = IL.t): PHASE =
    MkTracingPhase(structure Phase =
		       struct
			   structure C = EmptyContext
			   structure I = FlatGrammar
			   structure O = ComPlusTarget

			   val translate = CodeGenPhase.translate
		       end
		   structure Switches = Switches
		   val name = "Code Generation")
