(*
 * Authors:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 1999-2001
 *   Andreas Rossberg, 1999-2000
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import
    structure TextIO
from "../../lib/system/TextIO"

import
    structure Url
from "../../lib/utility/Url"

import
    structure Crash
from "../infrastructure/Crash"

import
    structure Source
from "../infrastructure/Source"

import
    structure MkSwitches
from "../infrastructure/MkSwitches"

import
    structure MkFrontendCommon
from "../frontend-common/MkFrontendCommon"

import
    structure MkFrontendSML
from "../frontend-sml/MkFrontendSML"

import
    structure MkBackendCommon
from "../backend-common/MkBackendCommon"

import
    structure MkMozartTarget
    structure MkBackendMozart
from "../backend-mozart/MkBackendMozart"

import
    structure Signature
from "Signature"

import
    structure Composer
from "Composer"

import
    structure MkCompiler
from "MkCompiler"

import
    structure MkRecursiveCompiler
from "MkRecursiveCompiler"

structure SMLToMozartRecursiveCompiler =
    let
	structure Switches = MkSwitches(val logOut = TextIO.stdOut)

	val f: (Source.desc * Url.t -> Composer.Sig.t) ref =
	    ref (fn _ => raise Crash.Crash "SMLToMozartRecursiveCompiler.f")

	structure MozartTarget =
	    MkMozartTarget(structure Switches = Switches
			   structure Sig = Signature)

	structure FrontendSML =
	    MkFrontendSML(fun loadSign (desc, url) = #2 (!f (desc, url))
			  structure Switches = Switches)

	structure FrontendCommon =
	    MkFrontendCommon(fun loadSign (desc, url) = #2 (!f (desc, url))
			     structure Switches = Switches)

	structure BackendCommon =
	    MkBackendCommon(fun loadSign (desc, url) = !f (desc, url)
			    structure Switches = Switches)

	structure BackendMozart =
	    MkBackendMozart(structure Switches = Switches
			    structure MozartTarget = MozartTarget)

	structure Compiler =
	    MkCompiler(structure Switches         = Switches
		       structure Target           = MozartTarget
		       structure FrontendSpecific = FrontendSML
		       structure FrontendCommon   = FrontendCommon
		       structure BackendCommon    = BackendCommon
		       structure BackendSpecific  = BackendMozart)

	structure RecursiveCompiler =
	    MkRecursiveCompiler(structure Composer = Composer
				structure Compiler = Compiler
				val extension = "ozf")

	val _ = f := RecursiveCompiler.acquireSign
    in
	RecursiveCompiler
    end
