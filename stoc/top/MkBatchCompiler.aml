(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 1999-2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import
    structure TextIO
from "../../lib/system/TextIO"

import
    structure OS
from "../../lib/system/OS"

import
    structure UnsafePickle
from "../../lib/system/UnsafePickle"

import
    structure Url
from "../../lib/utility/Url"

import
    structure Crash
from "../infrastructure/Crash"

import
    structure Error
from "../infrastructure/Error"

import
    structure Signature
from "Signature"

import
    structure MkOptionParser
from "MkOptionParser"

import
    signature BATCH_COMPILER
from "BATCH_COMPILER-sig"

import
    signature RECURSIVE_COMPILER
from "RECURSIVE_COMPILER-sig"

functor MkBatchCompiler(structure RecursiveCompiler: RECURSIVE_COMPILER
			    where type Composer.Sig.t = Signature.t
			val executableHeader: string): BATCH_COMPILER =
    struct
	fun basename filename =
	    let
		fun cutPath ((#"/" | #"\\")::rest) = nil
		  | cutPath (c::rest) = c::cutPath rest
		  | cutPath nil = nil
		val cs = cutPath (List.rev (String.explode filename))
		fun cutExtension (#"."::rest) =
		    (case rest of
			 (#"/" | #"\\")::_ => cs
		       | _::_ => rest
		       | nil => cs)
		  | cutExtension ((#"/" | #"\\")::_) = cs
		  | cutExtension (_::rest) = cutExtension rest
		  | cutExtension nil = cs
	    in
		String.implode (List.rev (case cs of
					      #"."::_ => cs
					    | _ => cutExtension cs))
	    end

	fun stoc_c (infile, outfile) =
	    (RecursiveCompiler.compileFileToFile (infile, outfile);
	     OS.Process.success)

	fun stoc_x (infile, outfile) =
	    (*--** header *)
	    (RecursiveCompiler.compileFileToFile (infile, outfile);
	     OS.Process.success
(*--**UNFINISHED
	     case SMLofNJ.SysInfo.getOSKind () of
		 SMLofNJ.SysInfo.WIN32 => OS.Process.success
	       | _ => OS.Process.system ("chmod +x " ^ outfile)
*)
)

	structure OptionParser = MkOptionParser(RecursiveCompiler.Switches)

	fun usage () =
	    TextIO.output
	    (TextIO.stdErr,
	     "Usage:\n\
	      \\tstoc [<option> ...] [-c|-x] <input file> \
	      \[-o <output file>]\n\
	      \\tstoc --replacesign <input url> <signature file> \
	      \<output file>\n" ^ OptionParser.helpText)

	fun stoc' ["--replacesign", infile, signfile, outfile] =
	    (UnsafePickle.replaceSign (infile,
				       RecursiveCompiler.compileSign signfile,
				       outfile);
	     OS.Process.success)
	  | stoc' ["--dryrun"] =
	    let
		val s = TextIO.inputAll TextIO.stdIn
	    in
		RecursiveCompiler.compileString RecursiveCompiler.empty s;
		OS.Process.success
	    end
	  | stoc' ([infile] | ["-c", infile]) =
	    stoc_c (infile, basename infile ^ ".ozf")
	  | stoc' ["-x", infile] =
	    stoc_x (infile, basename infile)
	  | stoc' ([infile, "-o", outfile] | ["-c", infile, "-o", outfile]) =
	    stoc_c (infile, outfile)
	  | stoc' ["-x", infile, "-o", outfile] =
	    stoc_x (infile, outfile)
	  | stoc' _ = (usage (); OS.Process.failure)

	fun defaults () = () (* override defaults from MkSwitches here *)

	fun stoc arguments =
	    (defaults (); stoc' (OptionParser.parse arguments))
	    handle Error.Error (_, _) => OS.Process.failure
    end
