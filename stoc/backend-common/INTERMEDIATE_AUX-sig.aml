(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 1999-2000
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import
    signature IMP_SET
from "../misc/IMP_SET-sig"

import
    structure Stamp
from "../common/Stamp"

import
    structure Label
from "../common/Label"

import
    structure Type
from "../common/Type"

import
    signature INTERMEDIATE_GRAMMAR
from "../common/INTERMEDIATE_GRAMMAR-sig"

import
    structure IntermediateGrammar
from "../common/IntermediateGrammar"

import
    structure Arity
from "Arity"

import
    signature FLAT_GRAMMAR
from "FLAT_GRAMMAR-sig"

import
    structure FlatGrammar
from "FlatGrammar"

signature INTERMEDIATE_AUX =
    sig
	structure I: INTERMEDIATE_GRAMMAR = IntermediateGrammar
	structure O: FLAT_GRAMMAR = FlatGrammar

	val id_info: I.exp_info -> I.dec_info

	val freshIntermediateId: I.id_info -> I.id

	type subst = (Stamp.t * Stamp.t) list

	val substDec: I.dec * subst -> I.dec
	val substExp: I.exp * subst -> I.exp

	val separateAlt: I.pat -> I.pat

	structure IdSet: IMP_SET where type item = O.id

	val getUsedVars: O.exp * IdSet.t -> IdSet.t

	val rowLabels: Type.row -> Label.t list
	val typToArity: Type.t -> Arity.t
	val makeConArity: Type.t * bool -> Arity.t option
	val labelToIndex: Type.t * Label.t -> O.prod * int
    end
