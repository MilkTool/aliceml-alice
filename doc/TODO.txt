Dependency graph for the steps outlined below - for Operette 2:

               now
             /  | \
            1   2  3
             \   \ |
              \----4
                  / \
                 5   6
                 |
                 7
                 |
                 8--------
                 |  \  \  \
                 9  10 11 12

Steps to be performed after Operette 2: 13 and higher

Individual steps, each probably resulting in a checkin
(note - the system is inconsistent only once, namely in-between
steps 3 and 4):

======
 DONE
======

1. Do not use CM to generate files. (LK)

   This means that vm-mozart/bootstrap/Makefile does not copy the
   source files generated via CM, but instead explicitly calls ml-lex
   and ml-yacc.  This means we have to automate patching Parser.grm.sig
   for Alice, using something like the following awk script:

   {
     if (match ($0, /^structure Tokens : Parser_TOKENS$/))
       savedline = $0;
     else {
       print $0;
       if (match ($0, /^structure ParserData:PARSER_DATA$/))
         print savedline;
   }

2. Clean up the bootstrapping process in preparation of runtime types. (LK)

   Every bootstrapping pass uses its own local build and install
   directories (for sources and linked components, respectively) as
   described below.  make.sh is adapted to reflect the new build
   procedure as seen from the top level.

   The directory structure within the build directories corresponds
   to the source structure below stockhausen (including the stoc
   directory).  This has to be reflected by the relative paths used
   in import announcements.  Component `Pickle' is hacked to remove
   dependencies on other files (for now, needs a cleanup later).
   Also, the *.oz files present below vm-mozart/bootstrap are moved
   below the main `stoc' directory.

   In order to enable pass 3, a simple stodep utility is provided as
   file stoc/top/MakeDepend.sml for now.  The parser used will have
   to be replaced by a correct one.

   Documentation about the build process is added to the
   vm-mozart/bootstrap/Makefile:

   ##
   ## Description of Externally Useful Targets
   ## ========================================
   ##
   ## all:
   ##    Identical to build3-install.
   ## depend:
   ##    Creates the file Makefile.depend, which contains the dependencies
   ##    needed for Pass 3.
   ## clean:
   ##    Removes all files created by previous builds.
   ## veryclean:
   ##    Identical to clean.
   ## distclean:
   ##    Identical to veryclean.
   ##
   ## Pass 1
   ## ------
   ##
   ## The goal is to build a stoc using the hybrid SML/NJ+Mozart compiler.
   ## This is performed via the following targets.
   ##
   ## build1-all:
   ##    A complete source tree is created in subdirectory build1.
   ##    The native components are created using ozc.  The component
   ##    stoc/top/StocMain.ozf (and all its imports, transitively)
   ##    are built using the hybrid compiler via recursive invocation.
   ## build1-install:
   ##    A minimal but working system (only consisting of a compiler,
   ##    without libraries) is installed to subdirectory build1/install.
   ##
   ## Pass 2
   ## ------
   ##
   ## The outcome of this pass is a working system with libraries.
   ## The components in the libraries carry export signatures.
   ##
   ## build2-all:
   ##    A source tree for the libraries is created in subdirectory build2.
   ##    The native components are assigned signatures via --replacesign.
   ##    Libraries implemented in Alice are compiled using the system
   ##    installed in Pass 1.
   ## build2-install:
   ##    A system with libraries (as far as they are needed to build
   ##    a system with runtime type information) is installed to
   ##    subdirectory build2/install.
   ##
   ## Pass 3
   ## ------
   ##
   ## This pass finally builds bootstrapped versions of /everything/
   ## (including stot), with runtime type information and a first-class
   ## compiler.
   ##
   ## build3-all:
   ##    A complete source tree is created in subdirectory build1.
   ##    Every source file is compiled independently; no recursive
   ##    invocation happens.
   ## build3-install:
   ##    A complete system with all libraries and tools, carrying
   ##    runtime type information, is installed to subdirectory
   ##    build3/install.
   ##
   ## Installation
   ## ------------
   ##
   ## Globally install all files as found in subdirectory build3/install.
   ## This is accomplished by the following target.
   ##
   ## install:
   ##    Install the system found in build3/install to the global
   ##    installation directory.
   ##

3. Move codebase to Alice. (AR)

   All files under stoc are converted to Alice by including the
   appropriate import annotations and renaming them to *.aml. Signature
   components are now named using the -sig.aml convention to avoid name
   clashes, particularly on inferior file systems like Windows.

   For all files mentioned in vm-mozart/bootstrap/Makefile, if a
   *.header file existed, the Alice source is the concatenation of the
   header and the previous SML source, modulo URI adaption and some
   cleanup where necessary.  If a *.body file existed, it is now the
   Alice source modulo URI adaption; the previous SML source became a
   dummy for SML/NJ.

   Those dummy files and all support files only required to bootstrap
   with SML/NJ have been moved to /bootstrap. Exceptions are the
   bootstrap versions of GlobalStamp and MkBackendMozart, which have
   just been renamed to Bootstrap*. The former will be moved to
   bootstrap once we use /lib instead of /stoc/misc. The latter remains
   in /stoc/top because it is not a support file but an essential part of
   the compiler.

   The bootstrap dir also includes a aml2sml converter and its hooking
   into CM. The SML/NJ sources are now generated into subdirectories
   named NJ via aml2sml to avoid cluttering up the source directories. 
   (It would be nice if we could just generate SML/NJ sources as
   temporaries. However, this does not seem to be supported by CM.)

   The *.cm files have been modified accordingly.

   Some long-outstanding file and module renamings have been done on the
   way:

      Make* -> Mk*
      CountPosLexer -> MkCountPosLexer
      LexerError -> MkLexerError
      ParsingPhase -> MkParsingPhase
      frontend-common/StringMap -> misc/StringMap
      SORT -> LIST_SORT
      Sort -> ListSort

   Some cleanup in the stoc and stoc/error directories.
   
   The JVM backend has been removed because it was totally out of sync
   anyway.

4. Get vm-mozart-bootstrap to work again. (LK)

   Adapt the Makefile to all renamings that have happened in the
   previous step.

   Most headers are not needed any more (if the source is an Alice
   source file anyway).  Exceptions to this are the files generated
   via ml-lex/ml-yacc (Lexer.aml, PARSER-sig.aml, Parser.sml) - these
   tools do not support our concept of imports.

5. Use fragmented library. (LK)

   The lib/fundamental directory becomes part of the source tree,
   replacing lib/Base.aml.  Dependencies need to be generated for
   the sources in build2 as well.  Base.import is replaced by
   lib/fundamental/Fundamental.import.  The component lib/fundamental/RTT
   is copied from RTTDummy for now.

6. Provide a new place for all files formerly in lib/bootstrap. (LK)

   We adopt the convention to name signatures for native components
   as Component.asig instead of Component.<extension>.sig.

   This means that TextIO.sig (et al.) are moved to lib/system.
   Pickle itself should be renamed to UnsafePickle.
   The vm-mozart/bootstrap/Makefile needs to be adapted.

   Bootstrap.aus has to be moved to vm-com+/Base.aml, since that runtime
   still needs it.

7. Alice source tree uses lib/utility and lib/rtt. (LK)

   Formerly the corresponding sources resided in stoc/misc and
   stoc/common.  The import URLs reflect this change.

8. Implement pass 2. (LK)

   Build fundamental, system, utility, and rtt in pass 2 without RTT. Use
   DummyRTT as RTT component.

   Use full RTT in pass 3. Use RTT component built in pass 2. Rebuild
   everything.  We will need a working where-primitive-type to avoid
   generation of new type stamps - so for now, the RTT component itself
   is incompatible with the generated runtime types.

9. Clean up source tree. (LK)

   Currently we have two copies of some modules - one for the
   Alice codebase, one as the SML/NJ source.  This is the
   case for some sources formerly residing in stoc/misc and
   stoc/common.  These sources now live in lib/utility and
   utility/rtt and should now be handled using aml2sml.

   Move stoc/misc/BootstrapGlobalStamp to bootstrap/GlobalStamp.

   Rename RTTDummy to DummyRTT to be consistent with other dummies.

10. Use the new stodep instead of the current tool. (LK)

   Remove stoc/top/MakeDepend.aml and stoc/top/make-depend.cm.

======
 TODO
======

11. Test runtime types. (AR)

   Also provide functors for type-safe pickling and unpickling.

12. Adapt inspector, gtk, constraints to new build procedure. (LK/TB)

==================
 AFTER OPERETTE 2
==================

13. Enrich native components with runtime types. (LK/AR)

   Natively implemented components that export types, such
   as TextIO.outstream, are assigned runtime types by wrapping
   them in an Alice component.

14. Provide fundamental library as building-blocks. (AR/LK)

   Every runtime instantiates `holes' in the library, such
   as by specifying that Int = IntInf or LargeInt = Int31.
   Includes solving the cycle problem regarding Pervasive.

15. Factorize vm-mozart/bootstrap/Makefile into vm-specific and generic stuff.

   A new file Makefile.vars will contain all vm-specific stuff.
   BACKENDMOZARTSOURCES0 will be renamed to BACKENDSPECIFICSOURCES0
   and given its value in Makefile.vars.

   The same can be done for FRONTENDSMLSOURCES0, which would
   become FRONTENDSPECIFICFILES0.

   Build hybrid system as build0.

16. Clean up lib/system/UnsafePickle.

   The Pickle component needs Url, which also should move to system.
