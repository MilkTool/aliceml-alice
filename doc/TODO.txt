Dependency graph for the steps outlined below - for Operette 2:

               now
             /  |  \
            1   2   3
             \  |   |
              \ 5   4
               \ \ /
                \-6
                  |
                  7
                 / \
                8   9

Steps to be performed after Operette 2: 10, 11, 12

Individual steps, each probably resulting in a checkin
(note - the system is inconsistent only once, namely in-between
steps 3 and 4):

1. Do not use CM to generate files. (LK)

   This means that vm-mozart/bootstrap/Makefile does not copy the
   source files generated via CM, but instead explicitly calls ml-lex
   and ml-yacc.  This means we have to automate patching Parser.grm.sig
   for Alice, using something like the following awk script:

   {
     if (match ($0, /^structure Tokens : Parser_TOKENS$/))
       savedline = $0;
     else {
       print $0;
       if (match ($0, /^structure ParserData:PARSER_DATA$/))
         print savedline;
   }

2. Clean up the bootstrapping process in preparation of runtime types. (LK)

   Every bootstrapping pass uses its own local build and install
   directories (for sources and linked components, respectively) as
   described below.  make.sh is adapted to reflect the new build
   procedure as seen from the top level.

   The directory structure within the build directories corresponds
   to the source structure below stockhausen (including the stoc
   directory).  This has to be reflected by the relative paths used
   in import announcements.  Component `Pickle' is hacked to remove
   dependencies on other files (for now, needs a cleanup later).
   Also, the *.oz files present below vm-mozart/bootstrap are moved
   below the main `stoc' directory.

   In order to enable pass 3, a simple stodep utility is provided as
   file stoc/top/MakeDepend.sml for now.  The parser used will have
   to be replaced by a correct one.

   Documentation about the build process is added to the
   vm-mozart/bootstrap/Makefile:

   ##
   ## Description of Externally Useful Targets
   ## ========================================
   ##
   ## all:
   ##    Identical to build3-install.
   ## depend:
   ##    Creates the file Makefile.depend, which contains the dependencies
   ##    needed for Pass 3.
   ## clean:
   ##    Removes all files created by previous builds.
   ## veryclean:
   ##    Identical to clean.
   ## distclean:
   ##    Identical to veryclean.
   ##
   ## Pass 1
   ## ------
   ##
   ## The goal is to build a stoc using the hybrid SML/NJ+Mozart compiler.
   ## This is performed via the following targets.
   ##
   ## build1-all:
   ##    A complete source tree is created in subdirectory build1.
   ##    The native components are created using ozc.  The component
   ##    stoc/top/StocMain.ozf (and all its imports, transitively)
   ##    are built using the hybrid compiler via recursive invocation.
   ## build1-install:
   ##    A minimal but working system (only consisting of a compiler,
   ##    without libraries) is installed to subdirectory build1/install.
   ##
   ## Pass 2
   ## ------
   ##
   ## The outcome of this pass is a working system with libraries.
   ## The components in the libraries carry export signatures.
   ##
   ## build2-all:
   ##    A source tree for the libraries is created in subdirectory build2.
   ##    The native components are assigned signatures via --replacesign.
   ##    Libraries implemented in Alice are compiled using the system
   ##    installed in Pass 1.
   ## build2-install:
   ##    A system with libraries (as far as they are needed to build
   ##    a system with runtime type information) is installed to
   ##    subdirectory build2/install.
   ##
   ## Pass 3
   ## ------
   ##
   ## This pass finally builds bootstrapped versions of /everything/
   ## (including stot), with runtime type information and a first-class
   ## compiler.
   ##
   ## build3-all:
   ##    A complete source tree is created in subdirectory build1.
   ##    Every source file is compiled independently; no recursive
   ##    invocation happens.
   ## build3-install:
   ##    A complete system with all libraries and tools, carrying
   ##    runtime type information, is installed to subdirectory
   ##    build3/install.
   ##
   ## Installation
   ## ------------
   ##
   ## Globally install all files as found in subdirectory build3/install.
   ## This is accomplished by the following target.
   ##
   ## install:
   ##    Install the system found in build3/install to the global
   ##    installation directory.
   ##

3. Move codebase to Alice. (AR)

   This concerns all files mentioned in vm-mozart/bootstrap/Makefile.
   If a *.header file exists, the Alice source is the concatenation
   of the header and the current SML source.  If a *.body file exists,
   it is the Alice source; the current SML source becomes a dummy for SML/NJ.

   The SML/NJ sources should be generated into subdirectories named NJ
   to avoid cluttering up the source directories.  The *.cm files need
   to be modified accordingly.

   Alternatively, generate SML/NJ sources as temporaries only.

   Maybe we want to do some renamings at the same time:

      Make* -> Mk*
      CountPosLexer -> MkCountPosLexer
      ParsingPhase -> MkParsingPhase

4. Get vm-mozart-bootstrap to work again. (LK)

   Instead of concatenating headers and sources, copy the files
   from the Alice codebase as-is.  Use --implicit-import-file instead
   of --no-implicit-import.

   For the ml-lex/ml-yacc generated files, add import headers.

   Question: What should happen to the files in
   vm-mozart/bootstrap/backend-mozart/*.oz vs. stoc/backend-mozart/*.oz?

5. Provide a new place for all files formerly in lib/bootstrap. (LK)

   This means that TextIO.sig (et al.) are moved to lib/system.
   The module Pickle.sig needs Url, which also should move to system.
   Pickle itself should be renamed to UnsafePickle.
   The vm-mozart/bootstrap/Makefile needs to be adapted.

6. Use fragmented library. (AR)

   This step gets rid of lib/bootstrap/Bootstrap.aus.
   This file has to be moved to vm-com+, since that runtime
   still needs it.

7. Implement pass 2. (AR)

8. Test runtime types. (AR)

9. Enrich native components with runtime types. (LK)

   Natively implemented components that export types, such
   as TextIO.outstream, are assigned runtime types by wrapping
   them in an Alice component.

10. Provide fundamental library as building-blocks. (AR/LK)

   Every runtime instantiates `holes' in the library, such
   as by specifying that Int = IntInf or LargeInt = Int31.
   Includes solving the cycle problem regarding Pervasive.

11. Compiler uses lib. (AR)

   Currently we have two copies of some modules - one for the
   Alice codebase, one as the SML/NJ source.  This is the
   case for some sources formerly residing in stoc/misc and
   stoc/common.  These sources should now be handled using
   aml2sml.

12. Generate dependencies automatically. (AR)

   This involves building a stodep tool and invoking it to
   build dependencies for the build2 and build3 directories.
