(* Alice Snake 2.0 - Arena
 *
 *  Authors: Benedikt Grundmann / Sebastian Germesin
 *
 *  $Revision$
 *
 *  Last updated: $Date$ by $Author$
 * 
 *
 *)

import structure Random   from "x-alice:/lib/utility/Random"

import signature ARENA    from "ARENA-sig"
import structure Protocol from "../common/Protocol"
import structure Snake    from "Snake"
import structure Pos      from "../common/Pos"
import structure Color    from "../common/Color"

structure Arena :> ARENA =
struct

    structure P = Protocol

    type arena = P.field Array2.array (* MUTABLE *)


    type config = 
	{
	 dimensions: int * int,
	 players: int,
	 walls: int
	 (* MAGIC NUMBERs ... *)
	 }
    
    exception NoMoreEmptySpots
       

    fun random' {dimensions = (rows, cols), players,walls} =
	let
            fun testUp (arena, (row, col)) =
                Array2.alli Array2.RowMajor (fn (r, c, cell) =>
                    case cell of 
                        Protocol.EMPTY  => true
                    |   _               => false) { 
                        base    = arena, 
                        row     = row - 2, 
                        col     = col - 2, 
                        nrows   = SOME 3,
                        ncols   = SOME 5
                    }


            fun testDown (arena, (row, col)) =
                Array2.alli Array2.RowMajor (fn (r, c, cell) =>
                    case cell of 
                        Protocol.EMPTY  => true
                    |   _               => false) { 
                        base    = arena, 
                        row     = row, 
                        col     = col - 2, 
                        nrows   = SOME 3,
                        ncols   = SOME 5
                    }


            fun testRight (arena, (row, col)) =
                Array2.alli Array2.RowMajor (fn (r, c, cell) =>
                    case cell of 
                        Protocol.EMPTY  => true
                    |   _               => false) { 
                        base    = arena, 
                        row     = row - 2, 
                        col     = col, 
                        nrows   = SOME 5,
                        ncols   = SOME 3
                    }


            fun testLeft (arena, (row, col)) =
                Array2.alli Array2.RowMajor (fn (r, c, cell) =>
                    case cell of 
                        Protocol.EMPTY  => true
                    |   _               => false) { 
                        base    = arena, 
                        row     = row - 2, 
                        col     = col - 2, 
                        nrows   = SOME 5,
                        ncols   = SOME 3
                    }

            fun test (arena, p, dir) =
                (case dir of 
                    Protocol.UP     => testUp (arena, p)
                |   Protocol.DOWN   => testDown (arena, p)
                |   Protocol.LEFT   => testLeft (arena, p)
                |   Protocol.RIGHT  => testRight (arena, p))
                handle Subscript => false

	    val arena = Array2.array(rows,cols,P.EMPTY)
	    (* initialising an empty arena with dimensions [dimensions] *)
            
            (* [horizontal ((r,c), l)] draws a wall from (r,c) to (r, c+l-1)
             *)
            fun horizontal ((r,c), l) =
                if l <= 0 then ()
                else (Array2.update (arena, r, c, P.WALL);
                      horizontal (Pos.right (r,c), l - 1))

            (* [vertical ((r,c), l)]
               draws a wall from (r,c) to (r + l - 1, c)
             *)
            fun vertical ( (r, c), l) =
                if l <= 0 then ()
                else (Array2.update (arena, r, c, P.WALL);
                      vertical (Pos.below (r, c), l - 1))
                
            (* place the outer borders *)
            val _   = vertical ((0, 0), rows)
            val _   = vertical ((0, cols - 1), rows)
            val _   = horizontal ((0, 0), cols)
            val _   = horizontal ((rows - 1, 0), cols)


            (* place inner walls.
               do so by selecting figures
             *)
            val figures = #[
                [(4, true, Protocol.UP),    
                 (4, true, Protocol.RIGHT),        
                 (4, true, Protocol.UP)],
                [(4, true, Protocol.UP),
                 (4, true, Protocol.LEFT),
                 (4, true, Protocol.UP)],
                [(3, true, Protocol.UP)],
                [(3, true, Protocol.RIGHT)],
                [(3, true, Protocol.LEFT)],
                [(3, true, Protocol.DOWN)]
            ]
            
            (* [place (f, p)] tries to place figure [f] on the arena [a] at 
              position [p]. returns SOME newpos if placement was successful, 
              NONE otherwise.
            *)
 
            fun place (f, p) =
                let
                    exception InvalidPlace
                    
                    fun testPart ((length, false, dir), p) = 
                        let val p' = Pos.moveBy (p, dir, length)
                        in
                            if test (arena, p', Protocol.UP) andalso 
                                test (arena, p', Protocol.DOWN) then
                                p'
                            else raise InvalidPlace
                        end
                            
                    |   testPart ((length, true, dir), p)  = 
                        if length = 0 then p
                        else 
                            if test (arena, p, dir) then
                                testPart ((length - 1, true, dir), 
                                            Pos.move (p, dir))
                            else
                                raise InvalidPlace

                    fun placePart ((l, false, d), p)    = Pos.moveBy (p, d, l)
                    |   placePart ((l, true, d), p as (r, c))   = 
                        if l = 0 then p
                        else (Array2.update (arena, r, c, P.WALL);
                              placePart ((l - 1, true, d), Pos.move (p, d)))
                in
                    ((* test if we can place this figure *)
                     List.foldl testPart p f;   
                     (* if so place it and return end point *)
                     SOME (List.foldl placePart p f)
                    ) handle InvalidPlace => 
                     (* otherwise return NONE *)
                        NONE
                end 

            fun chooseFigure () = 
                let
                    val max = Vector.length figures
                in
                    Vector.sub (figures, Random.int max)
                end
               
            val maxNumberOfTries = 8
            
            fun findEmptySpot tries =
                let
                    val r2  = rows div 2 - 2
                    val c2  = cols div 2 - 2
                    
                    val (r, c) = case tries mod 4 of
                            0   => (Random.int r2, Random.int c2)
                        |   1   => (r2 + Random.int r2, Random.int c2)
                        |   2   => (r2 + Random.int r2, c2 + Random.int c2)
                        |   3   => (Random.int r2, c2 + Random.int c2)
                        |   _   => assert false
                    
                    val lu = (r, c)
                    val p  = (r + 2, c + 2)
                    val ru = (r, c + 2)

                    fun testSpot p = test (arena, p, Protocol.UP) andalso
                                        test (arena, p, Protocol.DOWN)
                in
                    if testSpot p then p
                    else if testSpot lu then lu
                    else if testSpot ru then ru
                    else if tries < maxNumberOfTries then
                        findEmptySpot (tries + 1)
                    else
                        raise NoMoreEmptySpots
                end

                
            fun placeWalls (n, p) =
                if n <= 0 then ()
                else
                    let val f = chooseFigure () 
                    in
                        case place (f, p) of
                            NONE    =>
                            let val p = findEmptySpot 0
                            in
                                case place (f, p) of
                                    NONE    => placeWalls (n, p)
                                |   SOME p' => placeWalls (n - 1, p')
                            end
                        |   SOME p' =>
                            placeWalls (n - 1, p')
                    end
                    
                            
            val _   = placeWalls (walls, (rows div 2, cols div 2)) 

            (* place starting points *)

	    fun startpoints (0, xs) = xs
	      | startpoints (p, xs) = 
		let
		    val pos = findEmptySpot 20
		    val d = 
			case Random.int 4 of
			    0 => P.UP
			  | 1 => P.DOWN
			  | 2 => P.LEFT
			  | 3 => P.RIGHT
			  | _ => assert false
		in
                    startpoints (p - 1, (pos, d) :: xs)
		end

	in
             (* TODO: handle NoMoreEmptySpots *)
	     (arena, startpoints (players, nil))
	end

    fun random tries c =
            random' c 
        handle NoMoreEmptySpots =>
            if tries >= 3 then 
                random 0 { c where walls = #walls c - 1 }
            else
                random (tries + 1) c

    val random = random 0 
        
    fun placeSnakes (a, snakes) =
	let
	    val died    = ref nil
	    val fin     = ref nil
            val eaters  = ref nil

	    fun killSnake s = 
		let
		    val hb = Snake.body s
		in
		    died := s :: (!died);
		    List.app 
		        (fn (r, c) => 
                            Array2.update (a, r, c, P.EMPTY)) hb
		end

	    fun placeHead snake =
		let
		    val (r, c) = Snake.head snake
		    val color = Snake.color snake
		    val dir   = Snake.direction snake
		    val collObject = Array2.sub (a, r, c)
		    fun hitSnake s     nil     = false
		      | hitSnake s (sn :: slist) = 
			let
			    val hb = (Snake.head sn) :: (Snake.body sn)
			in
			    if List.exists (fn x => Snake.head s = x) hb
				then true
			    else hitSnake s slist
			end
			
		    val othersnakes = 
			    List.filter (fn x => not (snake = x)) snakes
		    val hit = hitSnake snake othersnakes
		    
                    fun place () = Array2.update(a, r, c, P.SNAKE_HEAD(dir,
								       color)) 
                in
		    if hit
			then killSnake snake
		    else 
			case collObject of
			 P.EMPTY    => place () 
		       | P.GOODY n  => (Snake.eat (snake,n); 
                                        place ();
                                        eaters := snake :: !eaters)
		       | P.WALL     => killSnake snake
                       | P.GATE (_, P.CLOSED) => killSnake snake
		       | P.GATE (col, P.OPEN) => 
                            if Color.equal (col, color)
			        then (fin := snake :: (!fin);
				        Array2.update(a, r, c, collObject))
			    else killSnake snake
		       | P.SNAKE_HEAD(_,col) => 
				 if not (Color.equal (col, color))
				     then killSnake snake
				 else ()
		       |     _      => killSnake snake
		end

	    fun placeBody snake =
		let
                    val headP   = Snake.head snake
		    val color   = Snake.color snake
		    val body    = Snake.body snake
		    fun thisSnake s = Color.equal (color, Snake.color s)
                    (* have we already died? *)
		    val dead = List.exists thisSnake (!died)
		
                    fun place [] = ()
                      | place ((r, c) :: bodyRest) =
                        if (r, c) = headP then 
                            (* ouch! our head has hit ourself! *)
                            killSnake snake
                        else
                            (Array2.update (a, r, c, P.SNAKE_BODY color);
                             place bodyRest)
                in
		    if dead then ()
		    else place body
		end
		
	in
	    List.app placeHead snakes;
	    List.app placeBody snakes;
	    { dead = !died, grown = !eaters, finished = !fin }
	end
    
    fun emptyCopy a =
        let val (rows, cols) = Array2.dimensions a
        in
            Array2.array (rows, cols, P.EMPTY)
        end

    fun copy a = 
	let
	    val (rows, cols) = Array2.dimensions a
	in 
	    Array2.tabulate Array2.RowMajor (rows, cols, 
					     fn (r, c) => Array2.sub (a, r, c))
	end

        
    fun removeSnakes (a,snakes) = 
	let
	    fun removeSnake s =
		let
		    val ps = (Snake.head s)::(Snake.body s)
		in
		    List.app (fn(r,c) => 
                        Array2.update(a,r,c,P.EMPTY)) ps
		end
	in
	    List.app (fn s => removeSnake s) snakes
	end


    fun diff (old,new) =
        let
            val _   = assert Array2.dimensions old = Array2.dimensions new

            val (rows, cols) = Array2.dimensions old

	    fun goodyEqual (P.GOODY n1, 
			    P.GOODY n2) = Int.equal (n1, n2)
	      | goodyEqual (_, _)       = false
		
	    fun gateEqual (P.GATE (c1, s1),
			   P.GATE (c2, s2)) =
		(Color.equal (c1, c2) andalso s1 = s2)
	      | gateEqual (_, _)            = false

	    fun headEqual (P.SNAKE_HEAD (d1, c1), 
			   P.SNAKE_HEAD (d2, c2)) =
		(Color.equal (c1, c2) andalso d1 = d2)
	      | headEqual (_, _)                  = false

	    fun bodyEqual (P.SNAKE_BODY c1, 
			   P.SNAKE_BODY c2) = 
		Color.equal (c1, c2)
	      | bodyEqual (_, _)            = false

	    fun fieldEqual (P.WALL, P.WALL)   = true
	      | fieldEqual (P.EMPTY, P.EMPTY) = true
	      | fieldEqual (field1, field2)   =
		(case field1 of
		    P.GOODY      _ => goodyEqual (field1, field2)
		  | P.GATE       _ => gateEqual  (field1, field2)
		  | P.SNAKE_HEAD _ => headEqual  (field1, field2)
		  | P.SNAKE_BODY _ => bodyEqual  (field1, field2)
		  |       _        => false)


            fun help ((r, c), xs) = 
                assert 0 <= r andalso r <= rows andalso 
                    0 <= c andalso c <= cols do
                if c = cols
		    then xs
	        else 
		    if r = rows
		        then help ((0, c + 1), xs)
		    else
			let
			    val f = Array2.sub (old, r, c)
			in
			    case f of
                                (* remove snakes from the old field *)
				(P.SNAKE_HEAD _ | P.SNAKE_BODY _) =>
				    Array2.update (old, r, c, P.EMPTY)
			    |   _ => ();
		            if fieldEqual (f, Array2.sub (new, r, c))
			       then help ((r + 1, c), xs)
		            else 
                               help ((r + 1, c),
                                   ((r,c), Array2.sub (new, r, c)) :: xs)
                        end
      in
	  help ((0,0), nil)
      end

    fun toDiffList a = diff (emptyCopy a, a)

end

(*
local
    fun for (low, upp, f) =
        if low > upp then ()
        else (f low; for (low + 1, upp, f))
in
    fun dump a =
        let 
            val (rows, cols)    = Array2.dimensions a 
        in
            for (0, rows - 1, fn r => (
                for (0, cols - 1, fn c => 
                    TextIO.output1 (TextIO.stdOut, 
                        case Array2.sub (a, r, c) of
                            Protocol.EMPTY      => #"."
                        |   Protocol.WALL       => #"#"
                        |   Protocol.GOODY  _   => #"C"
                        |   _                   => #"?")
                );
                TextIO.output1 (TextIO.stdOut, #"\n"))
            )
        end
end
*)
