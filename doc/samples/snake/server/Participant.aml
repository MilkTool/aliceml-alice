import signature PARTICIPANT   from "PARTICIPANT-sig"
import structure Protocol      from "../common/Protocol"
import structure Color         from "../common/Color"
import structure Snake         from "Snake"


structure Participant :> PARTICIPANT =
struct
    type id = int

    type player_info = {
	       points     : int ref,
               gamePoints : int ref,
	       name       : string,
	       color      : Color.color,
	       nextDir    : Protocol.direction ref,
               gatePos    : (int * int) ref,
	       deathCount : int ref
		       }

    datatype state =
	CONNECTED
      | PLAYING  of player_info * Snake.snake
      | HALF_FINISHED of player_info * int ref
      | FINISHED of player_info * id option ref 
      | DEAD     of player_info * id option ref
      | WATCHING of id option ref
      | DISCONNECTED    (* TODO: Do we need it? *)


    type participant = (id * Protocol.client_interface * state ref)

    
    fun participant (id, interface) =
        (id, interface, ref CONNECTED)

    fun playerInfo (_, _, ref (PLAYING (st, _)))        = st
    |   playerInfo (_, _, ref (HALF_FINISHED (st, _)))  = st
    |   playerInfo (_, _, ref (FINISHED (st, _)))       = st
    |   playerInfo (_, _, ref (DEAD (st, _)))           = st
    |   playerInfo _                                    = assert false


    fun snake (_, _, ref (PLAYING (_, sn)))        = sn
    |   snake _                                    = assert false

    fun id (id, _, _) = id

    fun client_interface (_, i, _)  = i

    fun state (_, _, s) = s

    fun nameNColor p = 
        let
            val info    = playerInfo p
            val name    = #name info
            val color   = #color info
        in
            (name, color)
        end

end
