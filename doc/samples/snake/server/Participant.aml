import signature PARTICIPANT   from "PARTICIPANT-sig"
import structure Protocol      from "../common/Protocol"
import structure Color         from "../common/Color"
import structure Snake         from "Snake"


structure Participant :> PARTICIPANT =
struct
    type id = int

    type player_info = {
	       points     : int ref,
               gamePoints : int ref,
	       name       : string,
	       color      : Color.color,
	       nextDir    : Protocol.direction ref,
	       deathCount : int ref 
			(* number of times this snake has died already *)
		       }

    datatype state =
	CONNECTED
      | PLAYING  of player_info * Snake.snake
      | FINISHED of player_info * id ref
      | DEAD     of player_info * id ref
      | WATCHING of id ref
      | DISCONNECTED    (* TODO: Do we need it? *)


    type participant = (Protocol.client_interface * state ref)


    fun playerInfo (_, ref (PLAYING (st, _)))   = st
    |   playerInfo (_, ref (FINISHED (st, _)))  = st
    |   playerInfo (_, ref (DEAD (st, _)))      = st
    |   playerInfo _                            = assert false


    fun snake (_, ref (PLAYING (_, sn)))        = sn
    |   snake _                                 = assert false

end
