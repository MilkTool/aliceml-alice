(* Alice Snake 2.0 - Participant
*
*  Authors: Benedikt Grundmann / Sebastian Germesin
*
*  $Revision$
*
*  Last updated: $Date$ by $Author$
* 
*
*)

import structure Protocol from "../common/Protocol"
import structure Color    from "../common/Color"
import structure Snake    from "Snake"

signature PARTICIPANT =
sig
    type id = int

    type player_info = {
	       points     : int ref,
               gamePoints : int ref,
	       name       : string,
	       color      : Color.color,
	       nextDir    : Protocol.direction ref,
               gatePos    : (int * int) ref,
	       deathCount : int ref
			(* number of times this snake has died already *)
		       }

    datatype state =
	CONNECTED
      | PLAYING  of player_info * Snake.snake
      | FINISHED of player_info * id ref * bool
      | DEAD     of player_info * id ref
      | WATCHING of id ref
      | DISCONNECTED    (* TODO: Do we need it? *)

    
    type participant

    val participant :       id * Protocol.client_interface -> participant

    val playerInfo :        participant -> player_info
    val snake :             participant -> Snake.snake
    val id :                participant -> id
    val client_interface :  participant -> Protocol.client_interface
    val state :             participant -> state ref
    
    val nameNColor :        participant -> string * Color.color
end


