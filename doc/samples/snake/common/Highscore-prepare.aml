(* Alice Snake 2.0 - Operations on Positions
 *
 *  Authors: Benedikt Grundmann / Sebastian Germesin
 *
 *  $Revision$
 *
 *  Last updated: $Date$ by $Author$
 * 
 *
 *)

import signature HIGHSCORE from "HIGHSCORE-sig"
import structure OS        from "x-alice:/lib/system/OS"
import structure Color     from "Color"

structure Highscore :> HIGHSCORE =
struct

    type entry = 
	{
	 name:       string,
	 color:      Color.color,
	 points:     int,
	 player:     int,
	 level:      int
	 }

    type highscore = entry list
    type t = highscore

    type points = 
	{ 
	 name:       string,
	 color:      Color.color,
	 points:     int,        (* total points (excluding gamePoints) *)
	 gamePoints: int         (* points made this game 
				  but not yet taken home *)
	 }

    val empty = nil


    fun merge (high, p : points list,player,lvl) = 
	let
	    val convert = 
		List.foldl (fn(point,xs) => {name = #name point,
					     color = #color point,
					     points = #points point,
					     player = player,
					     level = lvl}::xs) nil

	    fun order (e1 : entry, e2 : entry) = 
		if #points e1 < #points e2 
		    then LESS
		else
		    if #points e1 > #points e2
			then GREATER
		    else EQUAL
	(* if highscore should be sorted another way,
	   only change this procedure *)

	    val sorted = List.sort order ((convert p)@high)

	in
	    List.take(sorted, 10)
	end

    val foldl = List.foldl (* TODO: implementation *)

end

val _ = Pickle.save ("Highscore.ozf",pack (structure Highscore = Highscore) 
		                       :> (structure Highscore : HIGHSCORE))
    

val _ = OS.Process.exit OS.Process.success
