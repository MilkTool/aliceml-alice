import structure Protocol   from "../common/Protocol"
import structure Gui        from "Gui"
import signature CLIENT     from "CLIENT-sig"
import structure Inspector  from "x-alice:/lib/tools/Inspector"
import structure Ctrl       from "x-alice:/lib/utility/Ctrl"

open Ctrl

structure Client (* :> CLIENT *) = 
struct
    (* [startClient (gui, server)] starts the core client given a server,
       which can be a future
     *)
    fun startClient (gui_join : Gui.gui_join, 
		     server : Protocol.server_interface) : 
            Protocol.client_interface * Gui.model_join =
        let
            val promise     = Promise.promise () : Gui.gui_game Promise.promise
            val guiGame     = Promise.future promise
            fun playersJoined players = #playersJoined gui_join players
            
            fun tournamentStarted () = (* ispawn (_file_, _line_)
                                            (#gameStarted gui_join) () *) ()

            fun levelStarted levelInfo = 
                #startLevel guiGame levelInfo

            fun playerDisconnected p = #playerDisconnected gui_join p

            fun abort () = ()

            fun countdown n = ()

            fun update diffs = #update guiGame diffs
            
	    fun headPosition p = #headPosition guiGame p

            fun tick remainingTime = () 
            
            fun playersDied players = ()

            fun playersFinished players = (* #playersFinished guiGame players *) ()

            fun levelFinished () = ()

            fun tournamentFinished highscore = 
                #gameFinished guiGame highscore

            fun updatePoints points = #updatePoints guiGame points

            (* ------------ gui callbacks --------- *)
            (* user turns snake, gives up...        *)
            
            fun turn d =
                #turn server d

            fun changeView h =
                #changeView server h

            fun giveUp () =
                #giveUp server ()
                
            fun play (name, color) = 
                if #play server (name, color) then
                    FST ({ turn, changeView, giveUp }, promise)
                else
                    SND "no more players are allowed"
                
            fun watch () =
                (#watch server ();
                 FST ({ turn, changeView, giveUp }, promise))

            fun disconnect () = #disconnect server ()
            
            val lock = Lock.lock ()

            fun locked name f =
                Lock.sync lock (fn a => 
                      let   val _   = Inspector.inspect ("calling: " ^ name, a); 
                            val res = f a
                        in
                            Inspector.inspect ("leaving: " ^ name);
                            res
                        end handle e => (
                            Inspector.inspect ("leaving: " ^ name ^ " with exception", e);
                            raise e
                        ))
        in
            (* return locked but not yet proxied client interface! *)
            ({
               playersJoined        = locked "playersJoined" playersJoined,
               tournamentStarted    = locked "tournamentStarted" tournamentStarted,
               levelStarted         = locked "levelStarted" levelStarted,
               playerDisconnected   = locked "playerDisconnected" playerDisconnected,
               abort                = locked "abort" abort,
               countdown            = locked "countdown" countdown,
               update               = locked "update" update,
	       headPosition         = locked "headPosition" headPosition,
               tick                 = locked "tick" tick,
               playersDied          = locked "playersDied" playersDied,
               playersFinished      = locked "playersFinished" playersFinished,
               levelFinished        = locked "levelFinished" levelFinished,
               tournamentFinished   = locked "tournamentFinished" tournamentFinished,
               updatePoints         = locked "updatePoints"  updatePoints
            },
            {   play                = play,
                watch               = watch,
                disconnect          = disconnect
            })
        end
       
end
