import structure Protocol   from "../common/Protocol"
import structure Gui        from "Gui"
import signature CLIENT     from "CLIENT-sig"


structure Client :> CLIENT =
struct
    (* [startClient (gui, server)] starts the core client given a server,
       which can be a future
     *)
    fun startClient (gui_join, server : Protocol.server_interface) : 
            Protocol.client_interface * Gui.model_join =
        let
            fun playersJoined players = ()
            
            fun tournamentStarted () = ()

            fun levelStarted level_info = ()

            fun playerDisconnected (name, color) = ()

            fun abort () = ()

            fun countdown n = ()

            fun update diffs = ()

            fun tick remainingTime = ()
            
            fun playersDied players = ()

            fun playersFinished players = ()

            fun levelFinished () = ()

            fun tournamentFinished highscore = ()

            fun updatePoints points = ()

            (* ------------ gui callbacks --------- *)
            (* user turns snake, gives up...        *)
            
            fun play (name, color) =
                SND "not yet implemented"

            fun watch () =
                SND "not yet implemented"

            val lock = Lock.lock ()
        in
            (* return locked but not yet proxied client interface! *)
            ({
               playersJoined        = Lock.sync lock playersJoined,
               tournamentStarted    = Lock.sync lock tournamentStarted,
               levelStarted         = Lock.sync lock levelStarted,
               playerDisconnected   = Lock.sync lock playerDisconnected,
               abort                = Lock.sync lock abort,
               countdown            = Lock.sync lock countdown,
               update               = Lock.sync lock update,
               tick                 = Lock.sync lock tick,
               playersDied          = Lock.sync lock playersDied,
               playersFinished      = Lock.sync lock playersFinished,
               levelFinished        = Lock.sync lock levelFinished,
               tournamentFinished   = Lock.sync lock tournamentFinished,
               updatePoints         = Lock.sync lock updatePoints
            },
            {   play                = play,
                watch               = watch
            })
        end
       
end
