(* Alice Snake 2.0 - ClientMain
*
*  Authors: Benedikt Grundmann / Sebastian Germesin
*
*  $Revision$
*
*  Last updated: $Date$ by $Author$
* 
*
*)

import structure Gui        from "Gui"
import structure Client     from "Client"
import structure Protocol   from "../common/Protocol"
import structure Server     from "../server/Server"
import structure Config     from "../common/Config"
import structure Ctrl       from "x-alice:/lib/utility/Ctrl"
import structure Remote     from "x-alice:/lib/distribution/Remote"

open Ctrl

fun proxyClient (c : Protocol.client_interface) : Protocol.client_interface =
    {
        playersJoined       = Remote.proxy $ #playersJoined c,
        tournamentStarted   = Remote.proxy $ #tournamentStarted c,
        levelStarted        = Remote.proxy $ #levelStarted c,
        playerDisconnected  = Remote.proxy $ #playerDisconnected c,
        abort               = Remote.proxy $ #abort c,
        countdown           = Remote.proxy $ #countdown c,
        tick                = Remote.proxy $ #tick c,
        playersDied         = Remote.proxy $ #playersDied c,
        playersFinished     = Remote.proxy $ #playersFinished c,
        levelFinished       = Remote.proxy $ #levelFinished c,
        tournamentFinished  = Remote.proxy $ #tournamentFinished c
    }

fun main () =
    let
        (* gui callbacks *)
        val gui_promise = Promise.promise () : Gui.gui Promise.promise
        val gui         = Promise.future gui_promise

        (* called when user wants to quit *)
        fun quit () = OS.Process.exit OS.Process.success

        (* called when user wants to connect to some existing server *) 
        fun connect ticket : (Gui.model_join * Gui.gui_join Promise.promise, string) alt = 
            let
                val gui_join_p  = Promise.promise () : Gui.gui_join Promise.promise
                val gui_join    = Promise.future gui_join_p
                 (* make physical connection --> take the ticket *)
                val package     = Remote.take ticket
                (* unpack it.  Dynamic type check!
                   may fail with Package.Mismatch exception
                 *)
                structure Conn  = unpack package : Protocol.SERVER_CONNECTOR

                val serverP     = Promise.promise ()
                
                (* start the actual client logic. returns
                   more or less immediatly *) 
                val (client, 
                    model_join) = Client.startClient (gui, gui_join, 
                                            Promise.future serverP) 
                (* register ourselves at the server *)
                val (config, 
                    server)     = Conn.connect (proxyClient client)  
            in
                Promise.fulfill (serverP, server);
                FST (model_join, gui_join_p)
            end handle Protocol.Protocol msg =>
                (* highlevel snake game specific logical error *)
                SND msg
            |   Remote.Proxy Remote.Ticket =>
                (* Server has been terminated! *)
                SND ("Ticket no longer valid.  Server has been terminated.")
            |   Remote.Proxy _ =>
                (* lowlevel error. *)
                SND (exnName e)
            |   IO.Io { name, function, cause } =>
                (* lowlevel error at Remote.take *)
                SND ("IO error " ^ name ^ " at " ^ function ^ " cause: " ^
                        exnName cause) 
            |   Remote.Ticket      =>
                (* take failed! *)
                SND ("Invalid ticket!  Make sure that you entered the ticket correctly and that the server is still running.")
            |   Package.Mismatch _ =>
                (* unpack failed! *)
                SND ("Ticket invalid!  Most probably from a different alice application.")

        (* called when user wants to create own server *)
        fun startServer (player, config : Config.config) = 
            let
                val gui_join_p  = Promise.promise () : Gui.gui_join Promise.promise
                val gui_join    = Promise.future gui_join_p
              (* both creation of client and creation of server
                   depends on each other, but Client.startClient
                   is required to not use server before it has
                   returned, i.e only in threads it spawns or closures
                   it returns, likewise with gui_join
                 *)
                val server                  = Promise.promise () 
                val (client, model_join)    = Client.startClient (gui, gui_join, 
                                                Promise.future server)
                fun disconnect () =
                    (* TODO: implement *)
                    #disconnect model_join ()

                fun startGame res () = 
                    let
                        val server = Promise.future server 
                        
                        (* this always holds for servers returned by 
                           Server.startServer *)
                        val _ = assert isSome (#startGame server)
                    in
                        (* rpc call. TODO: error handling *)
                        valOf (#startGame server) ();
                        res
                    end

                val (ticket, server')   = Server.startServer (client, config)
            in
                (* TODO: error handling *)
                Promise.fulfill (server, server');

                (* creation was successful return model and gui promise *)
                case player of
                    NONE        =>  
                        (* server does not want to play himself *)
                        (* put him into spectator mode *)
                    let val res = #watch model_join () in
                        FST ({ start = startGame res, disconnect}, 
                                gui_join_p, ticket)
                    end
                |   SOME p      =>
                        (* server wants to play ;-) *)
                    let val res = #play model_join p in
                        FST ({ start = startGame res, disconnect}, 
                                gui_join_p, ticket)
                    end
            end
        val model_initial   = { connect, startServer } : Gui.model_initial
    in
        Gui.execute (model_initial, gui_promise)
    end

(* start it *)
val _ = main ()
