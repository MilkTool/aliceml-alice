import signature GUI2       from "GUI2-sig"

structure GUI2 :> GUI2 =
struct

    datatype error = 
        ERROR of string
     |  CONN_ERROR of string

    exception Error of string

    type callbacks = {
        (* called initially *)
        startServer :   (string * Color.color) option * Config.config -> 
		                                           (string, error) alt,
        connect :       string -> error option,

        (* called during the join phase *)
        play :          string * Color.color -> error option,
        watch :         unit -> error option

        (* called during a running game *)
        turn :          Protocol.direction -> error option,
        changeView :    Protocol.view_hint -> error option,
        giveUp :        unit -> error option,

	(* called in wait phase of server *)
	start : unit -> error option,

        (* called anytime *)
        disconnect :    unit -> unit
    }


    datatype gui_state =
        INITIAL 
    |   CONNECT         of Connection.connection_widget
    |   SINGLE_SETTINGS
    |   PLAYER_SETTINGS of PlayerSettings.player_settings_widget
    |   SERVER_SETTINGS of ServerSettings.server_settings_widget
    |   WAIT            of Wait.wait_widget
    |   LEVEL_RUNNING

    type gui = {
        mainWindow :    mainwindow_type,
        callbacks :     callbacks
        state :         gui_state ref
    }

    fun start callbacks =
        let
            val state   = ref INITIAL
            val mainw   = Main.mkMainWindow (startClientCB (state, callbacks), 
					     startServerCB (state, callbacks),
					     startSingleCB (state, callbacks),
					     turnCB (state, callbacks),
					     changeViewCB (state, callbacks),
					     giveUpCB (state, callbacks),
					     quitCB)
        in
            { mainWindow = mainw, callbacks, state }
        end

(* -------------------------------- *)
    (* menuItem `start client' pressed . displays connection window*)
    and startClientCB (state, callbacks) mainWindow =
        (case state of 
	    INITIAL => state := CONNECT (Connection.mkConnectionWindow 
					 (Main.getWindow mainWindow, 
					  connectCB        state,
					  cancelConnectCB (state, mainWindow, 
							   callbacks)))
	  |     _   => assert false)

    (* menuItem `start server' pressed *)
    and startServerCB (state, callbacks) mainWindow = 
        (case state of
	    INITIAL => 
	       state := SERVER_SETTINGS (ServerSettings.mkServerSettingsWindow 
					 (Main.getWindow mainWindow,
					  readySSettingsCB  (state, mainWindow,
							     callbacks),
					  cancelSSettingsCB state))
	  |   _     => assert false)

    (* menuItem 'start singleplayer' pressed *)
    and startSingleCB (state, callbacks) mainWindow =
	(case state of
	     INITIAL => state := SINGLE_SETTINGS (EnterName.mkEnterName
				    (Main.getWindow mainWindow,
				     readySingleCB (state, mainWindow,
						    callbacks),
				     cancelSingleCB state))
	   |    _    => assert false)

    and turnCB (state, callbacks) d = 
	(case state of 
	     LEVEL_RUNNING => (case #turn callbacks d of
				   NONE                  => NONE
				 | SOME (CONN_ERROR msg) => SOME msg
				 | SOME (ERROR msg)      => SOME msg)
	   |       _       => assert false)

    and changeViewCB (state, callbacks) vh = 
	(case state of
	     LEVEL_RUNNING => (case #changeView callbacks vh of
				   NONE                  => NONE
				 | SOME (CONN_ERROR msg) => SOME msg
				 | SOME (ERROR msg)      => SOME msg)
	   |       _       => assert false)

    (* menuItem `quit' pressed *)
    and quitCB () = OS.Process.exit OS.Process.success

    (* menuItem 'giveUp' pressed, mainWindow is already set in start mode... *)
    and giveUpCB (state, callbacks) mainWindow = 
	(case state of
	     LEVEL_RUNNING => (state := INITIAL;
			       case #disconnect callbacks () of
				   NONE                  => NONE
				 | SOME (CONN_ERROR msg) => SOME msg
				 | SOME (ERROR msg)      => SOME msg)
	   |        _      => assert false)


(* -------------------------------- *)
    (* this function is called by the ConnectionWindow.  If an
       error occurs when connecting this function should return
       SOME msg, this msg is then displayed by the window and
       the user is given the possibility to retry entering the
       ticket and connecting *)
    and connectCB (state, mainWindow, callbacks : callbacks) ticket =
        case state of
            CONNECT _ => 
            (case #connect callbacks ticket of
                NONE    =>  (* connection was successful  *)
                ( (* display player settings window *)
                state := PLAYER_SETTINGS (PlayerSettings.mkPlayerSettings 
					    (Main.getWindow mainWindow,
					     cancelPSettingsCB (state, 
								callbacks),
					     readyPSettingsCB  (state, 
								mainWindow, 
								callbacks)));
                (* inform the connectionWindow that everything went well,
                   the window will close itself in this case *)
                NONE)
            (* if an error occurs inform the connectionWindow,
               so that it displays that message and stays visible and active *)
            |   SOME (CONN_ERROR msg) => SOME msg
            |   SOME (ERROR msg)      => SOME msg)

        |   _           => assert false 

    (* this function is called by the ConnectionWindow. The connectionWindow.
       should have already closed itself before calling this function. *)
    and cancelConnectCB state =
        case state of
            CONNECT _   => state := INITIAL
        |   _           => assert false

(* -------------------------------- *)
    (* before calling this procedure the ServerSettingsWindow should 
       have been closed. It starts the server by differentiating Spectator
       and Player. *)
    and readySSettingsCB (state, mainWindow, callbacks) (player, config) = 
	(case state of 
	  SERVER_SETTINGS s => 
	      (case #startServer callbacks (player, config) of
		   FST ticket => 
		       (state := WAIT (Wait.mkWaitWindow 
				       (Main.getWindow mainWindow,
					ServerSettings.alreadyConnected s,
					readyWaitCB (), cancelWaitCB (),
					ticket); NONE)
		 | SND (CONN_ERROR msg) => (state := INITIAL; SOME msg)
		 | SND (ERROR msg)      => (state := INITIAL; SOME msg))
		 |            _        => assert false))


    (* the ServerSettingsWindow should have been closed before calling 
       this procedure *)
    and cancelSSettingsCB state =
	case state of 
	    SERVER_SETTINGS _ => state := INITIAL
	|            _        => assert false

(* -------------------------------- *)
    (* is called by the PlayerSettingsWindow. The highlighting stuff will be
       done by the window. The window also acts as a waiting window, but the
       state keeps PLAYER_SETTINGS.
       if something went wrong SOME msg will be returned. In that case, the
       message will be displayed and the PlayerSettingsWindow is closed. *)
    and readyPSettingsCB (state, mainWindow, callbacks) NONE =
	(case state of
	    PLAYER_SETTINGS _ => 
		(case #watch callbacks () of
		     NONE                  => NONE
		   | SOME (CONN_ERROR msg) => (state := INITIAL;
					       SOME msg)
		   | SOME (ERROR msg)      => (state := INITIAL;
					       SOME msg))
           |           _      => assert false)
      | readyPSettingsCB (state, mainWindow, callbacks) player = 
	     (case state of
		  PLAYER_SETTINGS _ => 
		      (case #play callbacks player of
			   NONE                  => NONE
			 | SOME (CONN_ERROR msg) => (state := INITIAL;
						     SOME msg)
			 | SOME (ERROR msg)      => (state := INITIAL;
						     SOME msg))
		|           _       => assert false)
		  
    (* this function is called by the PlayerSettingsWindow. It should also have
       already closed itself before callinng cancelPSettingsCB *)
    and cancelPSettingsCB (state, callbacks) = 
	(case state of 
	    PLAYER_SETTINGS _ => (#disconnect callbacks (); state := INITIAL)
	  |            _      => assert false)

(* -------------------------------- *)

    (* if the return value of this procedure is NONE, the EnterNameWindow
       will be closed and everything's ok. Otherwise the error message
       will be displayed and the EnterNameWindow NOT destroyed *)
    and readySingleCB (state, mainWindow, callbacks) settings =
	(case state of 
	     SINGLE_SETTINGS => (case #startServer callbacks settings of
				     FST _             => 
					 (case #start callbacks () of
					      NONE                 => NONE
					   | SOME (CONN_ERROR msg) => SOME msg
					   | SOME (ERROR msg)      => SOME msg)
	                           | SND (CONN_ERROR msg) => SOME msg
				   | SND (ERROR msg)      => SOME msg)
	   |      _           => assert false) 

    (* called after closing the EnterNameWindow *)
    and cancelSingleCB state = 
	(case state of
	    SINGLE_SETTINGS => state := INITIAL
	  |      _          => assert false)

(* -------------------------------- *)
    (* this is called from the WaitWindow, after it's closing *)
    and readyWaitCB (state, mainWindow, callbacks) () =
	(case state of 
	    WAIT _ => (case #start callbacks () of
			   NONE                  => NONE
			 | SOME (CONN_ERROR msg) => (state := INITIAL; 
						     SOME msg) 
			 | SOME (ERROR msg)      => (state := INITIAL;
						     SOME msg))
	  |   _    => assert false)

    (* cancelWaitCB is called after the termination of WaitWindow *)
    and cancelWaitCB (state, callbacks) =
	(case state of 
	    WAIT _ => (#disconnect callbacks (); state := INITIAL)
	  |   _    => assert false)
	

(* -------------------------------- *)
(* -------------------------------- *)


    fun playersJoined (gui: gui, players) =
	(case !(#state gui) of
	    PLAYER_SETTINGS p =>
		PlayerSettings.playersJoined (p, players)
	  |   WAIT w          => 
		Wait.playersJoined (w, players)
	  |   _ => raise Error "Error, while sending playersJoined signal")

    fun playerDisconnected (gui: gui, name, color) = 
	(case !(#state gui) of
	    PLAYER_SETTINGS win =>
		PlayerSettings.playerDisconnected (win, name, color)
	  | WAIT w              => 
		Wait.playerDisconnected (w, name, color)
	  |  _ => raise Error "Error while sending playerDisconnected signal")


    fun gameStarted (gui : gui) =
	(case !(#state gui) of
	    PLAYER_SETTINGS p => ((#state gui) := LEVEL_RUNNING;
				  PlayerSettings.gameStarted p;
				  Main.gameMode (#mainWindow gui))
	  | WAIT win          => ((#state gui) := LEVEL_RUNNING;
				  Wait.gameStarted win;
				  Main.gameMode (#mainWindow gui))
	  | SINGLE_SETTINGS   => ((#state gui) := LEVEL_RUNNING;
				  Main.gameMode (#mainWindow gui))
	  |  _ => raise Error "Error, while sending gameStarted signal")

    fun levelStart (gui : gui, levelInf) = 
	(case !(#state gui) of
	    LEVEL_RUNNING      => Main.levelStart (#mainWindow gui, levelInf)
	  |  _ => raise Error "Error, while sending levelStart signal")
	
    fun levelTick (gui : gui, points, diffs, pos, time) = 
	(case !(#state gui) of
	    LEVEL_RUNNING => Main.levelTick (#mainWindow gui,
					points, diffs, pos, time)
	  |  _ => raise Error "Error, while sending tick signal")

    fun levelCountdown (gui : gui, n) =
	(case !(#state gui) of
	    LEVEL_RUNNING => Main.levelCountDown (#mainWindow gui, n)
	  |  _ => raise Error "Error, while sending levelCountdown signal")


    fun gameFinished (gui : gui, score) = 
	(case !(#state gui) of
	    LEVEL_RUNNING => ((#state gui) := INITIAL;
			      Main.gameFinished (#mainWindow gui,
						 score))
	  |  _ => raise Error "Error, while sending gameFinished signal")


end    









