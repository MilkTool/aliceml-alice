(* Alice Snake 2.0 - PlayerSettingsWindow
*
*  Authors: Benedikt Grundmann / Sebastian Germesin
*
*  $Revision$
*
*  Last updated: $Date$ by $Author$
* 
*
*)

import structure Gtk        from "GtkSupport"
import structure Gdk        from "GtkSupport"

import structure Color      from "../../common/Color"



structure PlayerSettings =
struct

    val colormap = Gdk.colormapGetSystem ()

    (* converts a Color.color into a Gdk.color *)
    fun colorToGdkColor c =
	let
	    val (r, g, b) = Color.rgb c
	    fun conv n = Real.round (65535.0 * n)
	    val color = Gdk.colorNew (conv r, conv g, conv b)
	in
	    Gdk.colormapAllocColor (colormap, color, false, true);
	    color
	end


    (* builds the player settings window *)
    fun mkPlayerSettings ({watch, play, disconnect}, guiJoin, 
			  {reset, gameMode}) =
	let

	    val playerSettings  = Gtk.windowNew Gtk.WINDOW_TOPLEVEL
  	    val playerText      = Gtk.createTextWidget ()
	    val playerScrolledWindow = 
		Gtk.scrolledWindowNew (Gtk.null, Gtk.null)
 	    val colorCombo      = Gtk.comboNew ()
	    val settingsVBox 	= Gtk.vboxNew (false, 0)
	    val nameLabel 	= Gtk.labelNew "Name : "
	    val nameText	= Gtk.entryNew ()
	    val nameHBox	= Gtk.hboxNew (false, 0)
	    val separator1	= Gtk.hseparatorNew ()
	    val colorLabel 	= Gtk.labelNew "Color : "
	    val colorHBox	= Gtk.hboxNew (false, 5)
	    val separator2	= Gtk.hseparatorNew ()
	    val spectatorCheckButton = 
		Gtk.checkButtonNewWithLabel "Spectator Mode"
	    val separator3	= Gtk.hseparatorNew ()
	    val connectedLabel 	= Gtk.labelNew "Connected Players: "
	    val separator4	= Gtk.hseparatorNew ()
	    val readyButton    	= Gtk.buttonNewWithLabel "Ready "
	    val cancelButton    = Gtk.buttonNewWithLabel "Cancel"

	    val buttonHBox	= Gtk.hboxNew (true, 10)

	    (* contains a fututre unless the 'ready' button has been pushed.
	       after that it is fulfilled with (Gui.game_model, Gui.game_gui *)
	    val state = Promise.promise ()

	    (* an alterable list which contains all colors that are
	     still selectabel *)
	    val allColors = ref (List.map Color.toString Color.all)

	    (* inserts all colors into the color combo *)
	    fun insertColors colors = 
		Gtk.comboSetPopdownStrings (colorCombo, colors)

	    fun removeColor col =
		let
		    val c = Color.toString col
		    val colors = !allColors
		    fun removeColor' () = List.filter (fn x => x <> c) colors
		    val spareColors = removeColor' ()
		in
		    allColors := spareColors;
		    Gtk.comboSetPopdownStrings (colorCombo, spareColors)
		end

	    fun insertColor col = 
		let
		    val colors = (Color.toString col) :: (!allColors)
		in
		    allColors := colors;
		    Gtk.comboSetPopdownStrings (colorCombo, colors)
		end

	    val colorlock = Lock.lock ()

	    val removeColor = Lock.sync colorlock removeColor

	    val insertColor = Lock.sync colorlock insertColor
		
	    (* inserts a player with his color in the playerText widget *)
	    fun insertPlayer (name, color) = 
		let
		    val text = name ^ " has connected!\n"
		    val color = colorToGdkColor color
		in
		    Gtk.textWidgetInsert (playerText, text, color)
		end


	    (* inserts 'name has disconnected' with it's color in playerText *)
	    fun removePlayer (name, color) = 
		let
		    val text  = name ^ " has disconnected!\n"
		    val color = colorToGdkColor color
		in
		    Gtk.textWidgetInsert (playerText, text, color)
		end

	    (* if client has pushed the reday-button yet, everything is ok and
	       the game starts normally. if he has not, it will abort 
	       by returning to MainWindow and showing an error message *)
	    fun gameStarted () = 
		if Future.isFuture (Promise.future state)
		    then (Gtk.widgetDestroy playerSettings;
			  reset (SOME ("ERROR", 
				       "Sorry, game already started")))
		else let
			 val (mGame, guiGame) = Promise.future state
		     in
			 Gtk.widgetDestroy playerSettings;
			 gameMode({disconnect}, mGame, guiGame)
		     end

	    (* call playersJoined when some players has joined the game *)
	    fun playersJoined xs = 
		List.app (fn (n, c) => (insertPlayer(n, c);
					removeColor c)) xs

	    (* call playerDisconnected when one player has disconnected *)
	    fun playerDisconnected p = 
		(fn (n, c) => (removePlayer (n, c);
			       insertColor c)) p

	    (* fulfilling the Gui.gui_join *)
	    val _ = Promise.fulfill (guiJoin, 
				     {playersJoined,
				      playerDisconnected,
				      gameStarted})

	    (* the mainQuit procedure. disconnects the client from the game
	       and returns to the main window *)
	    fun mainQuit () = 
		(disconnect ();
		 Gtk.widgetDestroy playerSettings;
		 reset NONE)


	    (* called, if the client has changed the nameText widget.
	       if nameText = "" -> you can't press the ready-button,
	       else the ready-button is set sensitive *)
	    fun changedNameText () =
		if Gtk.entryGetText nameText = ""
		    then Gtk.widgetSetSensitive (readyButton, false)
		else Gtk.widgetSetSensitive (readyButton, true)

	    (* handles what happens, if the spectator Button has
	       been pressed *)
	    fun pressedSpectatorButton (spectator, nameBox, colorBox) =
		if Gtk.toggleButtonGetActive spectator
		    then
			(Gtk.widgetSetSensitive (nameBox, false);
			 Gtk.widgetSetSensitive (colorBox, false);
			 Gtk.widgetSetSensitive (readyButton, true))
		else
		    (Gtk.widgetSetSensitive (nameBox, true);
		     Gtk.widgetSetSensitive (colorBox, true);
		     if Gtk.entryGetText nameText = ""
			 then Gtk.widgetSetSensitive (readyButton, false)
		     else ())


	    (* handles what happens if the ready-button has clicked.
	     play (name, color) will be called and if it returns
	     FST game -> fulfilling the state and forbid to press
	                 the button again
	     SND errorMsg -> return to main window by showing error message *)
	    fun okClickedCB spectator = 
		let
		    fun return () = 
			if Gtk.toggleButtonGetActive spectator
			    then watch ()
			else
			    let
				val name  = Gtk.entryGetText nameText
				val color = Color.fromString (
				    Gtk.entryGetText 
				    (Gtk.comboGetFieldEntry colorCombo))
			    in 
				play (name, color)
			    end
                    
		in
		    case return () of 
			FST game     => 
			    (Gtk.buttonSetLabel (cancelButton, "Disconnect");
			     Gtk.widgetSetSensitive (readyButton, false);
			     Gtk.widgetSetSensitive (nameHBox, false);
			     Gtk.widgetSetSensitive (colorHBox, false);
			     Gtk.widgetSetSensitive (spectatorCheckButton, 
						     false);
			     Promise.fulfill (state, game))
		      | SND errorMsg => 
			    (reset (SOME ("ERROR!!", errorMsg));
			     Gtk.widgetDestroy playerSettings)
		end

	in

	    (* inserts all available colors into the color combo *)
	    insertColors (!allColors);
	    Gtk.windowSetModal (playerSettings, true);
	    Gtk.windowSetTitle (playerSettings, "Player Settings");
	    Gtk.windowSetPosition (playerSettings, Gtk.WIN_POS_CENTER);
	    
	    Gtk.signalConnect (playerSettings,
			       "delete-event", 
			       fn _ => mainQuit ());
	    Gtk.signalConnect (spectatorCheckButton, 
			       "clicked", 
			       fn _ => 
			       pressedSpectatorButton (spectatorCheckButton, 
						       nameHBox, 
						       colorHBox));
	    Gtk.signalConnect (nameText, 
			       "changed",
			       fn _ => changedNameText ());
	    Gtk.signalConnect (readyButton, 
			       "clicked", 
			       fn _ => okClickedCB spectatorCheckButton);
	    Gtk.signalConnect (cancelButton, 
			       "clicked",
			       fn _ => mainQuit ());
	    
	    (* setting some useful values *)
	    Gtk.containerSetBorderWidth (playerSettings, 10);
	    Gtk.miscSetAlignment (connectedLabel, 0.0, 0.5);
	    Gtk.entrySetEditable (Gtk.comboGetFieldEntry colorCombo, 
				  false);
	    Gtk.windowSetDefaultSize(playerSettings, 300, 400);
	    Gtk.scrolledWindowSetPolicy (playerScrolledWindow, 
					 Gtk.POLICY_NEVER, 
					 Gtk.POLICY_ALWAYS);
	    Gtk.entrySetMaxLength (nameText, 11);
	    Gtk.widgetSetSensitive (readyButton, false);

	    (* packing everything in boxes and later in playerSettings *)
	    Gtk.boxPackStart (nameHBox, nameLabel, false, false, 0);
	    Gtk.boxPackStart (nameHBox, nameText, true, false, 0);

	    Gtk.boxPackStart (colorHBox, colorLabel, false, false, 0);
	    Gtk.boxPackStart (colorHBox, colorCombo, true, false, 0);

	    Gtk.boxPackStart (buttonHBox, readyButton, true, true, 5);
	    Gtk.boxPackStart (buttonHBox, cancelButton, true, true, 5);

	    Gtk.boxPackStart (settingsVBox, nameHBox, false, false, 2);
	    Gtk.boxPackStart (settingsVBox, separator1, false, false, 2);
	    Gtk.boxPackStart (settingsVBox, colorHBox, false, false, 2);
	    Gtk.boxPackStart (settingsVBox, separator2, false, false, 5);
	    Gtk.boxPackStart (settingsVBox, spectatorCheckButton, false, 
			      false, 5);
	    Gtk.boxPackStart (settingsVBox, separator3, false, false, 5);
	    Gtk.boxPackStart (settingsVBox, connectedLabel, false, false, 0);
	    Gtk.boxPackStart (settingsVBox, playerScrolledWindow, 
			      true, true, 0);
	    Gtk.boxPackStart (settingsVBox, separator4, false, false, 5);
	    Gtk.boxPackStart (settingsVBox, buttonHBox, false, false, 5);
	    
	    Gtk.containerAdd (playerScrolledWindow, playerText);
	    Gtk.containerAdd (playerSettings, settingsVBox);

	    Gtk.widgetShowAll playerSettings

	end
end
