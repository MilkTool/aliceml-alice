import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"
import structure GtkCanvas from "x-alice:/lib/gtk/GtkCanvas"

structure QuestionWindow =
struct

    val ans = Promise.promise ()

    datatype answer = YES | NO | CANCEL
	
    fun mkQuestionBox (title, quest) =
	let

	    val sure_window = Gtk.dialogNew ()
	    val button1	    = Gtk.buttonNewWithLabel "Yes"
	    val button2	    = Gtk.buttonNewWithLabel "No "
		
	    fun question q = 
		let
		    val label1 = Gtk.labelNew q
		in
		    Gtk.boxPackStart (Gtk.dialogGetFieldVbox sure_window,
				      label1, 
				      true, 
				      true, 
				      10)
		end

	    fun mainQuit answer = (Promise.fulfill(ans, answer);
				   Gtk.widgetDestroy sure_window)

	in

	    question quest;
	    Gtk.windowSetModal ((Gtk.dialogGetFieldWindow sure_window), true);
	    Gtk.containerSetBorderWidth (Gtk.dialogGetFieldWindow sure_window,
					 10);
	    Gtk.windowSetTitle (Gtk.dialogGetFieldWindow sure_window, title);
	    Gtk.windowSetPosition (Gtk.dialogGetFieldWindow sure_window,
				   Gtk.WIN_POS_CENTER);
	    
	    Gtk.signalConnect (Gtk.dialogGetFieldWindow sure_window, 
			       "delete-event",
			       fn _ => mainQuit CANCEL);
	    Gtk.signalConnect (button1, "clicked", 
			       fn _ => mainQuit YES);
	    Gtk.signalConnect (button2, "clicked", 
			       fn _ => mainQuit NO);
	    
	    Gtk.boxPackStart (Gtk.dialogGetFieldActionArea sure_window,
			      button1, true, true, 5);
	    Gtk.boxPackStart (Gtk.dialogGetFieldActionArea sure_window,
			      button2, true, true, 5);
	    
	    Gtk.widgetShowAll sure_window;
	    Promise.future ans
	end

end