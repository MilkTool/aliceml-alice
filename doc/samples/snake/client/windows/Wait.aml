(* Alice Snake 2.0 - WaitWindow
*
*  Authors: Benedikt Grundmann / Sebastian Germesin
*
*  $Revision$
*
*  Last updated: $Date$ by $Author$
* 
*
*)

import structure Gtk        from "x-alice:/lib/gtk/Gtk"
import structure Gdk        from "x-alice:/lib/gtk/Gdk"

import structure Ctrl       from "x-alice:/lib/utility/Ctrl"

import structure Color      from "../../common/Color"


import val log              from "../../common/Log"

open Ctrl


structure Wait =
struct

    (* converts a Color.color into a Gdk.color *)
    fun colorToGdkColor c =
	let
	    val (r, g, b) = Color.rgb c
	    fun conv n = Real.round (65535.0 * n)
	in
	    Gdk.allocColor (conv r, conv g, conv b)
	end

    (* builds the waiting window *)
    fun mkWaitingWindow (alreadyConnected, {start, disconnect}, 
			 guiJoin, serverUrlStr, {reset, gameMode}) =
	let
	    val waiting          = Gtk.windowNew Gtk.WINDOW_TOPLEVEL
	    val dialogVBox       = Gtk.vboxNew (false, 0)
	    val connectedLabel   = Gtk.labelNew "Connected Players : "
	    val separator1       = Gtk.hseparatorNew ()
	    val separator2       = Gtk.hseparatorNew ()
	    val disconnectButton = Gtk.buttonNewWithLabel "Disconnect"
	    val startButton      = Gtk.buttonNewWithLabel "Start"
	    val buttonHBox       = Gtk.hbuttonBoxNew ()
	    val urlHBox          = Gtk.hboxNew (false, 10)
	    val urlLabel         = Gtk.labelNew "Server-URL: "
	    val serverUrl        = Gtk.entryNew ()

	    (* the textwindow where the connected player will be listed *)
	    val playerTextAdjust1 = 
		Gtk.adjustmentNew (50.0, 0.0, 100.0, 1.0, 1.0, 1.0)
	    val playerTextAdjust2 =
		Gtk.adjustmentNew (50.0, 0.0, 100.0, 1.0, 1.0, 1.0)
	    val playerTextAdjust3 = 
		Gtk.adjustmentNew (50.0, 0.0, 100.0, 1.0, 1.0, 1.0)
	    val playerTextAdjust4 =
		Gtk.adjustmentNew (50.0, 0.0, 100.0, 1.0, 1.0, 1.0)
	    val playerText        = 
		Gtk.textNew (playerTextAdjust1, playerTextAdjust2)
	    val playerWindow      = 
		Gtk.scrolledWindowNew (playerTextAdjust3, playerTextAdjust4)

	    (* [insert(name, color)] inserts one player with name and color in
	     connected-players list *)
	    fun insert (name, color) = 
		let
		    val font = 
			Gdk.fontLoad ("-*-times-bold-*-*-*-15-*-*-*-*-*-*-*")
		    val white = Gdk.allocColor (65535, 65535, 65535)
		    val front = colorToGdkColor color
		in
		    Gtk.textInsert(playerText, font, front,
				   white, name ^ "\n", ~1)
		end

	    fun removePlayer (name, color) =
		let
		    val font = 
			Gdk.fontLoad ("-*-times-bold-*-*-*-15-*-*-*-*-*-*-*")
		    val white = Gdk.allocColor (65535, 65535, 65535)
		    val color = colorToGdkColor color
		in
		    Gtk.textInsert(playerText, font, color, 
				   white, 
				   name ^
				   " has disconnected" ^
				   "\n", ~1)
		end
		
	    (* the mainQuit procedure resets also the used refs *)
	    fun mainQuit () = 
		(disconnect ();
		 Gtk.widgetDestroy waiting;
		 reset NONE)
		
		
	    (* inserts all connected players into text widget *)
	    val playersJoined = List.app insert
		
	    (* removes one player from text widget *)
	    val playerDisconnected = removePlayer
		
	    fun gameStarted () = ()
	    (* cause in server mode this signal never appears *)
		
		
	    (* fulfills the guiJoin promise, if already fulfilled
               exception assert will be raised *)
	    val _ = if (Future.isFuture $ Promise.future guiJoin)
			then Promise.fulfill (guiJoin, {playersJoined,
							playerDisconnected,
							gameStarted})
		    else ()
			
	    (* the signal the server gives to start the game,
	     also resets the refs and destroyes the window *)
	    fun start' () = 
		(Gtk.widgetDestroy waiting;
		 case start () of
		     FST (mGame, guiGame) => 
			 gameMode ({disconnect}, mGame, guiGame)
		   | SND   errorMsg       =>
			 reset (SOME ("ERROR!!", errorMsg)))
		
	in
		    
	    playersJoined alreadyConnected;
	    Gtk.windowSetModal (waiting, true);
	    Gtk.windowSetTitle (waiting, "Waiting...");
	    Gtk.windowSetPosition (waiting, Gtk.WIN_POS_CENTER);
	    
	    (* connects the signals with procedures *)
	    Gtk.signalConnect (waiting, "delete-event", 
			       fn _ => mainQuit ());
	    Gtk.signalConnect (startButton, "clicked",
			       fn _ => start' ());
	    Gtk.signalConnect (disconnectButton, "clicked", 
			       fn _ => mainQuit ());
	    
	    (* set some default configurations *)
	    Gtk.entryPrependText (serverUrl, serverUrlStr);
	    Gtk.containerSetBorderWidth (waiting, 10);
	    Gtk.miscSetAlignment (connectedLabel, 0.0, 0.5);
	    Gtk.entrySetEditable (serverUrl, false);
	    Gtk.windowSetDefaultSize(waiting, 300, 400);
	    Gtk.scrolledWindowSetPolicy (playerWindow, 
					 Gtk.POLICY_NEVER, 
					 Gtk.POLICY_ALWAYS);
	    
	    (* pack everything in boxes *)
	    Gtk.boxPackStart (buttonHBox, startButton, true, true, 5);
	    Gtk.boxPackStart (buttonHBox, disconnectButton, 
			      true, true, 5);
	    
	    Gtk.boxPackStart (urlHBox, urlLabel, false, false, 5);
	    Gtk.boxPackStart (urlHBox, serverUrl, true, true, 5);
	    
	    Gtk.scrolledWindowAddWithViewport (playerWindow, playerText);
	    
	    Gtk.boxPackStart (dialogVBox, urlHBox, false, false, 0);
	    Gtk.boxPackStart (dialogVBox, separator2, false, 
			      false, 5);
	    Gtk.boxPackStart (dialogVBox, connectedLabel, false, 
			      false, 5);
	    Gtk.boxPackStart (dialogVBox, playerWindow, true, 
			      true, 0);
	    Gtk.boxPackStart (dialogVBox, separator1, false, 
			      false, 5);
	    Gtk.boxPackStart (dialogVBox, buttonHBox, false, 
			      false, 5);
	    
	    (* pack everything in container and show it all *)
	    Gtk.containerAdd (waiting, dialogVBox);
	    Gtk.widgetShowAll waiting
	    
	end
    
end