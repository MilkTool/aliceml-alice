(* Alice Snake 2.0 - WaitWindow
*
*  Authors: Benedikt Grundmann / Sebastian Germesin
*
*  $Revision$
*
*  Last updated: $Date$ by $Author$
* 
*
*)

import structure Gtk        from "x-alice:/lib/gtk/Gtk"
import structure Gdk        from "x-alice:/lib/gtk/Gdk"
import structure GtkCanvas  from "x-alice:/lib/gtk/GtkCanvas"
import structure Ctrl       from "x-alice:/lib/utility/Ctrl"

import structure Color      from "../../common/Color"


import val log              from "../../common/Log"

open Ctrl


fun colorToGdkColor c =
    let
	val (r, g, b) = Color.rgb c
	fun conv n = Real.round (65535.0 * n)
    in
	Gdk.allocColor (conv r, conv g, conv b)
    end


structure Wait =
struct
    (* the textwindow where the connected player will be listed *)

    val playerTextAdjust1 = 
	ref (Gtk.adjustmentNew (50.0, 0.0, 100.0, 1.0, 1.0, 1.0))
    val playerTextAdjust2 =
	ref (Gtk.adjustmentNew (50.0, 0.0, 100.0, 1.0, 1.0, 1.0))
    val playerText = 
	ref (Gtk.textNew (!playerTextAdjust1, !playerTextAdjust2))

    (* resets the used refs *)
    fun resetRefs () = 
	(playerTextAdjust1 := 
	 (Gtk.adjustmentNew (50.0, 0.0, 100.0, 
			     1.0, 1.0, 1.0));
	 playerTextAdjust2 := 
	 (Gtk.adjustmentNew (50.0, 0.0, 100.0, 
			     1.0, 1.0, 1.0));
	 playerText := (Gtk.textNew (!playerTextAdjust1, 
				     !playerTextAdjust2)))


    (* [insert(name, color)] inserts one player with name and color in
     connected-players list *)
    fun insert (name, color) = 
	let
	    val font = 
		Gdk.fontLoad ("-*-arial-bold-*-*-*-*-*-*-*-*-*-*-*")
	    val white = Gdk.allocColor (0xffff, 0xffff, 0xffff)
	    val front = colorToGdkColor color
	in
	    Gtk.textInsert(!playerText, font, front,
			   white, name ^ "\n", ~1)
	end


    (* builds the waiting window *)
    fun mkWaitingWindow alternate = 
	case alternate of

	    (* client is in server mode *)
	    FST (alreadyConnected, {start, disconnect}, guiJoin, serverUrlStr,
		 {reset, gameMode}) =>
		let

		    val waiting          = Gtk.windowNew Gtk.WINDOW_TOPLEVEL
		    val dialogVBox       = Gtk.vboxNew (false, 0)
		    val connectedLabel   = Gtk.labelNew "Connected Players : "
		    val playerWindow     = 
			Gtk.scrolledWindowNew (!playerTextAdjust1,
					       !playerTextAdjust2)
		    val separator1       = Gtk.hseparatorNew ()
		    val separator2       = Gtk.hseparatorNew ()
		    val startButton      = Gtk.buttonNewWithLabel "Start"
		    val disconnectButton = Gtk.buttonNewWithLabel "Disconnect"
		    val buttonHBox       = Gtk.hbuttonBoxNew ()
		    val urlHBox          = Gtk.hboxNew (false, 10)
		    val urlLabel         = Gtk.labelNew "Server-URL: "
		    val serverUrl        = ref (Gtk.entryNew ())

		    (* the mainQuit procedure resets also the used refs *)
		    fun mainQuit () = 
			(disconnect ();
			 resetRefs ();
			 serverUrl := (Gtk.entryNew ());
			 Gtk.widgetDestroy waiting;
			 reset NONE)

		    (* inserts all connected players into text widget *)
		    fun playersJoined xs = List.app insert xs

			(* removes one player from text widget *)
		    fun playerDisconnected x = () (* TODO: implementation *)

		    fun gameStarted () = ()
			(* cause in server mode this signal never appears *)


			(* fulfills the guiJoin promise, if already fulfilled
			 exception assert will be raised *)
		    val _ = if (Future.isFuture $ Promise.future guiJoin)
				then Promise.fulfill (guiJoin, {playersJoined,
							  playerDisconnected,
							  gameStarted})
			    else ()

		      (* the signal the server gves to start the game,
		       also resets the refs and destroyes the window *)
		    fun start' () = 
			(resetRefs ();
			 serverUrl := (Gtk.entryNew ());
			 Gtk.widgetDestroy waiting;
			case start () of
			    FST (mGame, guiGame) => 
				gameMode ({disconnect}, mGame, guiGame)
		          | SND   errorMsg       =>
				reset (SOME ("ERROR!!", errorMsg)))
			
		in

		    playersJoined alreadyConnected;
		    Gtk.windowSetModal (waiting, true);
		    Gtk.windowSetTitle (waiting, "Waiting...");
		    Gtk.windowSetPosition (waiting, Gtk.WIN_POS_CENTER);

		    (* connects the signals with procedures *)
		    Gtk.signalConnect (waiting, "delete-event", 
				       fn _ => mainQuit ());
		    Gtk.signalConnect (startButton, "clicked",
				       fn _ => start' ());
		    Gtk.signalConnect (disconnectButton, "clicked", 
				       fn _ => mainQuit ());

		    (* set some default configurations *)
		    Gtk.entryPrependText (!serverUrl, serverUrlStr);
		    Gtk.containerSetBorderWidth (waiting, 10);
		    Gtk.miscSetAlignment (connectedLabel, 0.0, 0.5);
		    Gtk.entrySetEditable (!serverUrl, false);
		    Gtk.windowSetDefaultSize(waiting, 300, 400);
		    Gtk.scrolledWindowSetPolicy (playerWindow, 
						 Gtk.POLICY_NEVER, 
						 Gtk.POLICY_ALWAYS);
		    
		    (* pack everything in boxes *)
		    Gtk.boxPackStart (buttonHBox, startButton, true, true, 5);
		    Gtk.boxPackStart (buttonHBox, disconnectButton, 
				      true, true, 5);
		    Gtk.boxPackStart (urlHBox, urlLabel, false, false, 5);
		    Gtk.boxPackStart (urlHBox, !serverUrl, true, true, 5);
		    Gtk.boxPackStart (dialogVBox, urlHBox, false, false, 0);
		    Gtk.boxPackStart (dialogVBox, separator2, false, 
				      false, 5);
		    Gtk.boxPackStart (dialogVBox, playerWindow, true, 
				      true, 0);
		    Gtk.boxPackStart (dialogVBox, separator1, false, 
				      false, 5);
		    Gtk.boxPackStart (dialogVBox, buttonHBox, false, 
				      false, 5);

		    (* pack everything in container and show it all *)
		    Gtk.containerAdd (playerWindow, !playerText);
		    Gtk.containerAdd (waiting, dialogVBox);
		    Gtk.widgetShowAll waiting
		    
		end


	    (* client is in client mode *)
	  | SND (alreadyConnected, {disconnect}, mGame, guiGame, 
		 (joined, disconnected, started),
		 {reset, gameMode}) =>
		let

		    val waiting          = Gtk.windowNew Gtk.WINDOW_TOPLEVEL
		    val dialogVBox       = Gtk.vboxNew (false, 0)
		    val connectedLabel   = Gtk.labelNew "Connected Players : "
		    val playerWindow     = 
			Gtk.scrolledWindowNew (!playerTextAdjust1, 
					       !playerTextAdjust2)
		    val separator1       = Gtk.hseparatorNew ()
		    val separator2       = Gtk.hseparatorNew ()
		    val disconnectButton = Gtk.buttonNewWithLabel "Disconnect"
		    val buttonHBox       = Gtk.hboxNew (true, 10)

		    fun mainQuit () = 
			(disconnect ();
			 resetRefs ();
			 Gtk.widgetDestroy waiting;
			 reset NONE)


		    val _ = joined := (fn xs => List.app insert xs)

		    val _ = disconnected := 
			(fn x => ()) (* TODO: implementation *)

		    val _ = started := 
			(fn () => (resetRefs ();
				   Gtk.widgetDestroy waiting;
				   gameMode ({disconnect}, mGame, guiGame)))

		    fun playerDisconnects x = !disconnected x
		    fun gameStarts x = !started x
		    fun playersJoined x = !joined x
			(* they haven't to be fulfilled because they where
			 fulfilled in PlayerSettingsWindow *)



			
		in
	    
		    playersJoined alreadyConnected;
		    Gtk.windowSetModal (waiting,true);
		    Gtk.windowSetTitle (waiting, "Waiting...");
		    Gtk.windowSetPosition (waiting, Gtk.WIN_POS_CENTER);

		    (* trivial signal connection *)
		    Gtk.signalConnect (waiting, "delete-event", 
				       fn _ => mainQuit ());
		    Gtk.signalConnect (disconnectButton, "clicked", 
				       fn _ => mainQuit ());

		    (* sets default widget settings *)
		    Gtk.containerSetBorderWidth (waiting, 10);
		    Gtk.miscSetAlignment (connectedLabel, 0.0, 0.5);
		    Gtk.windowSetDefaultSize(waiting, 300, 400);
		    Gtk.scrolledWindowSetPolicy (playerWindow, 
						 Gtk.POLICY_NEVER, 
						 Gtk.POLICY_ALWAYS);
		    
		    (* pack everything in small boxes *)
		    Gtk.boxPackStart (buttonHBox, disconnectButton, 
				      true, true, 5);
		    Gtk.boxPackStart (dialogVBox, separator2, false, 
				      false, 5);
		    Gtk.boxPackStart (dialogVBox, playerWindow, true, 
				      true, 0);
		    Gtk.boxPackStart (dialogVBox, separator1, false, 
				      false, 5);
		    Gtk.boxPackStart (dialogVBox, buttonHBox, false, 
				      false, 5);
		    
		    (* pack the whole thing in conatainer and start it *)
		    Gtk.containerAdd (playerWindow, !playerText);
		    Gtk.containerAdd (waiting, dialogVBox);
		    Gtk.widgetShowAll waiting

		end

end