import structure Ant from "Ant"
import structure Instructions from "Instructions"
import structure MkHashImpMap from "x-alice:/lib/data/MkHashImpMap"

structure World =
  struct

  structure AntMap = MkHashImpMap Int

  exception Debug of int

  type cell = {rocky : bool,
               ant : Ant.ant option,
               food : int,
               redMarkers : bool vector,
               blackMarkers : bool vector,
               redHill : bool,
               blackHill : bool}
  val emptyCell = {rocky = false,
                   ant = NONE,
                   food = 0,
                   redMarkers = #[false,false,false,false,false,false],
                   blackMarkers = #[false,false,false,false,false,false],
                   redHill = false,
                   blackHill = false}

  type pos = int * int

  (* world = x_size * cell array *)
  type world = int * cell array * pos AntMap.map

  (* Managing the world *)

  fun newWorld(x_size, y_size) = (x_size,
                                  Array.array(x_size*y_size,emptyCell),
                                  AntMap.map())
  fun sizeOfTheWorld(xs, cells,_) = (xs, Array.length cells div xs)

  fun indexToCoords(xs, i) = (i mod xs, i div xs)

  fun getNoOfAnts((_, cells,_):world) =
      Array.foldl (fn (c:cell,n) =>
                      case #ant c of NONE => n
                                   | SOME _ => n+1)
                  0 cells

  fun getCellAt((xs, cells,_):world, (x,y)) =
      Array.sub(cells, xs*y+x)
  fun setCellAt((xs, cells,antMap):world, (x,y), cell) =
      (Array.update(cells, xs*y+x, cell);
       Option.app (fn a => AntMap.insert(antMap,#id a, (x,y))) (#ant cell);
       ())
  fun existsCell((_, cells,_):world, f) =
      Array.exists f cells
  fun findCell((_, cells,_):world, f) =
      Array.find f cells
  fun findCoords((xs, cells,_):world, f) =
      let val (i,_) = valOf (Array.findi (fn (_,x) => f x) cells)
      in indexToCoords(xs,i) end

  fun changeAntAt(world,pos,f)=
      let
          val cell = getCellAt(world, pos)
          val ant = #ant cell
      in
          setCellAt(world, pos,
                    {cell where ant=f ant})
      end

  (* Geometry *)
  local open Instructions
        open Ant
        fun even x = x mod 2 = 0
  in
  fun turn(Left, d) =
      (case d of E => NE | SE => E | SW => SE | W => SW | NW => W | NE => NW)
    | turn(Right, d) =
      (case d of E => SE | SE => SW | SW => W | W => NW | NW => NE | NE => E)
  fun adjacentCell((x,y), E) = (x+1, y)
    | adjacentCell((x,y), SE) =
      if even y then (x,y+1) else (x+1,y+1)
    | adjacentCell((x,y), SW) =
      if even y then (x-1,y+1) else (x,y+1)
    | adjacentCell((x,y), W) = (x-1,y)
    | adjacentCell((x,y), NW) =
      if even y then (x-1,y-1) else (x,y-1)
    | adjacentCell((x,y), NE) =
      if even y then (x,y-1) else (x+1,y-1)
  end

  fun sensedCell(pos, dir, Instructions.Here) = pos
    | sensedCell(pos, dir, Instructions.Ahead) = adjacentCell(pos, dir)
    | sensedCell(pos, dir, Instructions.LeftAhead) =
      adjacentCell(pos, turn(Instructions.Left, dir))
    | sensedCell(pos, dir, Instructions.RightAhead) =
      adjacentCell(pos, turn(Instructions.Right, dir))

  (* Biology *)
  fun setState(world, pos, s) =
      changeAntAt(world, pos, fn SOME ant => SOME {ant where state=s} | _ => raise Empty)
  fun setResting(world, pos, r) =
      changeAntAt(world, pos, fn SOME ant => SOME {ant where resting=r} | _ => raise Empty)
  fun setDirection(world, pos, d) =
      changeAntAt(world, pos, fn SOME ant => SOME {ant where direction=d} | _ => raise Empty)
  fun setHasFood(world, pos, h) =
      changeAntAt(world, pos, fn SOME ant => SOME {ant where hasFood=h} | _ => raise Empty)

  (* Geography *)
  fun rocky(world, pos) = #rocky (getCellAt(world, pos))

  fun someAntIsAt(world, pos) = #ant (getCellAt(world, pos)) <> NONE
  fun antAt(world, pos) = valOf (#ant (getCellAt(world, pos)))
  fun setAntAt(world, pos, a : Ant.ant) =
      changeAntAt(world, pos, fn _ => SOME a)
  fun clearAntAt(world, pos) =
      changeAntAt(world, pos, fn _ => NONE)

  fun antIsAlive(world, id) = existsCell(world,
                                         fn c => case #ant c of
                                                     NONE   => false
                                                   | SOME a => #id a = id)
  fun findAnt((_,_,antMap):world, id) =
      AntMap.lookupExistent(antMap, id)

  val killAntAt = clearAntAt

  fun foodAt(world, pos) = #food (getCellAt(world, pos))
  fun setFoodAt(world, pos, f) = 
      setCellAt(world, pos,
                {(getCellAt(world, pos)) where food=f})
  fun anthillAt(world, pos, Ant.Red) =
      #redHill (getCellAt(world, pos))
    | anthillAt(world, pos, Ant.Black) =
      #blackHill (getCellAt(world, pos))
    
  (* Chemistry *)
  fun changeMarkerAt(world, pos, Ant.Red, marker, flag) =
      let
          val newMarkers = Vector.update(#redMarkers (getCellAt(world, pos)),
                                         marker, flag)
      in
          setCellAt(world, pos,
                    {(getCellAt(world, pos)) where redMarkers=newMarkers})
      end
    | changeMarkerAt(world, pos, Ant.Black, marker, flag) =
      let
          val newMarkers = Vector.update(#blackMarkers (getCellAt(world, pos)),
                                         marker, flag)
      in
          setCellAt(world, pos,
                    {(getCellAt(world, pos)) where blackMarkers=newMarkers})
      end

  fun setMarkerAt(w,p,c,m) = changeMarkerAt(w,p,c,m,true)
  fun clearMarkerAt(w,p,c,m) = changeMarkerAt(w,p,c,m,false)

  fun checkMarkerAt(world, pos, Ant.Red, marker) =
      Vector.sub(#redMarkers (getCellAt(world,pos)), marker)
    | checkMarkerAt(world, pos, Ant.Black, marker) =
      Vector.sub(#blackMarkers (getCellAt(world,pos)), marker)
  fun checkAnyMarkerAt(world, pos, Ant.Red) =
      Vector.exists (fn x => x)
                    (#redMarkers (getCellAt(world,pos)))
    | checkAnyMarkerAt(world, pos, Ant.Black) =
      Vector.exists (fn x => x)
                    (#blackMarkers (getCellAt(world,pos)))

  (* Phenomenology *)
  local
      open Instructions
  in
  fun cellMatches(world, pos, Friend,         color) =
      someAntIsAt(world,pos) andalso #color(antAt(world,pos))=color
    | cellMatches(world, pos, Foe,            color) =
      (someAntIsAt(world,pos) andalso #color(antAt(world,pos))<>color)
    | cellMatches(world, pos, FriendWithFood, color) =
      someAntIsAt(world,pos)
      andalso #color(antAt(world,pos))=color
      andalso #hasFood(antAt(world,pos))
    | cellMatches(world, pos, FoeWithFood,    color) =
      someAntIsAt(world,pos)
      andalso #color(antAt(world,pos))<>color
      andalso #hasFood(antAt(world,pos))
    | cellMatches(world, pos, Food,           color) =
      foodAt(world,pos) > 0
    | cellMatches(world, pos, Rock,           _    ) = rocky(world,pos)
    | cellMatches(world, pos, Marker m,       color) =
      checkMarkerAt(world, pos, color, m)
    | cellMatches(world, pos, FoeMarker,      color) =
      checkAnyMarkerAt(world, pos, Ant.otherColor color)
    | cellMatches(world, pos, Home,           color) =
      anthillAt(world, pos, color)
    | cellMatches(world, pos, FoeHome,        color) =
      anthillAt(world, pos, Ant.otherColor color)
  end

  (* Martial Arts *)
  fun adjacentAnts(world, pos, c) =
      foldl (fn (d,n) => let val cel = adjacentCell(pos, d) in
                             if someAntIsAt(world, cel) andalso
                                #color(antAt(world, cel)) = c
                             then n+1 else n
                         end) 0 Ant.directions
  fun checkForSurroundedAntAt(world, pos) =
      if someAntIsAt(world, pos) then
          let val a = antAt(world, pos) in
              if adjacentAnts(world,pos, Ant.otherColor(#color a)) >= 5 then
                  (killAntAt(world, pos);
                   setFoodAt(world, pos,
                             foodAt(world, pos) + 3 +
                             (if #hasFood a then 1 else 0)))
              else ()
          end
      else ()
  fun checkForSurroundedAnts(world, pos) =
      (checkForSurroundedAntAt(world, pos);
       app (fn d => checkForSurroundedAntAt(world, adjacentCell(pos, d)))
       Ant.directions)


	
	fun dirToString Ant.E = "0"
	| dirToString Ant.SE = "1"
	| dirToString Ant.SW = "2"
	| dirToString Ant.W = "3"
	| dirToString Ant.NW = "4"
	| dirToString Ant.NE = "5"
	
		
	fun antToString (a:Ant.ant) = 
		
		(case #color(a) of Ant.Red => "red ant of id "
		 | Ant.Black => "black ant of id "
		) ^ 
		Int.toString (#id a) ^
		", dir " ^ dirToString (#direction a) ^
		", food " ^ (if (#hasFood a) then "1" else "0") ^
		", state " ^ (*Int.toString (#state a)*)"?" ^
		", resting " ^ Int.toString (#resting a)

	
	
	val marksToString :(bool vector -> string ) = Vector.foldli ( fn (i,b,s) => if b then s^(Int.toString i) else s  ) ""
	val orMarks = Vector.foldl (fn (b,r) => if b then true else r ) false
	
	fun cellToString (c:cell) =
	if #rocky(c) then "rock"
	else 
		(if (#food c) >0 then (Int.toString (#food c) )^ " food; "
		else ""
		)^
		(if (#redHill c) then "red hill; "
		else if (#blackHill c) then "black hill; "
		else ""
		)^
		(if orMarks (#redMarkers c) then "red marks: " ^ (marksToString (#redMarkers c)) ^ "; "
		else ""
		)^
		(if orMarks (#blackMarkers c) then "black marks: " ^ (marksToString (#blackMarkers c)) ^ "; "
		else ""
		)^
		(case (#ant c) of NONE => ""
		| SOME(a) => antToString a
		)
		
	fun printWorld((xs,cells,_):world) =
            Array.appi (fn (i,c) =>
                           let val (x,y) = indexToCoords(xs,i) in
                               print ("cell ("^Int.toString x^", "^
                                      Int.toString y^"): "^
                                      cellToString c^"\n")
                           end) cells
	
	fun cellToChar (c:cell) = 	
	if #rocky(c) then "*"
	else (case (#ant c) of SOME(a) =>
			(case (#color a, #hasFood a) 
			 of (Ant.Red, false) => "r"
			 | (Ant.Red, true) => "R"
			 | (Ant.Black, false) => "b"
			 | (Ant.Black, true) => "B"		  
			)
		| _ =>
			if (#food c) >0 then (Int.toString (#food c) )
			else if (#redHill c) then "-"
			else if (#blackHill c) then "+"
			else if orMarks (#redMarkers c) then "."
			else if orMarks (#blackMarkers c) then ","	
			else " "
		)

	fun drawWorld((xs,cells,_):world) =
            Array.appi (fn (i,c) =>
                           let val (x,y) = indexToCoords(xs,i) 
                           	   val _ = if (x=0) then
                           	    	if y mod 2 = 0 then print "\n" 
                           	    	else print " \n"
                           	    else ()
                           in
                               print ((cellToChar c)^" ")
                           end) cells

        fun statistics((xs,cells,antMap):world) =
            Array.foldl (fn (c, stats) =>
                            let
                                val stats = if #redHill c then {stats where redScore=
                                                                (#redScore stats)+
                                                                (#food c)}
                                            else stats
                                val stats = if #blackHill c then {stats where blackScore=
                                                                  (#blackScore stats)+
                                                                  (#food c)}
                                            else stats
                                val stats = case #ant c of
                                                NONE => stats
                                              | SOME {color=Ant.Red,...} =>
                                                {stats where redSurvivors=
                                                 (#redSurvivors stats)+1}
                                              | SOME {color=Ant.Black,...} =>
                                                {stats where blackSurvivors=
                                                 (#blackSurvivors stats)+1}
                            in
                                stats
                            end) {redScore=0, redSurvivors=0,
                                  blackScore=0, blackSurvivors=0} cells

        fun printStats world =
            let
                val {redScore,redSurvivors,
                     blackScore, blackSurvivors} = statistics world
            in
                print "Statistics\n";
                print "----------\n";
                print ("Red survivors: \t"^Int.toString redSurvivors^"\n");
                print ("Red score: \t"^Int.toString redScore^"\n");
                print ("Black survivors: \t"^Int.toString blackSurvivors^"\n");
                print ("Black score: \t"^Int.toString blackScore^"\n")
            end

  end
