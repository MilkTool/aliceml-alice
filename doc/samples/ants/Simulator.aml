import structure Ant from "Ant"
import structure Instructions from "Instructions"
import structure World              from "World"
import structure InstructionsParser from "InstructionsParser"
import structure WorldParser        from "WorldParser"
import structure Viewer             from "Viewer"


structure Simulator :
          (fun step : World.world *
                      'a Instructions.ant * 
                      'a Instructions.ant *
                      Ant.id -> unit
           fun simulate : bool * bool * bool * bool * bool * int *
                          string * string * string -> unit
                                                      ) =
  struct

  open Ant
  open Instructions
  open World

  val defSeed = 0w12345
  fun randStream seed =
      lazy Word.toInt ((seed div 0w65536) mod 0w16384 ) ::
           randStream ((seed * 0w22695477)+0w1)
  fun randInit () = tl(tl(tl(tl(randStream defSeed))))
                    
  local
      val rands = ref (randInit())
  in
  fun randomInt n = (hd (!rands)) mod n before rands:=tl (!rands)
  end

  fun instr(Sense(sensedir,st1,st2,cond,_),
            w,id:int,p,a) =
      let val p' = sensedCell(p, Ant.getDirection a, sensedir)
          val st = if cellMatches(w, p', cond, Ant.getColor a) then st1 else st2
      in
          setState(w,p,st)
      end
    | instr(Mark(i,st,_),
            w,id,p,a) =
      (setMarkerAt(w,p, Ant.getColor a, i);
       setState(w,p,st))
    | instr(Unmark(i, st, _),
            w,id,p,a) =
      (clearMarkerAt(w,p, Ant.getColor a, i);
       setState(w,p,st))
    | instr(PickUp(st1, st2, _),
            w,id,p,a) =
      if Ant.getHasFood a orelse foodAt(w, p)=0 then
          setState(w,p,st2)
      else (setFoodAt(w,p,foodAt(w, p)-1);
            setHasFood(w,p,true);
            setState(w,p,st1))
    | instr(Drop(st, _),
            w,id,p,a) =
      (if Ant.getHasFood a then
           (setFoodAt(w,p, foodAt(w,p)+1);
            setHasFood(w,p,false))
       else ();
       setState(w,p,st))
    | instr(Turn(lr, st, _),
            w,id,p,a) =
      (setDirection(w,p, turn(lr, Ant.getDirection a));
       setState(w,p,st))
    | instr(Move(st1, st2, _),
            w,id,p,a) =
      let val newp = adjacentCell(p, Ant.getDirection a) in
          if rocky(w, newp) orelse someAntIsAt(w, newp) then
              setState(w,p,st2)
          else
              (clearAntAt(w, p);
               setAntAt(w, newp, a);
               setState(w, newp, st1);
               setResting(w, newp, 14);
               checkForSurroundedAnts(w, newp))
      end
    | instr(Flip(n, st1, st2, _),
            w,id,p,a) =
      let val st = if randomInt n = 0 then st1 else st2 in
          setState(w,p,st)
      end

  fun step(w, redAnt, blackAnt, id) =
      if antIsAlive(w, id) then
      let val p = findAnt(w, id)
          val a = antAt(w, p) handle Option => raise Empty
      in
          if Ant.getResting a > 0 then
              setResting(w, p, Ant.getResting a - 1)
          else instr (getInstruction(case Ant.getColor a of Red => redAnt
                                                          | _ => blackAnt,
                                     Ant.getState a),
                      w, id, p, a)
      end
      else ()

  fun simulate(showStatus, showWorlds, showAnts, drawWorlds,
                visualize,
               rounds,
               redAnt, blackAnt, world) =
      let
          val redBrain = InstructionsParser.parseFile redAnt
          val blackBrain = InstructionsParser.parseFile blackAnt
          val world = WorldParser.parseFile world
          val noOfAnts = getNoOfAnts world

          fun loop'(_, 0, _) = ()
            | loop'(size, n, f) = (f (size-n); loop'(size,n-1,f))
          fun loop n f = loop'(n,n,f)
      in
          if visualize then
            let val viewer = Viewer.viewer () 
            in
                World.setUpdateCellV (Viewer.updateCell viewer)
            end
          else ();
          if showStatus then
              (print ("Starting with "^Int.toString noOfAnts^" ants\n");
               print (Int.toString rounds^" rounds.\n");
               print ("\t red player: "^redAnt^"\n");
               print ("\t black player: "^blackAnt^"\n"))
          else ();
          print ("random seed: "^(Int.toString(Word.toInt defSeed))^"\n");
          loop rounds
          (fn r => (if showWorlds orelse showAnts orelse drawWorlds then
                        print ("\nAfter round "^Int.toString r^"...\n")
                    else ();
                    if showAnts then printOnlyAnts world else ();
                    if showWorlds then printWorld world else ();
                    if drawWorlds then drawWorld world else ();
                    if showStatus then
                        if r mod 1000 = 0 
                        then print ("round "^Int.toString r^"\n")
                        else ()
                    else ();
                    loop noOfAnts
                         (fn i => step(world, redBrain, blackBrain, i))));
          if showStatus then
              (printOnlyAnts world;
               printStats world)
          else ();
          ()
      end

  end
