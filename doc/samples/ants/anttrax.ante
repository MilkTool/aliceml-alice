val validmarker = 0
val trailmarker1 = 1
val trailmarker2 = 2
val trailmarker3 = 3

val markE  = (nil, [trailmarker1, trailmarker2, trailmarker3])
val markSE = ([trailmarker1], [trailmarker2, trailmarker3])
val markSW = ([trailmarker2], [trailmarker1, trailmarker3])
val markW  = ([trailmarker1,trailmarker2], [trailmarker3])
val markNW = ([trailmarker3], [trailmarker1, trailmarker2])
val markNE = ([trailmarker3,trailmarker1], [trailmarker2])

val foodmarker = 4

val todo = loop (flip 123 ifyes nop)
val lost = loop (flip 124 ifyes nop)

local
(* set the vector in the current field *)
(* last operation is setting the valid marker *)
fun doMark (pos, neg) =
    (List.foldl (fn (m, r) => mark m ++ r) nop pos) ++
    (List.foldl (fn (m, r) => unmark m ++ r) nop neg) ++
    mark validmarker
    
(* generate a mark for the _opposite_ direction *)
fun markWithState 0 = doMark markW
  | markWithState 1 = doMark markNW
  | markWithState 2 = doMark markNE
  | markWithState 3 = doMark markE
  | markWithState 4 = doMark markSE
  | markWithState 5 = doMark markSW
  | markWithState _ = raise Match

fun turnHome'(e,se,sw,w,nw,ne) =
    sense2 here (marker trailmarker1) ifyes (
      sense2 here (marker trailmarker2) ifyes (
        w
      ) ifnot (
        sense2 here (marker trailmarker3) ifyes (
          ne
        ) ifnot (
          se
        )
      )
    ) ifnot (
      sense2 here (marker trailmarker2) ifyes (
        sw
      ) ifnot (
        sense2 here (marker trailmarker3) ifyes (
          nw
        ) ifnot (
          e
        )
      )
    )

val turns = (nop,
	     turn right,
             turn right ++ turn right,
             turn right ++ turn right ++ turn right,
             turn left ++ turn left,
             turn left)

fun cycleTurns 0 t = t
  | cycleTurns n (a,b,c,d,e,f) = cycleTurns (n-1) (f,a,b,c,d,e)

fun turnHome n = turnHome' (cycleTurns n turns)

fun turnTo 0 n = #1 (cycleTurns n turns)
  | turnTo 1 n = #2 (cycleTurns n turns)
  | turnTo 2 n = #3 (cycleTurns n turns)
  | turnTo 3 n = #4 (cycleTurns n turns)
  | turnTo 4 n = #5 (cycleTurns n turns)
  | turnTo 5 n = #6 (cycleTurns n turns)
  | turnTo _ _ = raise Match

(* if we are on a vector, turn to the indicated direction *)
(* if we are not, set a mark looking opposite to our direction *)

in
fun scan360for cond fail =
    let
        val tl1 = turn left
        val tr1 = turn right
        val tr2 = turn right
        val tr3 = turn right
        val tr4 = turn right
        val tr5 = turn right
        val tr6 = turn right
        val tr7 = turn right
    in
    try (fn exit =>
        sense leftahead cond ifyes (tl1 ++ exit) ++
        sense ahead cond ifyes exit ++
        sense rightahead cond ifyes (tr1 ++ exit) ++
        tr2 ++
        sense rightahead cond ifyes (tr3 ++ exit) ++
        tr4 ++
        sense rightahead cond ifyes (tr5 ++ exit) ++
        tr6 ++
        sense rightahead cond ifyes (tr7 ++ exit) ++
        fail) 
    otherwise
        nop
    end

val direct =
    sense2 here (marker validmarker) ifyes (
      switch (List.tabulate(6,turnHome))
    ) ifnot (
      switch (List.tabulate(6,markWithState)) ++
      scan360for (marker validmarker) nop
    )

val markTrail =
    sense here (marker validmarker) ifnot (
      switch (List.tabulate(6,markWithState))
    )

fun head n =
    switch (List.tabulate(6,turnTo n))
end

fun domove otherwise evadeaction =
    letlabel (fn exit =>
    letlabel (fn evade =>
	sense ahead foehome ifyes (goto evade) ++
	(* avoid trap *)
	sense leftahead foe ifyes (
	    sense rightahead foe ifyes (goto evade)
	) ++
	move ifyes (goto exit) ++
	label evade ++
	evadeaction ++
	label exit
    ))


fun gohome goaction homeaction =
    loopx (fn break =>
	sense here home ifyes (
	    homeaction ++
	    break
	) ++
	direct ++
	letlabel (fn tryagain =>
	    label tryagain ++
	    domove otherwise (
		flip 6 ifyes (turn left) ++
		goto tryagain
	    )
	) ++
	goaction
    )

(* val fetch_food = *)
(*     loop ( *)
(* 	turnto (marker foodmarker) ifnot ( *)
(* 	    turnto food ifnot nop *)
(* 	) ++ *)
(* 	domove otherwise nop *)
(*     ) *)


fun deliver_food worker =
    gohome (mark foodmarker)
           (sense ahead home ifyes (domove otherwise nop) ++
            sense ahead home ifyes (domove otherwise nop) ++
            sense ahead home ifyes (domove otherwise nop) ++
            drop ++ worker)

(* Pioneer, build straight streets *)
(* should only be some ants on the edge of the hill *)
fun pioneer explorer =
    loop (direct ++
          domove otherwise explorer
    )

fun myturnto tl1 tl2 tr1 tr2 c ifyes b =
	letlabel (fn l1 =>
	letlabel (fn l2 => 
	    sensen [
		on(ahead, c) nop
	    ,
		on(leftahead, c) tl1
	    ,
		on(rightahead, c) tr1
	    ] otherwise (goto l2) ++
	    label l1 ++ b ++
	    label l2
	))
  | myturnto tl1 tl2 tr1 tr2 c ifnot b =
	    sensen [
		on(ahead, c) nop
	    ,
		on(leftahead, c) tl2
	    ,
		on(rightahead, c) tr2
	    ] otherwise b

val turnToFree =
    sense rightahead home ifnot (turn right) ++ 
    sense rightahead home ifnot (turn right) ++ 
    sense rightahead home ifnot (turn right) ++
    sense rightahead home ifnot (turn right) ++
    sense rightahead home ifnot (turn right) ++
    sense rightahead friend ifnot (turn right) ++
    sense rightahead friend ifnot (turn right) ++
    sense rightahead friend ifnot (turn right) ++
    sense rightahead friend ifnot (turn right) ++
    sense rightahead friend ifnot (turn right)
    

(* Explorer, run around wildly and seek food *)
fun explorer (probTurn) collector worker =
        loop (markTrail ++
              sense here home ifnot (
              myturnto (turn left) (turn left)
                       (turn right) (turn right) food ifyes collector
              ) ++
              flip probTurn ifyes (turn left) ++
              flip 20 ifyes worker ++
              domove otherwise turnToFree
              )

fun unroll_trail worker =
    gohome (unmark foodmarker)
           worker

fun follow_food_marks worker =
    loop (
      direct ++
      turn right ++ turn right ++ turn right ++
      myturnto (turn left) (turn left)
               (turn right) (turn right) food ifyes worker ++
      myturnto (turn left) (turn left)
               (turn right) (turn right) (marker foodmarker) ifnot
               (
                 turn right ++ turn right ++ turn right ++
                 myturnto (turn left) (turn left)
                          (turn right) (turn right) food ifyes worker ++
                 myturnto (turn left) (turn left)
                          (turn right) (turn right) (marker foodmarker)
                          ifnot (unroll_trail worker)
               ) ++
      domove otherwise (turn left ++
                        domove otherwise
                        (flip 4 ifyes (turn right ++ turn right))
                        ++ worker)
    )

fun worker (probTurn) follow_food_marks collector =
        loop (markTrail ++
              sense here home ifnot (
              myturnto (turn left) (turn left)
                       (turn right) (turn right) food ifyes collector ++
              myturnto (turn left) (turn left)
                       (turn right) (turn right) (marker foodmarker) ifyes
                       follow_food_marks
              ) ++
              flip probTurn ifyes (turn left) ++             
              domove otherwise turnToFree
              )

(* Collector, follow streets with food marker and bring food home *)
fun collector worker =
    domove otherwise worker ++
    pick ifnot worker ++
    deliver_food worker

val ant =
    proc "pioneer" (pioneer (goto "explorer")) ++
    proc "explorer" (explorer 10 (goto "collector") (goto "worker") ) ++
    proc "worker" (worker 10 (goto "follow_food_marks")
                  (goto "collector")) ++
    proc "follow_food_marks" (follow_food_marks (goto "worker")) ++
    proc "collector" (collector (goto "worker"))
