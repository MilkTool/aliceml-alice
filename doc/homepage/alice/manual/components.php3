<?php include("macros.php3"); ?>
<?php heading("Components", "components") ?>


<?php section("overview", "overview") ?>

<P>A <EM>component</EM> is the entity of compilation and deployment. The
<EM>export</EM> of a component is a module expression that will be evaluated
when executing the component. A component can <EM>import</EM> other components,
which may reside at remote URLs. Imported components are loaded and evaluated
lazily. This <EM>linking</EM> operation includes a dynamic type check between
import and export signatures. An <EM>application</EM> is defined by a set of
components and a designated <EM>root</EM> component that represents its main
body.</P>


<?php section("source", "defining components") ?>

<P>Syntactically, a component is an SML program headed by a set of <I>import
announcements</I> of the form</P>

<PRE class=code>
import <I>imp</I> from "url"</PRE>

<P>The URL describes where to find the component, while the import description
<I>imp</I> denotes what kind of item is imported from that particular
component. For example,</P>

<PRE class=code>
import structure Foo from "http://ps.uni-sb.de/stockhausen/Foo"</PRE>

<P>An import can contain any language entity, like values, types, structures,
signatures, etc. (see <A href="#syntax">below</A>). Imports can be given in
plain form like above, in which case the compiler will look up the actual type
of the entity in the component itself, or in description form similar to
specifications, in which case the compiler verifies that the description
matches the actual component:</P>

<PRE class=code>
import signature FOO       from "http://ps.uni-sb.de/stockhausen/FOO-sig"
import structure Foo : FOO from "http://ps.uni-sb.de/stockhausen/Foo"</PRE>

<P>Each component exports exactly its body environment, i.e. all entities
declared on its toplevel. For example, the component</P>

<PRE class=code>
import structure Y from "other"

signature S = sig end
structure X :> S = struct end</PRE>

<P>exports a signature item <TT>S</TT> and a structure <TT>X</TT>. The export
signature of the component will consist of these two items. Structure
<TT>Y</TT> is not exported (but may be by a simple rebinding, if desired).</P>

<P>A compiled component also includes information about all its import
signatures. These are determined by the export signatures found in the
imported components at compile time.</P>


<?php section("execution", "execution") ?>

<P>An application is executed by evaluating its root component. In general, a
component imports other components. Imported components are loaded and
evaluated lazily by the default <A
href="library/component-manager.php3"><I>component manager</I></A>, which is
part of the runtime system. A component that is never actually accessed will
not get loaded. URL resolving is handled by the component manager's <A
href="library/resolver.php3"><I>resolver</I></A>.</P>

<P>Lazy linking is achieved by representing imports by <A
href="futures.php3#lazy">lazy futures</A> of their result module. A component
gets linked when the future is <A href="futures.php3#request">requested</A>.
The first step of linking is matching the export signature of the linked
component against the corresponding import signature of the component that 
requested it. If the check is succesful, the component is evaluated <A
href="futures.php3#spawn">concurrently</A> and the future is replaced by a
concurrent future of the result of the evaluation. Otherwise the future is <A
href="futures.php3#failed">failed</A>.</P>

<P>Every component is loaded and evaluated at most once in a single process. If
multiple components request an import from the same (resolved) URL, they
will share a reference to the same instantiation of that component.</P>


<?php section("firstclass", "first-class components") ?>

<P>Components generated by the compiler are always ground, i.e. they return a
structure containing the items declared on the top-level of the component.
However, components can also be created or loaded dynamically by means of the <A
href="library/components.php3"><TT>Component</TT></A> structure. Such
first-class components are not restricted to ground signatures, but may
have any higher-order signature. Components with higher-order signatures cannot
be imported by import announcements, though. They can be evaluated only
through the <A
href="library/component-manager.php3#Eval"><TT>ComponentManager.Eval</TT></A>
functor.</P>

  <P>
    Note the close connection of components to the Alice
    <A href="pickling.php3">pickling mechanism</A>.
  </P>


<?php section("firstclass-higher", "higher-order components") ?>

<P>Components generated by the compiler are always ground, i.e. they return a
structure containing the items declared on the top-level of the component.
However, components can also be created or loaded dynamically by means of the <A
href="library/components.php3"><TT>Component</TT></A> structure. Such
first-class components are not restricted to ground signatures, but may
have any higher-order signature. Components with higher-order signatures cannot
be imported by import announcements, though. They can be evaluated only
through the <A
href="library/component-manager.php3#Eval"><TT>ComponentManager.Eval</TT></A>
functor.</P>


<?php section("syntax", "syntax") ?>

  <TABLE class=bnf>
    <TR>
      <TD> <I>component</I> </TD>
      <TD align="center">::=</TD>
      <TD> <I>ann</I> &lt;<I>program</I>&gt; </TD>
      <TD> component </TD>
    </TR>
    <TR></TR>
    <TR>
      <TD> <I>ann</I> </TD>
      <TD align="center">::=</TD>
      <TD> <TT>import</TT> <I>imp</I> <TT>from</TT> <I>string</I> </TD>
      <TD> import announcement </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD>  </TD>
      <TD> empty </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <I>ann</I> &lt;<TT>;</TT>&gt; <I>ann</I> </TD>
      <TD> </TD>
    </TR>
    <TR></TR>
    <TR>
      <TD> <I>imp</I> </TD>
      <TD align="center">::=</TD>
      <TD> <TT>val</TT> <I>valitem</I> </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <TT>type</TT> <I>typitem</I> </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <TT>datatype</TT> <I>datitem</I> </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <TT>exttype</TT> <I>extitem</I> </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <TT>constructor</TT> <I>econitem</I> </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <TT>exception</TT> <I>exitem</I> </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <TT>structure</TT> <I>stritem</I> </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <TT>functor</TT> <I>funitem</I> </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <TT>signature</TT> <I>sigitem</I> </TD>
      <TD> </TD>
    </TR>
    <TR valign=baseline>
      <TD></TD> <TD></TD>
      <TD> <TT>infix</TT> &lt;<I>d</I>&gt; <I>vid</I><SUB>1</SUB>
                                       ... <I>vid</I><SUB>n</SUB> </TD>
      <TD> (n>=1)</TD>
    </TR>
    <TR valign=baseline>
      <TD></TD> <TD></TD>
      <TD> <TT>infixr</TT> &lt;<I>d</I>&gt; <I>vid</I><SUB>1</SUB>
                                        ... <I>vid</I><SUB>n</SUB> </TD>
      <TD> (n>=1)</TD>
    </TR>
    <TR valign=baseline>
      <TD></TD> <TD></TD>
      <TD> <TT>nonfix</TT> <I>vid</I><SUB>1</SUB>
                       ... <I>vid</I><SUB>n</SUB> </TD>
      <TD> (n>=1)</TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD>  </TD>
      <TD> empty </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <I>imp</I> &lt;<TT>;</TT>&gt; <I>imp</I> </TD>
      <TD> </TD>
    </TR>
    <TR></TR>
    <TR>
      <TD> <I>valitem</I> </TD>
      <TD align="center">::=</TD>
      <TD> &lt;<TT>op</TT>&gt; <I>vid</I>
           &lt;<TT>and</TT> <I>valitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> &lt;<TT>op</TT>&gt; <I>vid</I> <TT>:</TT> <I>ty</I>
           &lt;<TT>and</TT> <I>valitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR></TR>
    <TR>
      <TD> <I>typitem</I> </TD>
      <TD align="center">::=</TD>
      <TD> <I>tycon</I> &lt;<TT>and</TT> <I>typitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <I>tyvarseq</I> <I>tycon</I>
           &lt;<TT>and</TT> <I>typitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR></TR>
    <TR>
      <TD> <I>datitem</I> </TD>
      <TD align="center">::=</TD>
      <TD> <I>tycon</I> &lt;<TT>and</TT> <I>datitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <I>tyvarseq</I> <I>tycon</I> <TT>=</TT> <I>conitem</I>
           &lt;<TT>and</TT> <I>datitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR></TR>
    <TR>
      <TD> <I>conitem</I> </TD>
      <TD align="center">::=</TD>
      <TD> &lt;<TT>op</TT>&gt; <I>vid</I> &lt;<TT>of</TT> <I>ty</I>&gt;
           &lt;<TT>|</TT> <I>conitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR></TR>
    <TR>
      <TD> <I>extitem</I> </TD>
      <TD align="center">::=</TD>
      <TD> <I>tycon</I> &lt;<TT>and</TT> <I>extitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <I>tyvarseq</I> <I>tycon</I> 
           &lt;<TT>and</TT> <I>extitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR></TR>
    <TR>
      <TD> <I>econitem</I> </TD>
      <TD align="center">::=</TD>
      <TD> &lt;<TT>op</TT>&gt; <I>vid</I> 
           &lt;<TT>and</TT> <I>econitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
<!--
    <TR>
      <TD></TD> <TD></TD>
      <TD> &lt;<TT>op</TT>&gt; <I>vid</I> &lt;<TT>of</TT> <I>ty</I>&gt;
	   <TT>:</TT> <I>tyvarseq</I> <I>longtycon</I>
           &lt;<TT>and</TT> <I>econitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
-->
    <TR></TR>
    <TR>
      <TD> <I>exitem</I> </TD>
      <TD align="center">::=</TD>
      <TD> &lt;<TT>op</TT>&gt; <I>vid</I> 
           &lt;<TT>and</TT> <I>exitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> &lt;<TT>op</TT>&gt; <I>vid</I> <TT>of</TT> <I>ty</I>
           &lt;<TT>and</TT> <I>exitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR></TR>
    <TR>
      <TD> <I>stritem</I> </TD>
      <TD align="center">::=</TD>
      <TD> <I>strid</I> &lt;<TT>and</TT> <I>stritem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR>
      <TD></TD> <TD></TD>
      <TD> <I>strid</I> <TT>:</TT> <I>sigexp</I>
           &lt;<TT>and</TT> <I>stritem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR></TR>
    <TR>
      <TD> <I>funitem</I> </TD>
      <TD align="center">::=</TD>
      <TD> <I>strid</I> &lt;<TT>and</TT> <I>funitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR valign=baseline>
      <TD></TD> <TD></TD>
      <TD> <I>strid</I> <I>strpat</I><SUB>1</SUB> ... <I>strpat</I><SUB>n</SUB>
	   <TT>:</TT> <I>sigexp</I>
           &lt;<TT>and</TT> <I>funitem</I>&gt; </TD>
      <TD> (n>=1) </TD>
    </TR>
    <TR></TR>
    <TR>
      <TD> <I>sigitem</I> </TD>
      <TD align="center">::=</TD>
      <TD> <I>sigid</I> &lt;<TT>and</TT> <I>sigitem</I>&gt; </TD>
      <TD> </TD>
    </TR>
    <TR valign=baseline>
      <TD></TD> <TD></TD>
      <TD> <I>sigid</I> <I>strpat</I><SUB>1</SUB> ... <I>strpat</I><SUB>n</SUB>
           &lt;<TT>and</TT> <I>sigitem</I>&gt; </TD>
      <TD> (n>=1) </TD>
    </TR>
  </TABLE>

  <P>
    Note that exception and functor imports are actually derived forms.
  </P>


<?php footing() ?>
