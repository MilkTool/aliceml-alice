(*
 * (c) Andreas Rossberg 1999-2001
 *
 * Standard ML lexical analysis
 *
 * Definition, sections 2.1-2.5, 3.1
 *
 * Notes:
 *   Since all lexical classes must be disjoint:
 *   - There is no single class ID, use ALPHA|SYMBOL|STAR|EQUALS.
 *   - There is no class LAB, use ALPHA|SYMBOL|NUMERIC|DIGIT|STAR.
 *   - ID does not contain `=' and `*', those are EQUALS and STAR.
 *   - LONGID does not contain unqualified ids (but allows for `=' and `*').
 *   - INT does not contain positive decimal integers without leading 0,
 *     and single DIGIT integers, those are in NUMERIC, DIGIT, and ZERO.
 *   - NUMERIC does not contain single digit numbers, those are in DIGIT.
 *   - DIGIT does not contain 0, that is ZERO.
 *
 *   The lexer uses a global variable to recognise nested comments, so it is
 *   not reentrant.
 *)

use "Lexer.sml";

    val nesting = ref 0		(* non-reentrant side-effect way :-P *)

regexp
  formatting = [" \t\n\011\012\013"]+ and
  letter     = ["A-Za-z"] and
  symbol     = ["-!%&$#+/:<=>?@\\~`|*^"] and
  digit      = ["0-9"] and
  hexdigit   = ["0-9a-fA-F"] and

  posdecint  =  digit + and
  poshexint  = "0x" hexdigit + and
  negdecint  = "~" posdecint  and
  neghexint  = "~" poshexint  and
  decint     =  posdecint  |  negdecint  and
  hexint     =  poshexint  |  neghexint  and
  decword    = "0w" digit + and
  hexword    = "0wx" hexdigit + and

  exp        = "E" | "e" and
  real       = ( decint "." digit + ( exp  decint )?) | ( decint  exp  decint ) and

  numericlab = ["1-9"] digit * and
  alphanumid =  letter ( letter  |  digit  | ["_'"])* and
  symbolicid =  symbol + and
  id         =  alphanumid  |  symbolicid  and
  tyvar      = "'"( letter  |  digit  | ["_'"])* and
  longid     = ( alphanumid ".")+ ( id |"="|"*") and

  printable  = [^"\000-\032\"\127\\"] and
  escape     = "\\a" | "\\b" | "\\t" | "\\n" | "\\v" | "\\f" | "\\r" |
	       ("\\^"["@-_"])  | ("\\" digit {3} )  | ("\\u" hexdigit {4}) |
	       "\\\"" | "\\\\" and
  gap        = ("\\" formatting "\\") and
  stringchar =  printable  | " " |  escape  and
  string     = "\""( stringchar  |  gap )*"\"" and
  char       = "#\"" gap * stringchar  gap *"\""



val EOF = ref false

lexer lex =


   formatting 	=> (print yytext ) | 


  "#"		=> (print yytext ) |
  "("		=> (print yytext ) |
  ")"		=> (print yytext ) |
  "*"		=> (print yytext ) |
  ","		=> (print yytext ) |
  "->"		=> (print yytext ) |
  "..."         => (print yytext ) |
  ":"		=> (print yytext ) |
  ":>"		=> (print yytext ) |
  ";"		=> (print yytext ) |
  "="		=> (print (yytext ^ "(* line " ^ Int.toString yyline ^ ", column " ^ Int.toString yycol ^ "*)") ) |
  "=>"		=> (print yytext ) |
  "["		=> (print yytext ) |
  "]"		=> (print yytext ) |
  "_"		=> (print yytext ) |
  "{"		=> (print yytext ) |
  "|"		=> (print yytext ) |
  "}"		=> (print yytext ) |

  "abstype"	=> (print yytext) |
  "and"       	=> (print yytext) |
  "andalso"	=> (print yytext) |
  "as"		=> (print yytext) |
  "case"	=> (print yytext) |
  "datatype"	=> (print yytext) |
  "do"		=> (print yytext) |
  "else"	=> (print yytext) |
  "end" 	=> (print (yytext ^ "(* line " ^ Int.toString yyline ^ ", column " ^ Int.toString yycol ^ "*)") ) |
  "eqtype"	=> (print yytext) |
  "exception"	=> (print yytext) |
  "fn"		=> (print yytext) |
  "fun" 	=> (print yytext) |
  "functor"	=> (print yytext) |
  "handle"	=> (print yytext) |
  "if"		=> (print yytext) |
  "in"		=> (print yytext) |
  "include"	=> (print yytext) |
  "infix"	=> (print yytext) |
  "infixr"	=> (print yytext) |
  "let" 	=> (print yytext) |
  "local"	=> (print yytext) |
  "nonfix"	=> (print yytext) |
  "of"		=> (print yytext) |
  "op"		=> (print yytext) |
  "open"	=> (print yytext) |
  "orelse"	=> (print yytext) |
  "raise"	=> (print yytext) |
  "rec" 	=> (print yytext) |
  "sharing"	=> (print yytext) |
  "sig" 	=> (print yytext) |
  "signature"	=> (print yytext) |
  "struct"	=> (print yytext) |
  "structure"	=> (print yytext) |
  "then"	=> (print yytext) |
  "type"	=> (print yytext) |
  "val" 	=> (print yytext) |
  "where"	=> (print yytext) |
  "while"	=> (print yytext) |
  "with"	=> (print yytext) |
  "withtype"	=> (print yytext) |

  "0"		=> (print yytext) |
  ["1-9"]	=> (print yytext) |
   numericlab 	=> (print yytext) |
   decint 	=> (print yytext) |
   hexint 	=> (print yytext) |
   decword 	=> (print yytext) |
   hexword 	=> (print yytext) |
   real 	=> (print yytext) |
   string 	=> (print yytext) |
   char 	=> (print yytext) |

   tyvar 	=> (print yytext) |
   alphanumid 	=> (print yytext) |
   symbolicid 	=> (print yytext) |
   longid 	=> (print yytext) |

   "(*"         => (nesting := 1 ; comment()) |
   "\""         => (print "\n\n\n\n\n\nERROR\n\n\n\n\n\n") |
   eof          => ( EOF:= true; print ("\nEOF\n" ^ " line " ^ Int.toString yyline ^ ", column " ^ Int.toString yycol ^ "\n") ) 


and comment =
   "(*" => (nesting := !nesting + 1; comment() ) |
   "*)" => (nesting := !nesting - 1;
	    if !nesting = 0 then lex() else comment() ) |
   _    => (comment() )



fun lexFile fileName =
    let
	val ins = TextIO.openIn fileName
	val lexString = TextIO.inputAll ins
    in
	TextIO.closeIn ins;
	lex lexString
    end

val b = lexFile "/home/nikopp/hose/hamlet/original/Lexer.sml"

fun go () = while not (!EOF) do b()
		

