(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Inf             from "../lib/rtt/Inf"
import structure IO              from "../lib/system/IO"
import structure OS              from "../lib/system/OS"
import structure Reflect         from "../lib/system/Reflect"
import structure Url             from "../lib/system/Url"
import structure Resolver        from "../lib/system/Resolver"
import structure UnsafeComponent from "../lib/system/UnsafeComponent"
import signature MY_COMPONENT    from "MY_COMPONENT-sig"

structure MyComponent :> MY_COMPONENT =
struct
    nonfix mod
    type inf = Inf.t option
    type mod = Reflect.value

    datatype component =
	UNEVALUATED of { imports: (string * inf) vector,
			 body:    mod vector -> mod,
			 inf:     inf }
      | EVALUATED of { inf: inf, mod: mod }
    type t = component

(*--** adapt to new exceptions *)
    val localize =
	let
	    val handlers =
		case OS.Process.getEnv "ALICE_LOAD" of
		    SOME s => Resolver.Handler.parse s
		  | NONE => [Resolver.Handler.default]
	    val resolver =
		Resolver.new {name = "load", handlers, memoize = true}
	in
	    Resolver.localize resolver
	end

    fun load url =
	let
	    val s = Url.toStringRaw url   (*--** use getLocalPath instead *)
	in
	    case localize s of
		SOME (Resolver.FILE s') => UnsafeComponent.load s'
	      | SOME (Resolver.STRING s') => UnsafeComponent.unpack_ s'
	      | NONE =>
		    raise IO.Io {name = s,
				 function = "load",
				 cause = Option.Option}
	end

    val save = UnsafeComponent.save

    fun imports (UNEVALUATED {imports, ...}) = imports
      | imports (EVALUATED {...}) = #[]

    fun body (UNEVALUATED {body, ...}) = body
      | body (EVALUATED {mod, ...}) = fn #[] => mod

    fun inf (UNEVALUATED {inf, ...}) = inf
      | inf (EVALUATED {inf, ...}) = inf

    fun new {imports, body, inf} = UNEVALUATED {imports, body, inf}

    fun stripImportInfs (UNEVALUATED {imports, body, inf}) =
	let
	    val imports' = Vector.map (fn (s, _) => (s, NONE)) imports
	in
	    UNEVALUATED {imports = imports', body, inf}
	end
      | stripImportInfs (component as EVALUATED _) = component
end
