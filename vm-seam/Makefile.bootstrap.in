### -*- Makefile -*-
###
### Author:
###   Leif Kornstaedt <kornstae@ps.uni-sb.de>
###
### Copyright:
###   Leif Kornstaedt, 1999-2003
###
### Last change:
###   $Date$ by $Author$
###   $Revision$
###

#--** this Makefile has much in common with vm-mozart/Makefile;
#--** the commonalities of the two should eventually be factored out.

##
## Description of Externally Useful Targets
## ========================================
##
## all:
##    Identical to build3-install.
## depend:
##    Creates the file Makefile.bootstrap.depend, 
##    which contains the dependencies needed for Pass 3.
## clean:
##    Removes all files created by previous builds.
## veryclean:
##    Identical to clean.
## distclean:
##    Additionally removes the generated Makefile.bootstrap.depend.
##
## Pass 1
## ------
##
## The goal is to build a compiler using the bootstrap compiler.
## This is performed via the following targets.
##
## build1-src:
##    A complete source tree is created in subdirectory build1.
## build1-all:
##    The native components are created using ozc.  The component
##    Build1.stc (and all its imports, transitively) are built
##    using the bootstrap compiler via recursive invocation.
## build1-install:
##    A minimal but working system (only consisting of a compiler,
##    without libraries) is installed to subdirectory build1/install.
##
## Pass 2
## ------
##
## The outcome of this pass is a working system with libraries.
## The components in the libraries carry export signatures.
##
## build2-src:
##    A source tree for the libraries is created in subdirectory build2.
## build2-all:
##    Libraries implemented in Alice are compiled using the system
##    installed in Pass 1.
##
## Pass 3
## ------
##
## This pass finally builds bootstrapped versions of /everything/
## (including toplevel), with runtime type information and a first-class
## compiler.
##
## build3-all:
##    A complete source tree is created in subdirectory build1.
##    Every source file is compiled independently; no recursive
##    invocation happens.
## build3-install:
##    A complete system with all libraries and tools, carrying
##    runtime type information, is installed to subdirectory
##    build3/install.
##
## Installation
## ------------
##
## Globally install all files as found in subdirectory build3/install.
## This is accomplished by the following target.
##
## install:
##    Install the system found in build3/install to the global
##    installation directory.
##
## Typical Use for a Clean Build
## =============================
##
## make distclean; make depend; make all; make install
##

# Configurable directories

SRCTOP = ..
BOOTSTRAPDIR = $(SRCTOP)/bootstrap
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
pkgdatadir = @datadir@/@PACKAGE@

# No configuration needed from here

VPATH = $(SRCTOP)

ALICEC0 = sml @SMLload=$(BOOTSTRAPDIR)/alicec-seam
ALICEC1 = ALICE_HOME=build1/install ${bindir}/alicec --seam
ALICEC2 = ALICE_HOME=build1/install ${bindir}/alicec --seam

ALICEC_EXTRA_OPTS = --no-warn-conventions
ALICEC_OPTS = --check-intermediate --implicit-import-file - $(ALICEC_EXTRA_OPTS)

ALICELINK1 = ALICE_HOME=build1/install ${bindir}/alicelink
ALICELINK2 = ALICE_HOME=build1/install ${bindir}/alicelink

ALICELINK_OPTS = -v

ALICEDEP = sml @SMLload=$(BOOTSTRAPDIR)/alicedep

OZC = ozc
MLLEX = ml-lex
MLYACC = ml-yacc
M4 = m4

##
## Enumerate All Files Making Up the Source Tree
##

LIBSYSTEMNATIVES0 = \
	Config IODesc OS Unix CommandLine Component Debug Foreign Socket Rand \
        Reflect
LIBUTILITYNATIVES0 = \
	Cell Addr
LIBNATIVES =

LIBFUNDAMENTALSOURCES0 = \
	Pervasive.aml ToplevelTypes.aml ToplevelValues.aml \
	Core.aml ALT-sig.aml ARRAY-sig.aml ARRAY2-sig.aml ARRAY_SLICE-sig.aml \
	BOOL-sig.aml BYTE-sig.aml \
	CHAR-sig.aml FUTURE-sig.aml GENERAL-sig.aml HOLE-sig.aml \
	IEEE_REAL-sig.aml INTEGER-sig.aml LIST-sig.aml LIST_PAIR-sig.aml \
	LOCK-sig.aml MATH-sig.aml MONO_ARRAY-sig.aml MONO_VECTOR-sig.aml \
	MONO_ARRAY_SLICE-sig.aml MONO_VECTOR_SLICE-sig.aml \
	OPTION-sig.aml PACK_REAL-sig.aml PAIR-sig.aml PROMISE-sig.aml \
	REAL-sig.aml REF-sig.aml STRING-sig.aml \
	STRING_CVT-sig.aml SUBSTRING-sig.aml \
	TEXT-sig.aml THREAD-sig.aml TIME-sig.aml \
	VECTOR-sig.aml VECTOR_PAIR-sig.aml VECTOR_SLICE-sig.aml \
	WORD-sig.aml PACKAGE-sig.aml \
	Alt.aml Array.aml Array2.aml ArraySlice.aml Bool.aml Byte.aml \
	Char.aml \
	CharArray.aml CharArraySlice.aml CharVector.aml CharVectorSlice.aml \
	Future.aml General.aml Hole.aml IEEEReal.aml Int.aml LargeInt.aml \
	LargeReal.aml LargeWord.aml List.aml ListPair.aml Lock.aml Math.aml \
	MkRow.aml MkVector.aml MkArray.aml MkMonoVector.aml MkMonoArray.aml \
	MkSlice.aml MkVectorSlice.aml MkArraySlice.aml \
	MkMonoVectorSlice.aml MkMonoArraySlice.aml \
	MkWord.aml Option.aml Pair.aml \
	Position.aml Promise.aml Real.aml Ref.aml String.aml \
	StringCvt.aml Substring.aml \
	Text.aml Thread.aml Time.aml Toplevel.aml \
	Vector.aml VectorPair.aml VectorSlice.aml WideChar.aml \
	WideCharArray.aml WideCharArraySlice.aml WideCharVector.aml \
	WideCharVectorSlice.aml WideString.aml WideSubstring.aml WideText.aml \
	Word.aml Word8.aml Word8Array.aml Word8ArraySlice.aml \
	Word8Vector.aml Word8VectorSlice.aml Word31.aml \
	Package.aml ByNeed.aml
LIBDATASOURCES0 = \
	ATOM-sig.aml Atom.aml WideAtom.aml \
	STAMP-sig.aml MkStamp.aml GLOBAL_STAMP-sig.aml GlobalStamp.aml \
	HASHABLE-sig.aml ORDERED-sig.aml \
	SET-sig.aml MAP-sig.aml MkRedBlackSet.aml MkRedBlackMap.aml \
	IMP_SET-sig.aml IMP_MAP-sig.aml MkHashImpSet.aml MkHashImpMap.aml \
	MkRedBlackImpSet.aml MkRedBlackImpMap.aml \
	STACK-sig.aml Stack.aml STREAM-sig.aml Stream.aml
LIBSYSTEMSOURCES0 = \
	$(LIBSYSTEMNATIVES0:%=Unsafe%.asig) UnsafeValue.asig \
	CONFIG-sig.aml IO-sig.aml IO.aml PRIM_IO-sig.aml PrimIO.aml \
	BinPrimIO.aml TextPrimIO.aml STREAM_IO-sig.aml StreamIO.aml \
	IMPERATIVE_IO-sig.aml ImperativeIO.aml BIN_IO-sig.aml BinIO.aml \
	TEXT_TRANSLATOR-sig.aml MkTextTranslator.aml TEXT_STREAM_IO-sig.aml \
	TEXT_IO-sig.aml TextIO.aml IO_DESC-sig.aml OS_FILE_SYS-sig.aml \
	OS_IO-sig.aml OS_PATH-sig.aml OS_PROCESS-sig.aml OS-sig.aml UNIX-sig.aml \
	COMMAND_LINE-sig.aml COMPONENT-sig.aml DEBUG-sig.aml FOREIGN-sig.aml \
	SOCKET-sig.aml RAND-sig.aml REFLECT-sig.aml \
	$(LIBSYSTEMNATIVES0:%=%.aml) \
	PRINT-sig.aml Print.aml PICKLE-sig.aml Pickle.aml URL-sig.aml Url.aml \
	HTTP-sig.aml Http.aml HTTP_SERVER-sig.aml HttpServer.aml \
	HTTP_CLIENT-sig.aml HttpClient.aml \
	RESOLVER_HANDLER-sig.aml RESOLVER-sig.aml Resolver.aml \
	URL_MAP-sig.aml UrlMap.aml COMPONENT_MANAGER-sig.aml \
	ComponentManager.aml Boot.aml PP_VALUE-sig.aml PPValue.aml \
	PP_COMPONENT-sig.aml PPComponent.aml \
	UnsafeDebugger.asig DEBUGGER-sig.aml Debugger.aml
LIBUTILITYSOURCES0 = \
	$(LIBUTILITYNATIVES0:%=Unsafe%.asig) \
	SCOPED_IMP_SET-sig.aml MkScopedImpSet.aml SCOPED_IMP_MAP-sig.aml \
	MkScopedImpMap.aml \
	CELL-sig.aml \
	DEPTH_FIRST_SEARCH-sig.aml MkDepthFirstSearch.aml \
	PRETTY_PRINT-sig.aml PrettyPrint.aml \
	RANDOM-sig.aml Random.aml STAT-sig.aml Stat.aml CTRL-sig.aml Ctrl.aml \
	$(LIBUTILITYNATIVES0:%=%.aml)
LIBRTTSOURCES0 = \
	NAME-sig.aml Name.aml LABEL-sig.aml Label.aml LabelSet.aml \
	PATH-sig.aml Path.aml PathSet.aml PathMap.aml \
	FIXITY-sig.aml Fixity.aml TYPE-sig.aml Type.aml INF-sig.aml Inf.aml \
	PERVASIVE_TYPE-sig.aml MkPervasiveType.aml PervasiveType.aml \
	PP_MISC-sig.aml PPMisc.aml PP_PATH-sig.aml PPPath.aml \
	PP_TYPE-sig.aml PPType.aml PP_INF-sig.aml PPInf.aml
LIBMLYACCSOURCES0 = base-sig.aml join.aml lrtable.aml stream.aml parser2.aml

LIBSOURCES0 = \
	$(LIBDATASOURCES0:%=data/%) \
	$(LIBSYSTEMSOURCES0:%=system/%) \
	$(LIBUTILITYSOURCES0:%=utility/%) \
	$(LIBRTTSOURCES0:%=rtt/%) \
	$(LIBMLYACCSOURCES0:%=ml-yacc/%)
LIBSOURCES = \
	$(LIBFUNDAMENTALSOURCES0:%=lib/fundamental/%) \
	$(LIBSOURCES0:%=lib/%)

DEBUGGERSOURCES0 = \
	DEBUGGER_CONTROLS-sig.aml DebuggerControls.aml VIEW-sig.aml \
	EnvView.aml SourceView.aml TextView.aml EVENTLISTENER-sig.aml \
	Eventlistener.aml MODEL-sig.aml Model.aml STREAM-sig.aml Stream.aml

DEBUGGERSOURCES = $(DEBUGGERSOURCES0:%=debugger/%)

COMPILERINFRASTRUCTURESOURCES0 = \
	CRASH-sig.aml Crash.aml SOURCE-sig.aml Source.aml ERROR-sig.aml \
	Error.aml SWITCHES-sig.aml MkSwitches.aml CONTEXT-sig.aml \
	REPRESENTATION-sig.aml PHASE-sig.aml PHASE_ERROR-sig.aml \
	ComposePhases.aml MkTracingPhase.aml MkResultDumpingPhase.aml \
	MkContextDumpingPhase.aml EmptyContext.aml TARGET-sig.aml \
	Target.aml BACKEND_SPECIFIC-sig.aml MkHashScopedImpSet.aml \
	MkHashScopedImpMap.aml IntMap.aml StringMap.aml PP_MISC-sig.aml \
	PPMisc.aml
COMPILERINFRASTRUCTURESOURCES = \
	$(COMPILERINFRASTRUCTURESOURCES0:%=compiler/infrastructure/%)

COMPILERCOMMONSOURCES0 = \
	Stamp.aml StampSet.aml StampMap.aml INTERMEDIATE_GRAMMAR-sig.aml \
	MkIntermediateGrammar.aml PP_INTERMEDIATE_GRAMMAR-sig.aml \
	MkPPIntermediateGrammar.aml IntermediateGrammar.aml \
	CHECK_INTERMEDIATE-sig.aml CheckIntermediate.aml
COMPILERCOMMONSOURCES = $(COMPILERCOMMONSOURCES0:%=compiler/common/%)

COMPILERFRONTENDCOMMONSOURCES0 = \
	FIXITY_LIB-sig.aml FixityLib.aml \
	LABEL_LIB-sig.aml LabelLib.aml \
	PATH_LIB-sig.aml PathLib.aml \
	TYPE_LIB-sig.aml TypeLib.aml \
	PERVASIVE_TYPE_LIB-sig.aml PervasiveTypeLib.aml \
	INF_LIB-sig.aml InfLib.aml \
	NAME_TRANSLATION-sig.aml NameTranslation.aml \
	LABEL_TRANSLATION-sig.aml LabelTranslation.aml \
	TYPE_TRANSLATION-sig.aml TypeTranslation.aml \
	INTERMEDIATE_CONS-sig.aml IntermediateCons.aml \
	ABSTRACT_GRAMMAR-sig.aml MkAbstractGrammar.aml \
	PP_ABSTRACT_GRAMMAR-sig.aml MkPPAbstractGrammar.aml \
	AbstractGrammar.aml TypedGrammar.aml \
	ENV-sig.aml Env.aml USE_ENV-sig.aml UseEnv.aml \
	ELABORATION_ERROR-sig.aml ElaborationError.aml \
	ELABORATION_PHASE-sig.aml MkElaborationPhase.aml \
	TRANSLATION_ENV-sig.aml TranslationEnv.aml \
	TRANSLATION_PHASE-sig.aml MkTranslationPhase.aml MkFrontendCommon.aml
COMPILERFRONTENDCOMMONSOURCES = \
	$(COMPILERFRONTENDCOMMONSOURCES0:%=compiler/frontend-common/%)

COMPILERFRONTENDSMLSOURCES0 = \
	LAB-sig.aml Lab.aml ID-sig.aml MkId.aml Ids.aml SCON-sig.aml SCon.aml \
	INPUT_GRAMMAR-sig.aml MkInputGrammar.aml InputGrammar.aml \
	PARSING_ERROR-sig.aml ParsingError.aml ABSTRACTION_ERROR-sig.aml \
	AbstractionError.aml INFIX-sig.aml Infix.aml BIND_ENV-sig.aml \
	BindEnv.aml BIND_ENV_FROM_SIG-sig.aml BindEnvFromSig.aml \
	SHARING-sig.aml Sharing.aml ABSTRACTION_PHASE-sig.aml \
	MkAbstractionPhase.aml DERIVED_FORMS-sig.aml PARSER-sig.aml \
	Parser.aml MkDerivedForms.aml LEXER_ERROR-sig.aml MkLexerError.aml \
	Lexer.aml MkCountPosLexer.aml PARSING_PHASE-sig.aml \
	MkParsingPhase.aml MkFrontendSML.aml
COMPILERFRONTENDSMLSOURCES = \
	$(COMPILERFRONTENDSMLSOURCES0:%=compiler/frontend-sml/%)

COMPILERBACKENDCOMMONSOURCES0 = \
	LABEL_SORT-sig.aml LabelSort.aml FLAT_GRAMMAR-sig.aml \
	FlatGrammar.aml OUTPUT_FLAT_GRAMMAR-sig.aml OutputFlatGrammar.aml \
	ARITY-sig.aml Arity.aml INTERMEDIATE_AUX-sig.aml IntermediateAux.aml \
	SIMPLIFY_MATCH-sig.aml SimplifyMatch.aml SIMPLIFY_REC-sig.aml \
	SimplifyRec.aml FLATTENING_PHASE-sig.aml MkFlatteningPhase.aml \
	PRIM_OPS-sig.aml PrimOps.aml VALUE_PROPAGATION_PHASE-sig.aml \
	MkValuePropagationPhase.aml LIVENESS_ANALYSIS_PHASE-sig.aml \
	MkLivenessAnalysisPhase.aml MkBackendCommon.aml
COMPILERBACKENDCOMMONSOURCES = \
	$(COMPILERBACKENDCOMMONSOURCES0:%=compiler/backend-common/%)

COMPILERBACKENDMOZARTSOURCES0 = \
	CodeGen.oz CodeGenPhase.oz \
	CodeGenPhase.asig MkBackendMozart.aml
COMPILERBACKENDMOZARTSOURCES = \
	$(COMPILERBACKENDMOZARTSOURCES0:%=compiler/backend-mozart/%)

COMPILERBACKENDDOTNETSOURCES0 = \
	SKELETON-sig.aml Skeleton.aml IL-sig.aml IL.aml System.aml \
	Alice.aml BUILTINS-sig.aml Builtins.aml CODE_STORE-sig.aml \
	CodeStore.aml CODE_GEN_PHASE-sig.aml CodeGenPhase.aml \
	MkBackendDotNet.aml
COMPILERBACKENDDOTNETSOURCES = \
	$(COMPILERBACKENDDOTNETSOURCES0:%=compiler/backend-dotnet/%)

COMPILERBACKENDSEAMSOURCES0 = \
	PRIM_PICKLE-sig.aml PrimPickle.aml VALUE-sig.aml Value.aml \
	ABSTRACT_CODE_GRAMMAR-sig.aml MkAbstractCodeGrammar.aml \
	AbstractCodeGrammar.aml OUTPUT_PICKLE-sig.aml OutputPickle.aml \
	ENVIRONMENT-sig.aml MkEnvironment.aml LIVENESS-sig.aml \
	MkLiveness.aml MkCodeGenContext.aml CODE_GEN_PHASE-sig.aml \
	MkCodeGenPhase.aml MkBackendSeam.aml
COMPILERBACKENDSEAMSOURCES = \
	$(COMPILERBACKENDSEAMSOURCES0:%=compiler/backend-seam/%)

COMPILERTOPSOURCES0 = \
	COMPILER-sig.aml MkCompiler.aml \
	DEPENDENCY-sig.aml Dependency.aml \
	RECURSIVE_COMPILER-sig.aml MkRecursiveCompiler.aml \
	SMLToMozartRecursiveCompiler.aml \
	SMLToDotNetRecursiveCompiler.aml \
	SMLToSeamRecursiveCompiler.aml \
	OPTION_PARSER-sig.aml MkOptionParser.aml \
	BATCH_COMPILER-sig.aml MkBatchCompiler.aml \
	SMLToMozartBatchCompiler.aml \
	SMLToDotNetBatchCompiler.aml \
	SMLToSeamBatchCompiler.aml \
	INTERACTIVE_TOPLEVEL-sig.aml MkToplevel.aml \
	SMLToMozartToplevel.aml SMLToSeamToplevel.aml
COMPILERTOPSOURCES = $(COMPILERTOPSOURCES0:%=compiler/top/%)

COMPILERSOURCES0 = CompilerMain.aml CompileServerMain.aml ToplevelMain.aml
COMPILERSOURCES = \
	$(COMPILERINFRASTRUCTURESOURCES) $(COMPILERCOMMONSOURCES) \
	$(COMPILERFRONTENDCOMMONSOURCES) $(COMPILERFRONTENDSMLSOURCES) \
	$(COMPILERBACKENDCOMMONSOURCES) $(COMPILERBACKENDMOZARTSOURCES) \
	$(COMPILERBACKENDDOTNETSOURCES) $(COMPILERBACKENDSEAMSOURCES) \
	$(COMPILERTOPSOURCES) $(COMPILERSOURCES0:%=compiler/%)

TOOLSLINKERSOURCES0 = \
	MY_COMPONENT-sig.aml MyComponent.aml LINK-sig.aml Link.aml Main.aml
TOOLSLINKERSOURCES = $(TOOLSLINKERSOURCES0:%=tools/linker/%)

TOOLSDEPENDSOURCES0 = \
	LEXER_ERROR-sig.aml MkLexerError.aml SML_ERROR-sig.aml SMLError.aml \
	SMLLexer.aml MkCountPosLexer.aml SMLParser.grm.aml SML_PARSER-sig.aml \
	PARSER-sig.aml SMLParser.aml ANALYZER-sig.aml MkAnalyzer.aml \
	MAKE_DEPEND-sig.aml MkMakeDepend.aml MakeDepend.aml Main.aml
TOOLSDEPENDSOURCES = $(TOOLSDEPENDSOURCES0:%=tools/depend/%)

TOOLSSOURCES = \
	$(TOOLSLINKERSOURCES) $(TOOLSDEPENDSOURCES)

ALLSOURCES = \
	$(VMSOURCES) $(LIBSOURCES) $(COMPILERSOURCES) $(TOOLSSOURCES)

SOURCEDIRS = \
	lib lib/fundamental lib/data lib/system lib/utility lib/rtt lib/ml-yacc \
	compiler compiler/infrastructure compiler/common compiler/top \
	compiler/frontend-common compiler/frontend-sml \
	compiler/backend-common compiler/backend-mozart \
	compiler/backend-dotnet compiler/backend-seam \
	tools/linker tools/depend

##
## Main Target and Generally Applicable Rules
##

.PHONY: all depend install clean veryclean distclean
.PHONY: build1-all build1-install
.PHONY: build2-all build2-install
.PHONY: build3-all build3-install

all: build3-install

# Build anything using the compiler generated in pass 1
alicec1-%: build1-install
	$(MAKE) ALICEC0=$(ALICEC1) $*

%.lex.sml: %.lex
	$(MLLEX) $<

%.grm.sml: %.grm
	$(MLYACC) $<

%.grm.sig: %.grm.sml ;

########################################################################
### BUILD 1
########################################################################

BUILD1DIRS = build1 $(SOURCEDIRS:%=build1/%)
BUILD1SOURCES = \
	build1/Build1.aml build1/lib/fundamental/RTT.aml \
	$(ALLSOURCES:%=build1/%) \
	build1/tools/Linker.aml

INSTALL1DIRS = build1/install build1/install/compiler
INSTALL1COMPILERFILES = CompilerMain.stc
INSTALL1FILES = \
	build1/install/tools/Linker.stc \
	$(INSTALL1COMPILERFILES:%=build1/install/compiler/%) \
	$(LIBNATIVES:%=build1/install/%)

##
## Creating the Source Tree for Build 1
##

build1-src: $(BUILD1DIRS) $(BUILD1SOURCES)

$(BUILD1DIRS):
	mkdir -p $@

build1/%.oz: %.oz
	cp $< $@

build1/%.cc: %.cc
	cp $< $@

Rel1.import: lib/fundamental/Fundamental.import
	sed 's|x-alice:/|../|g' < $< | tr '\n' ' ' > $@

Rel2.import: lib/fundamental/Fundamental.import
	sed 's|x-alice:/|../../|g' < $< | tr '\n' ' ' > $@

build1/Build1.aml: Build1.aml
	cp $< $@

build1/lib/fundamental/RTT.aml: lib/fundamental/DummyRTT.aml
	cp $< $@

build1/lib/fundamental/%.aml: lib/fundamental/%.aml
	cp $< $@

build1/lib/fundamental/%.aml: lib/fundamental/%.aml.m4
	$(M4) $< > $@

build1/lib/%.asig: lib/%.asig Rel2.import
	cat Rel2.import $< > $@

build1/lib/%.aml: lib/%.aml Rel2.import
	cat Rel2.import $< > $@

build1/compiler/infrastructure/%.aml: compiler/infrastructure/%.aml Rel2.import
	cat Rel2.import $< > $@

build1/compiler/common/%.aml: compiler/common/%.aml Rel2.import
	cat Rel2.import $< > $@

build1/compiler/frontend-common/%.aml: compiler/frontend-common/%.aml \
	Rel2.import
	cat Rel2.import $< > $@

build1/compiler/frontend-sml/%.aml: compiler/frontend-sml/%.aml Rel2.import
	cat Rel2.import $< > $@

build1/compiler/frontend-sml/Lexer.lex: compiler/frontend-sml/Lexer.lex
	cp $< $@

build1/compiler/frontend-sml/Lexer.aml: \
	build1/compiler/frontend-sml/Lexer.lex.sml \
	compiler/frontend-sml/Lexer.aml.header Rel2.import
	sed s/Unsafe.//g $< > $@.temp
	cat Rel2.import $(SRCTOP)/compiler/frontend-sml/Lexer.aml.header $@.temp > $@
	rm $@.temp

build1/compiler/frontend-sml/Parser.grm: compiler/frontend-sml/Parser.grm
	cp $< $@

build1/compiler/frontend-sml/PARSER-sig.aml: \
	build1/compiler/frontend-sml/Parser.grm.sig \
	Rel2.import compiler/frontend-sml/PARSER-sig.aml.header fixparser.awk
	(cat Rel2.import $(SRCTOP)/compiler/frontend-sml/PARSER-sig.aml.header && \
	 awk -f $(SRCTOP)/fixparser.awk < $<) > $@ || rm $@

build1/compiler/frontend-sml/Parser.aml: \
	build1/compiler/frontend-sml/Parser.grm.sml \
	Rel2.import compiler/frontend-sml/Parser.aml.header
	cat Rel2.import $(SRCTOP)/compiler/frontend-sml/Parser.aml.header $< > $@

build1/compiler/backend-common/%.aml: compiler/backend-common/%.aml Rel2.import
	cat Rel2.import $< > $@

build1/compiler/backend-mozart/%.aml: compiler/backend-mozart/%.aml Rel2.import
	cat Rel2.import $< > $@

build1/compiler/backend-mozart/%.asig: compiler/backend-mozart/%.asig \
	Rel2.import
	cat Rel2.import $< > $@

build1/compiler/backend-dotnet/%.aml: compiler/backend-dotnet/%.aml Rel2.import
	cat Rel2.import $< > $@

build1/compiler/backend-seam/%.aml: compiler/backend-seam/%.aml \
	Rel2.import
	cat Rel2.import $< > $@

build1/compiler/top/%.aml: compiler/top/%.aml Rel2.import
	cat Rel2.import $< > $@

build1/compiler/ToplevelMain.aml: compiler/ToplevelMainSeam.aml Rel1.import
	cat Rel1.import $< > $@

build1/compiler/%.aml: compiler/%.aml Rel1.import
	cat Rel1.import $< > $@

build1/tools/Linker.aml: tools/linker/Build1Linker.aml Rel1.import
	cat Rel1.import $< > $@

build1/tools/linker/%.aml: tools/linker/%.aml Rel2.import
	cat Rel2.import $< > $@

build1/tools/depend/%.aml: tools/depend/%.aml Rel2.import
	cat Rel2.import $< > $@

build1/tools/depend/SMLLexer.lex: tools/depend/SMLLexer.lex
	cp $< $@

build1/tools/depend/SMLLexer.aml: build1/tools/depend/SMLLexer.lex.sml \
	tools/depend/SMLLexer.aml.header Rel2.import
	sed s/Unsafe.//g $< > $@.temp
	cat Rel2.import $(SRCTOP)/tools/depend/SMLLexer.aml.header $@.temp > $@
	rm $@.temp

build1/tools/depend/SMLParser.grm: tools/depend/SMLParser.grm
	cp $< $@

build1/tools/depend/SML_PARSER-sig.aml: build1/tools/depend/SMLParser.grm.sig \
	Rel2.import tools/depend/SML_PARSER-sig.aml.header fixparser.awk
	(cat Rel2.import $(SRCTOP)/tools/depend/SML_PARSER-sig.aml.header && \
	 awk -f $(SRCTOP)/fixparser.awk < $<) > $@ || rm $@

build1/tools/depend/SMLParser.grm.aml: build1/tools/depend/SMLParser.grm.sml \
	Rel2.import tools/depend/SMLParser.grm.aml.header
	cat Rel2.import $(SRCTOP)/tools/depend/SMLParser.grm.aml.header $< > $@

##
## Performing Build 1
##

build1-all: build1-src build1/Build1.stc

build1/%.stc: build1/%.aml
	$(ALICEC0) $(ALICEC_OPTS) --recursive-compilation \
	--trace-component-access --no-rtt -c $< -o $@

##
## Installing Build 1
##

build1-install: build1-all $(INSTALL1DIRS) $(INSTALL1FILES)

$(INSTALL1DIRS):
	mkdir -p $@

build1/install/compiler/CompilerMain.stc:
	(cd build1 && tar cf - `find . -name '*.stc'`) | \
	(cd build1/install && tar xf -)

build1/install/tools/Linker.stc:

########################################################################
### BUILD 2
########################################################################

BUILD2DIRS = \
	build2 build2/lib build2/lib/fundamental build2/lib/data \
	build2/lib/system build2/lib/utility build2/lib/rtt build2/lib/ml-yacc
BUILD2SOURCES = \
	build2/lib/fundamental/RTT.aml build2/lib/rtt/RTT.aml \
	$(LIBSOURCES:%=build2/%)

##
## Creating the Source Tree for Build 2
##

build2-src: build1-install $(BUILD2DIRS) $(BUILD2SOURCES)

$(BUILD2DIRS):
	mkdir -p $@

build2/lib/fundamental/RTT.aml: build1/lib/fundamental/RTT.aml
	cp $< $@

build2/%.aml: build1/%.aml
	cp $< $@

build2/%.asig: build1/%.asig
	cp $< $@

build2/alicec.import: lib/fundamental/Fundamental.import lib/Other.import
	cat $^ > $@

$(LIBNATIVES:%=build2/%): build2/%: build1/%
	cp $< $@

##
## Performing Build 2
##

build2-all: build2-src build2/lib/rtt/LinkedRTT.stc

build2/%.stc: build2/%.aml
	$(ALICEC1) $(ALICEC_OPTS) --no-rtt -c $< -o $@

build2/lib/rtt/LinkedRTT.stc: build2/lib/rtt/RTT.stc
	$(ALICELINK1) $(ALICELINK_OPTS) build2/lib/rtt/RTT \
	--exclude build2/lib/utility/Unsafe \
	--exclude build2/lib/system/Unsafe \
	--include build2 --rewrite "build2/?{x}=x-alice:/?{x}" -o $@

########################################################################
### BUILD 3
########################################################################

BUILD3DIRS = build3 $(SOURCEDIRS:%=build3/%) build3/lib/debugger
BUILD3SOURCES0 = $(ALLSOURCES:%=build3/%)
BUILD3DEBUGGERSOURCES0 = $(DEBUGGERSOURCES:%=build3/lib/%)
BUILD3SOURCES = $(BUILD3SOURCES0) $(BUILD3DEBUGGERSOURCES0)

INSTALL3DIRS = \
	build3/install \
	build3/install/include \
	build3/install/include/store \
	build3/install/include/adt \
	build3/install/include/generic \
	build3/install/include/alice \
	build3/install/lib \
	build3/install/lib/fundamental \
	build3/install/lib/data \
	build3/install/lib/debugger \
	build3/install/lib/system \
	build3/install/lib/utility \
	build3/install/lib/rtt \
	build3/install/lib/ml-yacc \
	build3/install/compiler \
	build3/install/compiler/top \
	build3/install/tools
#---**
INSTALL3TOPFILES = alicec.import alice.import COPYING
INSTALL3LIBFILES = \
	$(LIBSOURCES0:%.aml=%.stc) \
	$(DEBUGGERSOURCES:%.aml=%.stc) \
	fundamental/Pervasive.stc fundamental/Core.stc \
	fundamental/PACKAGE-sig.stc fundamental/Package.stc
INSTALL3COMPILERFILES = CompilerMain.stc ToplevelMain.stc
INSTALL3COMPILERTOPFILES = \
	SMLToSeamRecursiveCompiler.stc
INSTALL3TOOLSFILES = Linker.stc Depend.stc
INSTALL3FILES = \
	$(INSTALL3TOPFILES:%=build3/install/%) \
	$(INSTALL3LIBFILES:%=build3/install/lib/%) \
	$(INSTALL3COMPILERFILES:%=build3/install/compiler/%) \
	$(INSTALL3COMPILERTOPFILES:%=build3/install/compiler/top/%) \
	$(INSTALL3TOOLSFILES:%=build3/install/tools/%)

##
## Creating the Source Tree for Build 3
##

$(BUILD3DIRS):
	mkdir -p $@

$(BUILD3SOURCES0): build3/%: build1/%
	cp $< $@

build3/lib/debugger/%.aml: lib/debugger/%.aml Rel2.import
	cat Rel2.import $< > $@

##
## Performing Build 3
##

build3-all: build2-all $(BUILD3DIRS) $(BUILD3SOURCES) \
	$(LIBNATIVES:%=build3/%) \
	build3/lib/fundamental/Core.stc \
	build3/lib/system/Boot.stc \
	build3/compiler/LinkedCompilerMain.stc \
	build3/compiler/LinkedToplevelMain.stc \
	build3/compiler/top/LinkedSMLToSeamRecursiveCompiler.stc

build3/lib/fundamental/RTT.stc: build2/lib/rtt/LinkedRTT.stc
	cp $< $@

build3/alicec.import: lib/fundamental/Fundamental.import lib/Other.import
	cat $^ > $@

build3/alice.import: lib/fundamental/Fundamental.import lib/Other.import \
	Toplevel.import
	cat $^ > $@

build3/%.stc: build3/%.aml
	$(ALICEC2) $(ALICEC_OPTS) -c $< -o $@

build3/lib/fundamental/LinkedPervasive.stc: \
	build3/lib/fundamental/Pervasive.stc
	$(ALICELINK2) $(ALICELINK_OPTS) \
	--exclude build3/lib/utility/Unsafe \
	--exclude build3/lib/system/Unsafe \
	--include build3 \
	--rewrite "build3/?{x}=../../?{x}" \
	--rewrite "x-alice:/?{x}=../../?{x}" \
	build3/lib/fundamental/Pervasive -o $@

build3/compiler/LinkedCompilerMain.stc: build3/compiler/CompilerMain.stc
	$(ALICELINK2) $(ALICELINK_OPTS) --rewrite "build3/?{x}=../?{x}" \
	--exclude build3/compiler/top/SMLToMozartRecursiveCompiler \
	--exclude build3/compiler/top/SMLToDotNetRecursiveCompiler \
	--exclude build3/compiler/top/SMLToSeamRecursiveCompiler \
	--include build3/compiler \
	build3/compiler/CompilerMain -o $@

build3/compiler/LinkedToplevelMain.stc: build3/compiler/ToplevelMain.stc
	$(ALICELINK2) $(ALICELINK_OPTS) --rewrite "build3/?{x}=../?{x}" \
	--exclude build3/compiler/top/SMLToMozartRecursiveCompiler \
	--exclude build3/compiler/top/SMLToDotNetRecursiveCompiler \
	--exclude build3/compiler/top/SMLToSeamRecursiveCompiler \
	--include build3/compiler \
	build3/compiler/ToplevelMain -o $@

build3/compiler/top/LinkedSMLToSeamRecursiveCompiler.stc: \
	build3/compiler/top/SMLToSeamRecursiveCompiler.stc
	$(ALICELINK2) $(ALICELINK_OPTS) --rewrite "build3/?{x}=../../?{x}" \
	--include build3/compiler \
	build3/compiler/top/SMLToSeamRecursiveCompiler -o $@

build3/tools/linker/LinkedMain.stc: $(TOOLSLINKERSOURCES:%.aml=build3/%.stc)
	$(ALICELINK2) $(ALICELINK_OPTS) --rewrite "build3/?{x}=../?{x}" \
	--include build3/tools/linker \
	build3/tools/linker/Main -o $@

build3/tools/depend/LinkedMain.stc: $(TOOLSDEPENDSOURCES:%.aml=build3/%.stc)
	$(ALICELINK2) $(ALICELINK_OPTS) --rewrite "build3/?{x}=../?{x}" \
	--include build3/tools/depend \
	build3/tools/depend/Main -o $@

##
## Installing Build 3
##

build3-install: build3-all $(INSTALL3DIRS) $(INSTALL3FILES)

$(INSTALL3DIRS):
	mkdir -p $@

build3/install/include/%: %
	install -c -m 444 $< $@

build3/install/%.import: build3/%.import
	install -c -m 444 $< $@

build3/install/COPYING: ../COPYING
	install -c -m 444 $< $@

build3/install/lib/fundamental/Pervasive.stc: \
	build3/lib/fundamental/LinkedPervasive.stc
	install -c -m 444 $< $@

build3/install/lib/fundamental/Core.stc: \
	build3/lib/fundamental/Core.stc
	install -c -m 444 $< $@

build3/install/lib/%: build3/lib/%
	install -c -m 444 $< $@

build3/install/compiler/%: build3/compiler/Linked%
	install -c -m 444 $< $@

build3/install/compiler/top/%: build3/compiler/top/Linked%
	install -c -m 444 $< $@

build3/install/tools/Linker.stc: build3/tools/linker/LinkedMain.stc
	install -c -m 444 $< $@

build3/install/tools/Depend.stc: build3/tools/depend/LinkedMain.stc
	install -c -m 444 $< $@

########################################################################
### THINGS OF A GLOBAL NATURE
########################################################################

##
## Automatic Dependency Management
##

BUILD2ALICESOURCES = $(filter %.aml, $(BUILD2SOURCES))
BUILD3ALICESOURCES = $(filter %.aml, $(BUILD3SOURCES))

depend: $(BUILD1DIRS) $(BUILD2DIRS) $(BUILD3DIRS) \
	$(BUILD2SOURCES) $(BUILD3SOURCES)
	$(ALICEDEP) --seam $(BUILD2ALICESOURCES) $(BUILD3ALICESOURCES) \
	> Makefile.bootstrap.depend

-include Makefile.bootstrap.depend

##
## Global Installation
##

INSTALLDIRS = \
	${prefix} \
	${pkgdatadir}/lib \
	${pkgdatadir}/lib/fundamental \
	${pkgdatadir}/lib/data \
	${pkgdatadir}/lib/debugger \
	${pkgdatadir}/lib/system \
	${pkgdatadir}/lib/utility \
	${pkgdatadir}/lib/rtt \
	${pkgdatadir}/lib/ml-yacc \
	${pkgdatadir}/compiler \
	${pkgdatadir}/compiler/top \
	${pkgdatadir}/tools
INSTALLFILES = \
	$(INSTALL3TOPFILES:%=${pkgdatadir}/%) \
	$(INSTALL3LIBFILES:%=${pkgdatadir}/lib/%) \
	$(INSTALL3COMPILERFILES:%=${pkgdatadir}/compiler/%) \
	$(INSTALL3COMPILERTOPFILES:%=${pkgdatadir}/compiler/top/%) \
	$(INSTALL3TOOLSFILES:%=${pkgdatadir}/tools/%)

install: build3-install $(INSTALLDIRS) $(INSTALLFILES)

$(INSTALLDIRS):
	mkdir -p $@

$(INSTALL3TOPFILES:%=${pkgdatadir}/%): ${pkgdatadir}/%: build3/install/%
	install -c -m 444 $< $@

$(INSTALL3LIBFILES:%=${pkgdatadir}/lib/%): ${pkgdatadir}/%: build3/install/%
	install -c -m 444 $< $@

$(INSTALL3COMPILERFILES:%=${pkgdatadir}/compiler/%): ${pkgdatadir}/%: \
	build3/install/%
	install -c -m 444 $< $@

$(INSTALL3COMPILERTOPFILES:%=${pkgdatadir}/compiler/top/%): ${pkgdatadir}/%: \
	build3/install/%
	install -c -m 444 $< $@

$(INSTALL3TOOLSFILES:%=${pkgdatadir}/tools/%): ${pkgdatadir}/%: \
	build3/install/%
	install -c -m 444 $< $@

##
## Cleaning up
##

clean:
	-rm -f Rel1.import Rel2.import
	-rm -rf build1 build2 build3

veryclean: clean

distclean: veryclean
	-rm -f Makefile.bootstrap.depend
