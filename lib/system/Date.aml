(*
 * Authors:
 *   Benedikt Grundmann <bgrund@ps.uni-sb.de>
 *
 * Copyright:
 *   Benedikt Grundmann, 2004
 *   Code mostly taken from the SML/NJ module, which
 *   is copyrighted by AT&T Bell Laboratories.
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)


(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import signature DATE           from "DATE-sig"
import structure UnsafeDate     from "UnsafeDate"

structure Date : DATE =
struct
    structure LInt  = LargeInt 
    
    exception Date

    datatype weekday = 
        Sun | Mon | Tue | Wed | Thu | Fri | Sat

    datatype month = 
        Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec 

    datatype date = DATE of {
                 day : int,
                 hour : int,
                 isDst : bool option,
                 minute : int,
                 month : month,
                 offset : Time.time option,
                 second : int,
                 wday : weekday,
                 yday : int,
                 year : int
                 }
    type t = date (**)

    fun year (DATE{year, ...}) = year
	fun month (DATE{month, ...}) = month
	fun day (DATE{day, ...}) = day
	fun hour (DATE{hour, ...}) = hour
	fun minute (DATE{minute, ...}) = minute
	fun second (DATE{second, ...}) = second
	fun weekDay (DATE{wday, ...}) = wday
	fun yearDay (DATE{yday, ...}) = yday
	fun isDst (DATE{isDst, ...}) = isDst
	fun offset (DATE{offset,...}) = offset

    fun localOffset () = raise Fail "not yet implemented"

    fun weekDayToInt w =
        case w of
           Sun => 0
         | Mon => 1
         | Tue => 2
         | Wed => 3
         | Thu => 4
         | Fri => 5
         | Sat => 6

   
    fun weekDayFromInt w =
        case w of
           0 => Sun
         | 1 => Mon
         | 2 => Tue
         | 3 => Wed
         | 4 => Thu
         | 5 => Fri
         | 6 => Sat
         | _ => raise Date
   
    fun monthFromInt m =
        case m of
           0 => Jan
         | 1 => Feb
         | 2 => Mar
         | 3 => Apr
         | 4 => May
         | 5 => Jun
         | 6 => Jul
         | 7 => Aug
         | 8 => Sep
         | 9 => Oct
         | 10 => Nov
         | 11 => Dec
         | _  => raise Date

    fun monthToInt m =
        case m of
           Jan => 0
         | Feb => 1
         | Mar => 2
         | Apr => 3
         | May => 4
         | Jun => 5
         | Jul => 6
         | Aug => 7
         | Sep => 8
         | Oct => 9
         | Nov => 10
         | Dec => 11

    
    fun dstToInt NONE       = ~1
      | dstToInt (SOME b)   = if b then 1 else 0

    fun dstFromInt i =
        if i < 0 then NONE
        else if i = 0 then SOME false
        else SOME true


    fun toTm d =
        ( second d
        , minute d
        , hour d
        , day d
        , monthToInt (month d)
        , year d - 1900
        , weekDayToInt (weekDay d)
        , yearDay d
        , dstToInt (isDst d) 
        )

    fun fromTm (second, minute, hour, day, month, year, wday, yday, dst) =
        DATE { day, month = monthFromInt month, year = year + 1900 
             , hour, minute, second
             , wday = weekDayFromInt wday
             , yday 
             , isDst = dstFromInt dst
             , offset = NONE
             }

    val fromTimeLocal   = fromTm o UnsafeDate.fromTimeLocal o Time.toSeconds
    val fromTimeUniv    = fromTm o UnsafeDate.fromTimeUniv o Time.toSeconds
    
    val toTime   = Time.fromSeconds o UnsafeDate.toTime o toTm

    fun fmt fs d = UnsafeDate.fmt (fs, toTm d)

    val toString = UnsafeDate.toString o toTm

end
