(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Andreas Rossberg, 2001-2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Inf               from "../rtt/Inf"
import structure PathMap           from "../rtt/PathMap"
import structure TextIO            from "TextIO"
import structure PrettyPrint       from "../utility/PrettyPrint"
import structure PPPath            from "../rtt/PPPath"
import structure PPType            from "../rtt/PPType"
import structure PPInf             from "../rtt/PPInf"
import structure IO                from "IO"
import structure OS                from "OS"
import structure Reflect           from "Reflect"
import structure Url               from "Url"
import structure Resolver          from "Resolver"
import structure UnsafeComponent   from "UnsafeComponent"
import structure DynMatch          from "DynMatch"
import structure UrlMap            from "UrlMap"
import signature COMPONENT         from "COMPONENT-sig"
import signature COMPONENT_MANAGER from "COMPONENT_MANAGER-sig"


structure Component : COMPONENT =
struct
    nonfix mod
    type inf = Inf.t option
    type mod = Reflect.module

    __primitive type component = "Component.component"
    type t = component
    datatype component' =
	UNEVALUATED of { imports: (string * inf) vector,
			 body:    mod vector -> mod,
			 inf:     inf }
      | EVALUATED of { inf: inf, mod: mod }

    signature CM_COMPONENT = (structure ComponentManager : COMPONENT_MANAGER)
    structure CMSig = lazy Reflect.ReflectSig (signature S = CM_COMPONENT)

    __primitive val cast : 'a -> 'b = "Unsafe.cast"

    exception Sited    = UnsafeComponent.Sited
    exception Corrupt  = UnsafeComponent.Corrupt
    exception NotFound = UnsafeComponent.NotFound
    exception Mismatch = UnsafeComponent.Mismatch
    exception Eval     = UnsafeComponent.Eval
    exception Failure  = UnsafeComponent.Failure
    exception Internal of exn

    val extension = UnsafeComponent.extension

    fun trace (NONE, s)   = ()
      | trace (SOME f, s) =
	(TextIO.output (f, "[component manager] " ^ s ^ "\n");
	 TextIO.flushOut f)

    val defaultLogStream =
	Option.map (fn "" => TextIO.stdErr
		     | s  => TextIO.openOut s handle IO.Io _ =>
			     (trace (SOME TextIO.stdErr,
				     "warning: could not open log file " ^ s ^
				     ", falling back to stderr");
			      TextIO.stdErr))
		   (OS.Process.getEnv "ALICE_TRACE_COMPONENT")

    fun createEvaluated (mod, inf) = cast (EVALUATED {inf, mod}) : component
    fun createUnevaluated (imports, body, inf) =
	cast (UNEVALUATED {imports, body, inf}) : component

    fun fromPackage p =
	let
	    val (mod, j) = Reflect.reflectPackage p
	in
	     createEvaluated (mod, SOME j)
	end

    functor Create (signature S  functor F (CM: COMPONENT_MANAGER): S) =
	let
	    functor Body (CMComp: CM_COMPONENT) = F CMComp.ComponentManager
	    structure Sig = Reflect.ReflectSig (signature S = S)
	    structure Mod = Reflect.Reflect (signature S = CM_COMPONENT -> S
					     structure X = Body)
	    val imports = #[("x-alice:/lib/system/ComponentManager",
			     SOME CMSig.x)]
	    val body' = cast Mod.x
	    val body = fn #[cm] => body' cm
	in
	    (val component = createUnevaluated (imports, body, SOME Sig.x))
	end

    val defaultResolver =
	let
	    val handlers =
		case OS.Process.getEnv "ALICE_LOAD" of
		    SOME s => Resolver.Handler.parse s
		  | NONE => [Resolver.Handler.default]
	in
	    Resolver.resolver {name = "load", handlers, memoize = true}
	end

    fun load' (logStream, resolver) url =
	case Resolver.localize resolver url of
	    SOME (Resolver.FILE name) =>
		(UnsafeComponent.load name
		 handle UnsafeComponent.CorruptInternal =>
		     UnsafeComponent.linkNative name
		     handle cause as UnsafeComponent.Native msg =>
			    (trace (logStream, "linkNative: " ^ msg);
			     raise IO.Io {name, function = "load", cause})
			  | UnsafeComponent.CorruptInternal =>
			    (trace (logStream,
				    "linkNative: could not resolve symbol");
			     raise IO.Io {name, function = "load",
					  cause = Corrupt}))
	  | SOME (Resolver.STRING string) =>
		(UnsafeComponent.unpack_ (UnsafeComponent.unzip string)
		 handle (UnsafeComponent.CorruptInternal | UnsafeComponent.Corrupt) =>
		            raise IO.Io {name = Url.toStringRaw url,
					 function = "load", cause = Corrupt}
		      | cause =>
			    raise IO.Io {name = Url.toStringRaw url,
					 function = "load", cause})
	  | NONE => raise IO.Io {name = Url.toStringRaw url,
				 function = "load", cause = NotFound}

    val load = load' (defaultLogStream, defaultResolver)

    fun save (name, component) =
	UnsafeComponent.save (name, component)
	handle UnsafeComponent.SitedInternal =>
		   raise IO.Io {name, function = "save", cause = Sited}
	     | cause => raise IO.Io {name, function = "save", cause}

    fun inf component = inf' (cast component)
    and inf' (UNEVALUATED {inf, ...}) = inf
      | inf' (EVALUATED {inf, ...}) = inf

    fun imports component = imports' (cast component)
    and imports' (UNEVALUATED {imports, ...}) =
	Vector.map (Pair.mapFst Url.fromString) imports
      | imports' (EVALUATED _) = #[]

    val initialTable = lazy UnsafeComponent.getInitialTable ()

    functor MkManager (val resolver: Resolver.t) : COMPONENT_MANAGER =
    struct
	(*--** should query and fragment be rejected instead of ignored? *)
	type outstream = TextIO.outstream

	exception Conflict

	val logStream = ref defaultLogStream

	val map: (mod * inf) UrlMap.t =
	    lazy UrlMap.map (Vector.map (fn (s, inf, mod) =>
					 (Url.fromString ("x-alice:/" ^ s),
					  (mod, inf)))
			     initialTable)

	fun matchWith (rea, SOME inf, SOME importInf) =
	    Inf.matchWith (rea, inf, importInf)
	  | matchWith (rea, NONE, SOME _) =
	    trace (!logStream,
		   "warning: no export signature, accepted unchecked")
	  | matchWith (rea, SOME _, NONE) =
	    trace (!logStream,
		   "warning: no import signature, accepted unchecked")
	  | matchWith (rea, NONE, NONE) =
	    trace (!logStream,
		   "warning: no import/export signatures, accepted unchecked")

	fun pathToString path = PrettyPrint.toString (PPPath.ppPath path, 10000)
	fun typToString typ = PrettyPrint.toString (PPType.ppTyp typ, 10000)
	fun infToString NONE = "(none)"
	  | infToString (SOME inf) = PrettyPrint.toString (PPInf.ppInf inf, 80)

	fun reraiseAs (packet, exn) = Exn.reraise (Exn.update (packet, exn))

	fun typeCheck (inf, rea, importInf, mod, url, baseUrlOpt) : mod =
	    let
		val url' = Url.toString url
		val baseUrlOpt' = Option.map Url.toString baseUrlOpt
		val message = url' ^ (case baseUrlOpt' of
					  SOME s => " imported by " ^ s
					| NONE => " linked explicitly")
	    in
		trace (!logStream, "type-checking " ^ message);
		Exn.catch
		  (fn packet =>
		   case Exn.fromPacket packet of
		     Inf.Mismatch m =>
		     (trace (!logStream, "type-checking failed");
		      trace (!logStream, "signature expected" ^
					 (case baseUrlOpt' of
					      NONE => ""
					    | SOME s => " by " ^ s) ^
			    		 ":\n" ^ infToString importInf);
		      trace (!logStream, "signature found in " ^ url' ^
					 ":\n" ^ infToString inf);
		      trace (!logStream, "under realisation\n" ^
					 PathMap.foldi (fn (path, typ, s) =>
					     pathToString path ^ " -> " ^
					     typToString typ ^ "\n" ^ s)
					 (PathMap.foldi (fn (path, inf, s) =>
					     pathToString path ^ " ->\n" ^
					     infToString (SOME inf)^ "\n" ^ s)
					  "" (#inf_rea rea)) (#typ_rea rea));
		      reraiseAs
		      (packet, Failure (url, Mismatch {component = url,
						       request = baseUrlOpt,
						       cause = m})))
		   | Failure (url', e) =>
		     (trace (!logStream, "exception " ^ exnName e ^
					 " propagated from " ^
					 Url.toString url' ^
					 " during type-checking");
		      reraiseAs (packet, Failure (url, e)))
		   | e =>
		     (trace (!logStream, "internal exception " ^ exnName e ^
					 " during type-checking");
		      reraiseAs (packet, Failure (url, Internal e))))
		  (fn _ => matchWith (rea, inf, importInf));
		trace (!logStream, "type-checked  " ^ message);
		mod
	    end

	fun load url =
	    Exn.catch (fn packet =>
			reraiseAs (packet, Failure(url, Exn.fromPacket packet)))
		      (fn _ => 	load' (!logStream, resolver) url)

	fun lazyLink url : mod * inf =
	    let
		val result = lazy
		    case UrlMap.lookupNew (map, url) of
			UrlMap.EXISTING entry => entry
		      | UrlMap.NEW p =>
			    let
				val entry = lazy eval' (url, load url)
			    in
				Promise.fulfill (p, entry); entry
			    end
	    in
		(lazy #1 result, lazy #2 result)
	    end
	and typedLink (url, rea, importInf, baseUrlOpt) : mod =
	    let
		val (mod, inf) = lazyLink url
		val rea' = Inf.cloneRea rea
		val mod' = lazy typeCheck (inf, rea', importInf, mod,
					   url, baseUrlOpt)
	    in
		case importInf of
		    NONE => ()
		  | SOME inf' => DynMatch.matchWith (rea, mod', inf');
(*DEBUG
trace (!logStream, "considering import " ^ Url.toString url ^ ":\n" ^ infToString importInf);
trace (!logStream, "extended realisation after considering import " ^ Url.toString url ^ ":" ^
	 PathMap.foldi (fn (path, typ, s) => "\n" ^ pathToString path ^ " -> _" ^ s)
	 (PathMap.foldi (fn (path, inf, s) => "\n" ^ pathToString path ^ " -> _" ^ s)
	  "" (#inf_rea rea)) (#typ_rea rea));
*)
		mod'
	    end
	and eval' (baseUrl, component) = eval'' (baseUrl, cast component)
	and eval'' (_, EVALUATED {mod, inf}) = (Future.await mod, inf)
	  | eval'' (baseUrl, UNEVALUATED {imports, body, inf}) =
	    let
		fun resolve s =
		    let
			val url = Url.fromString s
			val url = Url.setQuery (url, NONE)
			val url = Url.setFragment (url, NONE)
		    in
			Url.resolve baseUrl url
		    end
		val rea = Inf.rea ()
(*DEBUG
val _ = trace (!logStream, "linking " ^ Url.toString baseUrl ^ "...")
*)
		val imports' =
		    Vector.map (fn (importUrlS, importInf) =>
				   typedLink (resolve importUrlS, rea,
					      importInf, SOME baseUrl))
			       imports
		val _ = trace (!logStream, "evaluating " ^ Url.toString baseUrl)
		val mod = Exn.catch
			  (fn packet =>
			   case Exn.fromPacket packet of
			      Failure _ => Exn.reraise packet
			    | e =>
			      (trace (!logStream,
				      "evaluation failed in " ^
				      Url.toString baseUrl);
			       reraiseAs (packet, Failure (baseUrl, Eval e))))
			  (fn _ => body imports')
		val _ = trace (!logStream, "evaluated  " ^ Url.toString baseUrl)
		val dynInf =
		    case inf of
			NONE => NONE
		      | SOME inf' =>
			SOME (lazy DynMatch.strengthenWith (rea, mod, inf'))
	    in
		(mod, dynInf)
	    end

	fun validate url =
	    let
		val cwd = Url.fromString (OS.FileSys.getDir () ^ "/")
		val cwd = Url.setScheme (cwd, SOME "file")
		val url = Url.resolve cwd url
		val url = Url.setQuery (url, NONE)
		val url = Url.setFragment (url, NONE)
	    in
		url
	    end

	fun eval (url, component) =
	    let
		val (mod, inf) = eval' (validate url, component)
	    in
		case inf of
		    SOME j => Reflect.reifyPackage (mod, j)
		  | NONE => raise Failure (url, Internal Corrupt)
	    end

	fun link url =
	    let
		val (mod, inf) = lazyLink (validate url)
	    in
		case inf of
		    SOME j => Reflect.reifyPackage (mod, j)
		  | NONE => raise Failure (url, Internal Corrupt)
	    end

	fun enter (url', component) withval url = validate url' end =
	    case UrlMap.lookupNew (map, url) of
		UrlMap.EXISTING _ => raise Conflict
	      | UrlMap.NEW p => Promise.fulfill (p, lazy eval' (url, component))

	fun lookup url =
	    case UrlMap.lookup (map, validate url) of
		SOME entry => SOME (createEvaluated entry)
	      | NONE => NONE

	functor Eval (val component: component val url: Url.t signature S): S =
	    let
		structure Sig = Reflect.ReflectSig(signature S = S)
		val url = validate url
		val (mod, inf) = eval' (url, component)
		val _ = matchWith (Inf.rea (), inf, SOME Sig.x)
			handle Inf.Mismatch m =>
			    raise Failure (url, Mismatch
						{component = Url.fromString "",
						 request = NONE, cause = m})
	    in
		Reflect.Reify(val x = mod signature S = S)
	    end

	functor Link (val url: Url.t signature S): S =
	    let
		structure Sig = Reflect.ReflectSig(signature S = S)
		val mod = typedLink (validate url, Inf.rea (), SOME Sig.x, NONE)
	    in
		Reflect.Reify(val x = await mod signature S = S)
	    end

	functor Enter (val url: Url.t signature S structure X: S) =
	    (val _ = enter (url, fromPackage (pack X : S)))
    end


end
