(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2001
 *
 * Last change:
 *   $Date$ $Author$
 *   $Revision$
 *)

import structure Url               from "../utility/Url"
import structure Reflect           from "Reflect"
import structure Signature         from "Signature"
import signature COMPONENT_MANAGER from "COMPONENT_MANAGER-sig"

signature COMPONENT =
    sig
	type component
	type t = component

	exception Sited
	exception Corrupt

	val extension: string

	functor Create(signature S
		       structure X: S): (val component: component)

	val create: Signature.t option * Reflect.value -> component (*--** unsafe! *)
	val load: Url.t -> component                    (* IO.Io, Corrupt *)
	val save: string * component -> unit            (* IO.Io, Sited *)
	val sign: component -> Signature.t option

	functor MkManager(): COMPONENT_MANAGER where type component = component
    end
