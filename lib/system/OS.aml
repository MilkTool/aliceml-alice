(*
 * Authors:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2001-2002
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure UnsafeIODesc from "UnsafeIODesc"
import structure UnsafeOS     from "UnsafeOS"
import signature OS           from "OS-sig"

structure OS :> OS =
    struct
	type syserror = int
	exception SysErr = UnsafeOS.SysErr

	val errorMsg = UnsafeOS.errorMsg

	fun errorName _ = ""
	fun syserror  _ = NONE

	structure FileSys =
	    struct
		type dirstream
		eqtype file_id
		datatype access_mode = A_READ | A_WRITE | A_EXEC

		open UnsafeOS.FileSys
	    end

	structure Process =
	    struct
		eqtype status

		val success = UnsafeOS.Process.success
		val failure = UnsafeOS.Process.failure

		fun isSuccess status = status = success

		val system = UnsafeOS.Process.system

		val actions = ref nil
		val inAtExit = ref false

		fun atExit f =
		    if !inAtExit then ()
		    else
			let
			    val p = Promise.promise ()
			    val rest = Ref.exchange (actions, Promise.future p)
			in
			    Promise.fulfill (p, f::rest)
			end

		fun executeActions () =
		    let
			val p = Promise.promise ()
			val actions = Ref.exchange (actions, Promise.future p)
		    in
			case actions of
			    action::rest =>
				(Promise.fulfill (p, rest);
				 action () handle _ => ();
				 executeActions ())
			  | nil => Promise.fulfill (p, nil)
		    end

		val terminate = UnsafeOS.Process.terminate

		fun exit status =
		    (inAtExit := true;
		     executeActions ();
		     inAtExit := false;
		     terminate status)

		val getEnv = UnsafeOS.Process.getEnv

		fun sleep t = Future.await (Future.alarm t)

		val atExn = UnsafeOS.Process.atExn
	    end

	structure IO =
	    struct
		eqtype iodesc

		val hash = UnsafeIODesc.hash
		val compare = UnsafeIODesc.compare

		datatype iodesc_kind =
		    FILE | DIR | SYMLINK | TTY | PIPE | SOCKET
		  | DEVICE | UNKNOWN | CLOSED

		val kind = UnsafeIODesc.kind

		structure Kind =
		    struct
			val file = FILE
			val dir = DIR
			val symlink = SYMLINK
			val tty = TTY
			val pipe = PIPE
			val socket = SOCKET
			val device = DEVICE
		    end
	    end
    end
