(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2005
 *   Andreas Rossberg, 2005
 * 
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *) 

import signature STORE             from "STORE-sig"
import structure UnsafeStore      from "UnsafeStore"
import structure UnsafeValue      from "UnsafeValue"

structure Store : STORE =
    struct
        val same = UnsafeValue.same

        fun minimize a = let
            val b = UnsafeStore.newPartition()
            val _ = UnsafeStore.loadGraph(b, a)
        in
            UnsafeStore.minimize b;
	    a
        end

        fun equiv(a, b) = same(a, b) orelse same(minimize(a, b))

        val collect = UnsafeStore.collect

        fun size x =
	    let
		val {nodes, words, ...} = UnsafeStore.size x
	    in
		{nodes, words}
	    end
        fun sizeQuiet x =
	    let
		val {nodes, words, ...} = UnsafeStore.sizeQuiet x
	    in
		{nodes, words}
	    end

	fun futures x =
	    let
		val {byneeds, futures, transients, ...} =
		    UnsafeStore.sizeQuiet x
	    in
		{total = byneeds + futures + transients,
		 concurrent = futures,
		 byneed = byneeds}
	    end
	fun deepWait x =
	    let
		val {byneeds, futures, transients, ...} = UnsafeStore.size x
	    in
		{total = byneeds + futures + transients,
		 concurrent = futures,
		 byneed = byneeds}
	    end
    end
