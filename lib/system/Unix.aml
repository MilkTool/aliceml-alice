(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Andreas Rossberg, 2000-2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure IODesc           from "IODesc"
import structure IO               from "IO"
import structure TextPrimIO       from "TextPrimIO"
import structure TextIO           from "TextIO"
import structure MkTextTranslator from "MkTextTranslator"
import structure UnsafeUnix       from "UnsafeUnix"
import signature UNIX             from "UNIX-sig"

structure Unix :> UNIX =
    struct
        (* TODO: How to implement binstreams? *)
	type ('a,'b) proc = TextIO.instream * TextIO.outstream
	type signal

	datatype exit_status =
	    W_EXITED
	  | W_EXITSTATUS of Word8.word
	  | W_SIGNALED of signal
	  | W_STOPPED of signal

	open UnsafeUnix

	structure TextTranslator =
	    MkTextTranslator(structure PrimIO = TextPrimIO)

	fun textReader obj = TextTranslator.translateReader (TextPrimIO.RD obj)
	fun textWriter obj = TextTranslator.translateWriter
				(TextPrimIO.augmentWriter (TextPrimIO.WR obj))

	val execute =
	    fn (cmd, args) =>
	       let
		   val streams = execute (cmd, args)
		   val (instream, outstream) = streamsOf streams
		   val reader = textReader (IODesc.mkReader instream)
		   val writer = textWriter (IODesc.mkWriter outstream)
	       in
		   (TextIO.mkInstream (TextIO.StreamIO.mkInstream
					   (reader, CharVector.fromList nil)),
		    TextIO.mkOutstream (TextIO.StreamIO.mkOutstream
					    (writer, IO.LINE_BUF)))
	       end
    end
