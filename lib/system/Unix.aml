(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Andreas Rossberg, 2000-2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure IODesc           from "IODesc"
import structure IO               from "IO"
import structure TextPrimIO       from "TextPrimIO"
import structure TextIO           from "TextIO"
import structure MkTextTranslator from "MkTextTranslator"
import structure OS               from "OS"
import structure UnsafeUnix       from "UnsafeUnix"
import signature UNIX             from "UNIX-sig"

structure Unix :> UNIX =
    struct
	type proc_handle
	    
	datatype proc_status =
	    DEAD of OS.Process.status
	  | ALIVE of proc_handle

        (* TODO: How to implement binstreams? *)
	type ('a,'b) proc = 
	    TextIO.instream * TextIO.outstream * proc_status ref

	structure TextTranslator =
	    MkTextTranslator(structure PrimIO = TextPrimIO)

	fun textReader obj = TextTranslator.translateReader (TextPrimIO.RD obj)
	fun textWriter obj = TextTranslator.translateWriter
				(TextPrimIO.augmentWriter (TextPrimIO.WR obj))

	fun streamsOf (instream,outstream,_) = (instream,outstream)

	fun wait (_,_,ref (DEAD s)) = s
	  | wait (_,_,status as ref (ALIVE pHandle)) = 
	    let
		val timeout = Time.fromMilliseconds (LargeInt.fromInt 200)
		fun loop () = 
		    case UnsafeUnix.wait' pHandle of
			    NONE => (Thread.sleep timeout; loop ()) (* alive *)
			  | SOME x => x
		val s = loop ()
	    in
		status := DEAD s;
		s
	    end

	fun reap (proc as (instream,outstream,_)) =
	    (TextIO.closeIn instream;
	     TextIO.closeOut outstream;
	     wait proc)

	fun execute (cmd, args) =
	    let
		val proc = UnsafeUnix.execute (cmd, args)
		val (instream,outstream) = UnsafeUnix.streamsOf proc
		val pHandle = UnsafeUnix.pHandleOf proc
		val reader = textReader (IODesc.mkReader instream)
		val writer = textWriter (IODesc.mkWriter outstream)
	    in
		(TextIO.mkInstream (TextIO.StreamIO.mkInstream
				    (reader, CharVector.fromList nil)),
		 TextIO.mkOutstream (TextIO.StreamIO.mkOutstream
				     (writer, IO.LINE_BUF)),
		 ref (ALIVE pHandle))
	    end
    end
