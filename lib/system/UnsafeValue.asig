(*
 * Authors:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2002
 *   Andreas Rossberg, 2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Name  from "../rtt/Name"
import structure Label from "../rtt/Label"
import structure Type  from "../rtt/Type"

signature UNSAFE_VALUE_COMPONENT =
    sig
	structure UnsafeValue:
	    sig
		(* Label vectors must always be sorted *)

		val cast: 'a_value -> 'a
		val same: 'a * 'a -> bool

		(* Projections *)

		val proj: 'prod_value * Label.t vector * int -> 'value
		val projTuple: 'tuple_value * int * int -> 'value

		val tag: 'sum_value * Label.t vector -> int
		val projTagged: 'sum_value * Label.t vector * int -> 'value
		val projTaggedTuple: 'sum_value * int * int -> 'value

		val con: 'ext_value -> 'con_value
		val projConstructed: 'ext_value * Label.t vector * int -> 'value
		val projConstructedTuple: 'ext_value * int * int -> 'value

		val projPoly: 'prod_value * Label.t -> 'value

		(* Construction *)

		val prod: (Label.t * 'value) vector -> 'prod_value
		val tuple: 'value vector -> 'tuple_value

		val tagged: Label.t vector * int *
			    (Label.t * 'value) vector -> 'sum_value
		val taggedTuple: Label.t vector * int *
				 'value vector -> 'sum_value

		val closure: 'code * 'value vector -> 'closure_value

		val prim: string -> 'value

		(* Inspection *)

		val conName: 'con_value -> Name.t
	    end
    end
