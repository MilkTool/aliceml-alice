(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Andreas Rossberg, 2001-2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Label         from "../rtt/Label"
import structure Type          from "../rtt/Type"
import structure Inf           from "../rtt/Inf"
import structure UnsafeReflect from "UnsafeReflect"
import signature REFLECT       from "REFLECT-sig"

structure Reflect :> REFLECT =
    struct
	type value

	val cast = UnsafeReflect.cast

	fun realToVector r =
	    Vector.map Word8.fromInt (UnsafeReflect.realToVector r)

	functor Reflect(signature S structure X: S) =
	    let
		structure Str = UnsafeReflect.Reflect(signature S = S
						      structure X = X)
	    in
		(val x = cast Str.x)
	    end

	functor Unreflect(val x: value signature S) =
	    UnsafeReflect.Unreflect(val x = cast x signature S = S)

	structure ReflectSig = UnsafeReflect.ReflectSig
	structure UnreflectSig = UnsafeReflect.UnreflectSig

	functor ReflectType(type t) =
	    let
		structure Sig = ReflectSig(signature S = (type t = t))
	    in
		(val x = Inf.lookupTyp'(Inf.asSig(cast Sig.x),
					Label.fromString "t"))
	    end
    end
