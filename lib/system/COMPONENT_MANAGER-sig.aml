(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2001-2002
 *
 * Last change:
 *   $Date$ $Author$
 *   $Revision$
 *)

import structure TextIO    from "TextIO"
import structure Reflect   from "Reflect"
import structure Url       from "Url"
import structure Component from "Component"

signature COMPONENT_MANAGER =
    sig
	exception Conflict

	val logStream: TextIO.outstream option ref

	functor Eval(val component: Component.t
		     val url: Url.t
		     signature S): S                (* Component.Mismatch *)
	functor Link(val url: Url.t
		     signature S): S                (* Component.Failure *)
	functor Enter(val url: Url.t
		      signature S
		      structure X: S): any          (* Conflict *)

	val eval: Url.t * Component.t -> Reflect.module (* Component.Failure *)
	val load: Url.t -> Component.t              (* IO.Io *)
	val enter: Url.t * Component.t -> unit      (* Conflict *)
	val link: Url.t -> Component.t              (* Component.Failure *)
	val lookup: Url.t -> Component.t option

	val start: Url.t -> unit                    (* Component.Failure *)
    end
