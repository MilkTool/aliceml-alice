(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2002-2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure MkHashImpMap  from "../utility/MkHashImpMap"
import structure TextIO        from "TextIO"
import structure Url           from "Url"
import structure Socket        from "Socket"
import structure Http          from "Http"
import signature HTTP_SERVER   from "HTTP_SERVER-sig"

structure HttpServer :> HTTP_SERVER =
    struct
	type handler = Http.request -> Http.response

	val logOut: TextIO.outstream option ref = ref NONE

	fun trace s =
	    case !logOut of
		SOME q => TextIO.output (q, s)
	      | NONE => ()

	val idleTime = ref (Time.fromSeconds 30)

	val myPort: int option ref = ref NONE

	fun notFoundHandler (request: Http.request) =
	    Http.makeResponse
		{statusCode = 404,
		 contentType = "text/html",
		 body =
		 "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"\n\
		 \<HTML><HEAD>\n\
		 \<TITLE>404 Not Found</TITLE>\n\
		 \</HEAD><BODY>\n\
		 \<H1>Not Found</H1>\n\
		 \The requested URL " ^ Url.toString (#uri request) ^
		 " was not found on this server.<P>\n\
		 \<HR>\n\
		 \<ADDRESS>Stockhausen HTTP Server" ^
		 (case !myPort of
		      SOME port => " at port " ^ Int.toString port
		    | NONE => "") ^ "</ADDRESS>\n\
		 \</BODY></HTML>\n"}

	structure UrlMap = MkHashImpMap(Url)

	val handlerMap: handler UrlMap.t = UrlMap.new ()

	fun findHandler uri = findHandler' (List.rev (Url.getPath uri))
	and findHandler' ss =
	    let
		val uri = Url.setPath (Url.empty, List.rev ss)
	    in
		case UrlMap.lookup (handlerMap, uri) of
		    SOME handler => handler
		  | NONE =>
			case ss of
			    _::sr => findHandler' sr
			  | nil => notFoundHandler
	    end

	fun parseConnectionHeader ({headers, ...}: Http.request) =
	    case Http.StringMap.lookup (headers, "connection") of
		SOME s =>
		    List.map (fn Http.TOKEN s => s | _ => raise Http.Format)
			     (Http.parseFieldValue s)
	      | NONE => nil

	fun closeIdle (tokens, socket) =
	    (Future.awaitEither (Future.alarm (!idleTime), tokens);
	     if Future.isDetermined tokens then
		 closeIdle (List.tl tokens, socket)
	     else
		 (trace "closing idle connection\n";
		  Socket.close socket))

	fun handleConnection (socket, host, port) =
	    let
		val (stream, tokens) = Stream.stream ()
		fun sendToken () = Stream.send (stream, ())
	    in
		spawn handleConnection' (socket, host, port, sendToken);
		spawn closeIdle (tokens, socket)
	    end
	and handleConnection' (socket, host, port, sendToken) =
	    let
		val _ = trace ("connection from " ^ host ^ ":" ^
			       Int.toString port ^ "\n")
		val request = Http.readRequest socket
		val _ = sendToken ()
		val handler = findHandler (#uri request)
		val response = handler request
		    handle _ =>
			   Http.makeResponse
			       {statusCode = 501, contentType = "text/plain",
				body = "Internal server error"}
		val connectionTokens = parseConnectionHeader request
	    in
		sendToken ();
		Http.writeResponse (socket, response);
		sendToken ();
		if List.exists (fn s => s = "close") connectionTokens then
		    Socket.close socket
		else handleConnection' (socket, host, port, sendToken)
	    end
	    handle Http.Format =>
		       Socket.close socket
		       before trace "protocol error\n"
		 | Http.Closed => ()

	fun start portOpt =
	    case !myPort of
		SOME port => port
	      | NONE =>
		    let
			val (_, serverPort) =
			    Socket.server (portOpt, handleConnection)
		    in
			myPort := SOME serverPort;
			serverPort
		    end

	fun register (uri, handler) =
	    let
		val uri' = Url.setPath (Url.empty, Url.getPath uri)
	    in
		UrlMap.insert (handlerMap, uri', handler)
	    end
    end
