(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                   from "Pervasive"
import type unit and int
       type bool and order and option and list from "ToplevelTypes"
import signature STRING                        from "STRING-sig"


signature SUBSTRING =
sig
    structure String :	STRING

    type substring
    type t = substring							(**)

    val base :		substring -> String.string * int * int
    val string :	substring -> String.string
    val substring :	String.string * int * int -> substring
    val extract :	String.string * int * int option -> substring

    val isEmpty :	substring -> bool
    val size :		substring -> int

    val all :		String.string -> substring
    val getc :		substring -> (String.Char.char * substring) option
    val first :		substring -> String.Char.char option
    val triml :		int -> substring -> substring
    val trimr :		int -> substring -> substring
    val sub :		substring * int -> String.Char.char
    val slice :		substring * int * int option -> substring
    val concat :	substring list -> String.string
    val explode :	substring -> String.Char.char list

    val isPrefix :	String.string -> substring -> bool
    val compare :	substring * substring -> order
    val collate :	(String.Char.char * String.Char.char -> order) ->
					substring * substring -> order

    val splitl :	(String.Char.char -> bool) -> substring
						   -> substring * substring
    val splitr :	(String.Char.char -> bool) -> substring
						   -> substring * substring
    val splitAt :	substring * int -> substring * substring
    val dropl :		(String.Char.char -> bool) -> substring -> substring
    val dropr :		(String.Char.char -> bool) -> substring -> substring
    val takel :		(String.Char.char -> bool) -> substring -> substring
    val taker :		(String.Char.char -> bool) -> substring -> substring
    val position :	String.string -> substring -> substring * substring
    val span :		substring * substring -> substring
    val translate :	(String.Char.char -> String.string) -> substring
							   -> String.string
    val tokens :	(String.Char.char -> bool) -> substring -> substring list
    val fields :	(String.Char.char -> bool) -> substring -> substring list

    val app :		(String.Char.char -> unit) -> substring -> unit
    val foldl :		(String.Char.char * 'a -> 'a) -> 'a -> substring -> 'a
    val foldr :		(String.Char.char * 'a -> 'a) -> 'a -> substring -> 'a
end
