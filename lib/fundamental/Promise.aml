(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001-2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive         from "Pervasive"
import __primitive datatype bool     from "ToplevelTypes"
import __primitive structure Ref     from "Ref"
import __primitive structure Hole    from "Hole"
import __primitive signature PROMISE from "PROMISE-sig"

(* For now we need a hack to make the Inspector properly display promises...
structure Promise :> (PROMISE (*TODO where __primitive type 'a promise = "promise"*)) =	(**)
struct
    open Ref

    type 'a promise	= bool ref * 'a
    type 'a t		= 'a promise

    exception Promise	= Hole.Hole

    fun promise()	= (ref false, Hole.hole())
    fun future(_,h)	= Hole.future h handle Hole.Hole => h

    fun fulfill((r,h), x) =
	let
	    val b = Hole.hole()
	in
	    if exchange(r,b) then
	        (Hole.fill(b,true); raise Promise)
	    else
	        (Hole.fill(h,x); Hole.fill(b,true))
	end

    fun fail((r,h), e) =
	let
	    val b = Hole.hole()
	in
	    if exchange(r,b) then
	        (Hole.fill(b,true); raise Promise)
	    else
	        (Hole.fail(h,e); Hole.fill(b,true))
	end
end
*)

structure Promise :> (PROMISE (*TODO where __primitive type 'a promise = "promise"*)) =	(**)
struct
    open Ref

    datatype 'a promise	= Promise__ of bool ref * 'a
    type 'a t		= 'a promise

    exception Promise	= Hole.Hole

    fun promise()	= Promise__(ref false, Hole.hole())
    fun future(Promise__(_,h))	= Hole.future h handle Hole.Hole => h

    fun fulfill(Promise__(r,h), x) =
	let
	    val b = Hole.hole()
	in
	    if exchange(r,b) then
	        (Hole.fill(b,true); raise Promise)
	    else
	        (Hole.fill(h,x); Hole.fill(b,true))
	end

    fun fail(Promise__(r,h), e) =
	let
	    val b = Hole.hole()
	in
	    if exchange(r,b) then
	        (Hole.fill(b,true); raise Promise)
	    else
	        (Hole.fail(h,e); Hole.fill(b,true))
	end
end
