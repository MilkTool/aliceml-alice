(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)


(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive from "Pervasive"
import datatype bool         from "ToplevelTypes"
import structure Ref         from "Ref"
import structure Hole        from "Hole"
import signature PROMISE     from "PROMISE-sig"


structure Promise :> (PROMISE (*TODO where __primitive type 'a promise = "promise"*)) =	(**)
struct
    open Ref

    type 'a promise	= bool ref * 'a

    exception Promise	= Hole.Hole

    fun promise()	= (ref false, Hole.hole())
    fun future(_,h)	= Hole.future h

    fun fulfill((r,h), x) =
	let
	    val b = Hole.hole()
	in
	    if exchange(r,b) then
	        (Hole.fill(b,true); raise Promise)
	    else
	        (Hole.fill(h,x); Hole.fill(b,true))
	end

    fun fail((r,h), e) =
	let
	    val b = Hole.hole()
	in
	    if exchange(r,b) then
	        (Hole.fill(b,true); raise Promise)
	    else
	        (Hole.fail(h,e); Hole.fill(b,true))
	end
end
