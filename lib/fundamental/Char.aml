(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg and Leif Kornstaedt, 1999-2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                            from "Pervasive"
import type char and string and int
       datatype bool and order and option and list      from "ToplevelTypes"
import infix 4 = < > <= >= infixr 5 :: infix 6 + - infix 7 * div mod
       val op = and op < and op <= and op > and op >=
       val op + and op - and op * and op div and op mod
       val abs                                          from "ToplevelValues"
import structure General                                from "General"
import structure Bool                                   from "Bool"
import structure StringCvt                              from "StringCvt"
import signature CHAR                                   from "CHAR-sig"


structure Char : CHAR =
struct
    type char   = char
    type string = string
    type t	= char						(**)

    __primitive val ord : char -> int = "Char.ord"
    __primitive val chr : int -> char = "Char.chr"

    val maxOrd  = 255
    val minChar = chr 0
    val maxChar = chr maxOrd

    fun pred c where (c = minChar)	= raise General.Chr
      | pred c				= chr(ord c - 1)
    fun succ c where (c = maxChar)	= raise General.Chr
      | succ c				= chr(ord c + 1)

    __primitive val Int_compare : int * int -> order     = "Int.compare"
    __primitive val String_size : string -> int          = "CharVector.length"
    __primitive val String_sub :  string * int -> char   = "CharVector.sub"
    __primitive val String_str :  char -> string         = "String.str"
    __primitive val String_implode : char list -> string = "CharVector.fromList"

    val equal            = op =
    val hash             = ord

    fun compare(c1,c2)   = Int_compare(ord c1, ord c2)

    fun contains  s c    = contains'(s, c, String_size s - 1)
    and contains'(s,c,i) = i >= 0 andalso
			   (String_sub(s,i) = c orelse contains'(s, c, i-1))
    fun notContains s c  = Bool.not(contains s c)


    __primitive val toLower :	char -> char = "Char.toLower"
    __primitive val toUpper :	char -> char = "Char.toUpper"

    __primitive val isLower :	char -> bool = "Char.isLower"
    __primitive val isUpper :	char -> bool = "Char.isUpper"
    __primitive val isAlpha :	char -> bool = "Char.isAlpha"
    __primitive val isAlphaNum:	char -> bool = "Char.isAlphaNum"
    __primitive val isDigit :	char -> bool = "Char.isDigit"
    __primitive val isHexDigit:	char -> bool = "Char.isHexDigit"
    __primitive val isPunct :	char -> bool = "Char.isPunct"
    __primitive val isPrint :	char -> bool = "Char.isPrint"
    __primitive val isGraph :	char -> bool = "Char.isGraph"
    __primitive val isSpace :	char -> bool = "Char.isSpace"
    __primitive val isCntrl :	char -> bool = "Char.isCntrl"

    val zero				= ord #"0"
    val seven				= ord #"7"

    fun isBinDigit c			= c = #"0" orelse c = #"1"
    fun isOctDigit c			= zero <= ord c andalso ord c <= seven
    fun isAscii c			= 0 <= ord c andalso ord c <= 127

    fun toWide c			= c				(**)
    fun fromWide c			= c				(**)

    (* Formatting *)

    fun toString #"\\"			= "\\\\"
      | toString #"\""			= "\\\""
      | toString #"\a"			= "\\a"
      | toString #"\b"			= "\\b"
      | toString #"\t"			= "\\t"
      | toString #"\n"			= "\\n"
      | toString #"\v"			= "\\v"
      | toString #"\f"			= "\\f"
      | toString #"\r"			= "\\r"
      | toString c where (isPrint c)	= String_str c
      | toString c where (ord c < 32)	= String_implode
					    [#"\\", #"^", chr(ord c + ord #"@")]
      | toString c withval n=ord c end	= String_implode
					    [#"\\", chr(n div 100 + zero),
						    chr(n div 10 mod 10 + zero),
						    chr(n mod 10 + zero)]
					  (*TODO: not working for WideChar*)

    fun toOctAscii i			= String_implode
					    [#"\\", chr(i div 64 + zero),
						    chr(i div 8 mod 8 + zero),
						    chr(i mod 8 + zero)]


    fun toCString #"\\"			= "\\\\"
      | toCString #"\""			= "\\\""
      | toCString #"?"			= "\\?"
      | toCString #"'"			= "\\'"
      | toCString #"\a"			= "\\a"
      | toCString #"\b"			= "\\b"
      | toCString #"\t"			= "\\t"
      | toCString #"\n"			= "\\n"
      | toCString #"\v"			= "\\v"
      | toCString #"\f"			= "\\f"
      | toCString #"\r"			= "\\r"
      | toCString c where (isPrint c)	= String_str c
      | toCString c			= toOctAscii(ord c)


    (* Scanning *)

    val a = ord #"A"

    fun value c = ord(toUpper c) - (if ord c < a then zero else a - 10)

    fun scanAscii getc src0 =
	case getc src0 of NONE => NONE | SOME(c1, src1) =>
	case getc src1 of NONE => NONE | SOME(c2, src2) =>
	case getc src2 of NONE => NONE | SOME(c3, src3) =>
	if isDigit c1 andalso isDigit c2 andalso isDigit c3
	then let val i = 100*value c1 + 10*value c2 + value c3
	     in if i <= 255 then SOME(chr i, src3) else NONE end
	else NONE

    fun scanUnicode getc src0 =
	case getc src0 of NONE => NONE | SOME(c1, src1) =>
	case getc src1 of NONE => NONE | SOME(c2, src2) =>
	case getc src2 of NONE => NONE | SOME(c3, src3) =>
	case getc src3 of NONE => NONE | SOME(c4, src4) =>
	if Bool.not(isHexDigit c1 andalso isHexDigit c2 andalso
		    isHexDigit c3 andalso isHexDigit c4) then NONE else
	SOME(chr(4096*value c1 + 256*value c2 + 16*value c3 + value c4), src4)
	handle Chr => NONE

    fun scanControl getc src =
	case getc src
	  of SOME(c, src') where (64 <= ord c andalso ord c <= 95) =>
		SOME(chr(ord c - 64), src')
	   | _ => NONE

    fun scanEscape getc src =
	case getc src
	  of SOME(#"a",  src')                   => SOME(#"\a", src')
	   | SOME(#"b",  src')                   => SOME(#"\b", src')
	   | SOME(#"t",  src')                   => SOME(#"\t", src')
	   | SOME(#"n",  src')                   => SOME(#"\n", src')
	   | SOME(#"v",  src')                   => SOME(#"\v", src')
	   | SOME(#"f",  src')                   => SOME(#"\f", src')
	   | SOME(#"r",  src')                   => SOME(#"\r", src')
	   | SOME(#"\\", src')                   => SOME(#"\\", src')
	   | SOME(#"\"", src')                   => SOME(#"\"", src')
	   | SOME(#"^",  src')                   => scanControl getc src'
	   | SOME(#"u",  src')                   => scanUnicode getc src'
	   | SOME(  c,   src') where (isDigit c) => scanAscii getc src
	   | SOME(  c,   src') where (isSpace c) => scanGap getc src'
	   | _                                   => NONE

    and scanGap getc src =
	case getc src
	  of SOME(#"\\", src')                   => scan getc src'
	   | SOME(  c,   src') where (isSpace c) => scanGap getc src'
	   | NONE                                => NONE

    and scan getc src =
	case getc src
	  of SOME(#"\\", src')                   => scanEscape getc src'
	   | SOME(  c,   src') where (isPrint c) => SOME(c, src')
	   | NONE                                => NONE

    fun scanCAscii getc src      = scanCAscii' getc src 0 0
    and scanCAscii' getc src i 3 = SOME(chr i, src)
      | scanCAscii' getc src i k =
	case getc src
	  of SOME(c, src') where (isOctDigit c) =>
		scanCAscii' getc src (8*i + value c) k
	   | _ => scanCAscii'' src i k

    and scanCAscii'' src i 0 = NONE
      | scanCAscii'' src i k = SOME(chr i, src)

    fun scanCUnicode getc src = scanCUnicode' getc src 0 0
				handle Overflow => NONE
    and scanCUnicode' getc src i k =
	case getc src
	  of SOME(c, src') where (isHexDigit c) =>
		scanCUnicode' getc src (16*i + value c) k
	   | _ => scanCUnicode'' src i k

    and scanCUnicode'' src i 0 = NONE
      | scanCUnicode'' src i k = SOME(chr i, src)

    fun scanCEscape getc src =
	case getc src
	  of SOME(#"a",  src')                   => SOME(#"\a", src')
	   | SOME(#"b",  src')                   => SOME(#"\b", src')
	   | SOME(#"t",  src')                   => SOME(#"\t", src')
	   | SOME(#"n",  src')                   => SOME(#"\n", src')
	   | SOME(#"v",  src')                   => SOME(#"\v", src')
	   | SOME(#"f",  src')                   => SOME(#"\f", src')
	   | SOME(#"r",  src')                   => SOME(#"\r", src')
	   | SOME(#"?",  src')                   => SOME(#"?",  src')
	   | SOME(#"\\", src')                   => SOME(#"\\", src')
	   | SOME(#"\"", src')                   => SOME(#"\"", src')
	   | SOME(#"'",  src')                   => SOME(#"'", src')
	   | SOME(#"^",  src')                   => scanControl getc src'
	   | SOME(#"x",  src')                   => scanCUnicode getc src'
	   | SOME(  c,   src') where (isDigit c) => scanCAscii getc src'
	   | _                                   => NONE

    fun scanC getc src =
	case getc src
	  of SOME(#"\\", src')                   => scanCEscape getc src'
	   | SOME(  c,   src') where (isPrint c) => SOME(c, src')
	   | _                                   => NONE

    val fromString	= StringCvt.scanString scan
    val fromCString	= StringCvt.scanString scanC

    (* Put these here to avoid shadowing *)

    __primitive val op < :	char * char -> bool = "Char.<"
    __primitive val op > :	char * char -> bool = "Char.>"
    __primitive val op <= :	char * char -> bool = "Char.<="
    __primitive val op >= :	char * char -> bool = "Char.>="
end
