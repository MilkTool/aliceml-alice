(*
 * Authors:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 1999-2000
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)


(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                    from "Pervasive"
import type unit and int and vector and array
       datatype bool and option and list        from "ToplevelTypes"
import infix 4 = < > >= infixr 5 :: infix 6 + -
       val op = and op < and op > and op >=
       val op + and op -                        from "ToplevelValues"
import structure General                        from "General"
import structure List                           from "List"
import structure Vector                         from "Vector"
import signature ARRAY                          from "ARRAY-sig"


structure Array : ARRAY =
struct
    type 'a array  = 'a array
    type 'a vector = 'a vector
    type 'a t      = 'a array					(**)

    __primitive val maxLen :	int			= "Array.maxLen"

    __primitive val array :	int * 'a -> 'a array	= "Array.array"
    __primitive val fromList :	'a list -> 'a array	= "Array.fromList"
    __primitive val length :	'a array -> int		= "Array.length"
    __primitive val sub :	'a array * int -> 'a	= "Array.sub"
    __primitive val sub' :	'a array * int -> 'a	= "Unsafe.Array.sub"
    __primitive val vsub' :	'a vector * int -> 'a	= "Unsafe.Vector.sub"
    __primitive val update :	'a array * int * 'a -> unit = "Array.update"
    __primitive val update' :	'a array * int * 'a -> unit
							= "Unsafe.Array.update"

    val new			= array					(**)

    fun toList a		= toList'(a, length a - 1, [])		(**)
    and toList'(a, ~1, xs)	= xs
      | toList'(a, i, xs)	= toList'(a, i-1, sub'(a,i)::xs)

    fun sliceLength(a,i,NONE) where (i > length a)
				= raise General.Subscript
      | sliceLength(a,i,NONE)	= length a - i
      | sliceLength(a,i,SOME n) where (i+n > length a orelse n < 0)
				= raise General.Subscript
      | sliceLength(a,i,SOME n)	= n

    fun tabulate(n,f)		= fromList(List.tabulate(n,f)) (*INEFFICIENT*)
    fun extract(a,i,no)		= Vector.tabulate(sliceLength(a,i,no),
						  fn k => sub'(a,i+k))

    fun fromVector v		= tabulate(Vector.length v, fn i => vsub'(v,i))
    fun toVector a		= Vector.tabulate(length a, fn i => sub'(a,i))
					(**) (*INEFFICIENT*)

    fun swap(a,i,j)		= let val x = sub(a,i) in		(**)
				      update(a, i, sub(a,j)) ;
				      update(a, j, x)
				  end

    fun reverse a		= let fun reverse'(i,j) =		(**)
				      if i >= j then () else
					  (swap(a,i,j) ; reverse'(i+1, j-1))
				  in reverse'(0, length a - 1) end

    fun copy {src,si,len,dst,di} =
	let
	    val d = di - si
	    val n = case len of NONE    => length src
			      | SOME n' => si+n'
	    fun copy' i where (i = n)	= ()
	      | copy' i			= ( update'(dst, i+d, sub'(src,i))
					  ; copy'(i+1) )
	in
	    copy' si
	end

    fun copyVec {src,si,len,dst,di} =
	let
	    val d = di - si
	    val n = case len of NONE    => Vector.length src
			      | SOME n' => si+n'
	    fun copy' i where (i = n)	= ()
	      | copy' i			= ( update'(dst, i+d, vsub'(src,i))
					  ; copy'(i+1) )
	in
	    copy' si
	end

    fun app  f a		= app'(f,a,0)
    and app'(f,a,i) where (i = length a)
				= ()
      | app'(f,a,i)		= (f(sub'(a,i)) ; app'(f,a,i+1))

    fun appr  f v		= appr'(f, v, length v - 1)		(**)
    and appr'(f,v,~1)		= ()
      | appr'(f,v,i)		= (f(sub'(v,i)) ; appr'(f,v,i-1))

    fun modify  f a		= modify'(f,a,0)
    and modify'(f,a,i) where (i = length a)
				= ()
      | modify'(f,a,i)		= (update'(a,i,f(sub'(a,i))) ; modify'(f,a,i+1))

    fun foldl  f x a		= foldl'(f,x,a,0)
    and foldl'(f,x,a,i) where (i = length a)
				= x
      | foldl'(f,x,a,i)		= foldl'(f, f(sub'(a,i),x), a, i+1)

    fun foldr  f x a		= foldr'(f, x, a, length a - 1)
    and foldr'(f,x,a,~1)	= x
      | foldr'(f,x,a,i)		= foldr'(f, f(sub'(a,i),x), a, i-1)

    fun appi f (a,i,no)		= appi'(f, a, i, sliceLength(a,i,no))
    and appi'(f,a,i,0)		= ()
      | appi'(f,a,i,n)		= (f(i, sub'(a,i)) ; appi'(f,a,i+1,n-1))

    fun appri f (v,i,no)	= appri'(f, v, i, i-1+sliceLength(v,i,no)) (**)
    and appri'(f,v,i,j)	where (i < j)
				= ()
      | appri'(f,v,i,j)		= (f(i, sub'(v,i)) ; appri'(f,v,i-1,j))

    fun modifyi f (a,i,no)	= modifyi'(f, a, i, sliceLength(a,i,no))
    and modifyi'(f,a,i,0)	= ()
      | modifyi'(f,a,i,n)	= (update'(a, i, f(i, sub'(a,i))) ;
				   modifyi'(f,a,i+1,n-1))

    fun foldli f x (a,i,no)	= foldli'(f, x, a, i, sliceLength(a,i,no))
    and foldli'(f,x,a,i,0)	= x
      | foldli'(f,x,a,i,n)	= foldli'(f, f(i, sub'(a,i), x), a, i+1, n-1)

    fun foldri f x (a,i,no)	= foldri'(f, x, a, i-1 + sliceLength(a,i,no), i)
    and foldri'(f,x,a,i,j) where (i < j)
				= x
      | foldri'(f,x,a,i,j)	= foldri'(f, f(i, sub'(a,i),x), a, i-1, j)

    fun all  f a		= all'(f,a,0)				(**)
    and all'(f,a,i) 		= i = length a orelse
				  f(sub'(a,i)) andalso all'(f,a,i+1)

    fun exists  f a		= exists'(f,a,0)			(**)
    and exists'(f,a,i) 		= i = length a orelse
				  f(sub'(a,i)) orelse exists'(f,a,i+1)

    fun find  f a					= find'(f,a,0)	(**)
    and find'(f,a,i) where (i = length a)		= NONE
      | find'(f,a,i) withval x = sub'(a,i) where (f x)	= SOME x
      | find'(f,a,i)					= find'(f,a,i+1)
end
