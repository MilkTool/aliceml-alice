(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)


(* Needed to bootstrap the library. *)


(*
 * CAREFUL! Each pervasive type may only be mentioned in one primitive
 * declaration/specification, otherwise the compiler will crash!
 * Do only declare __pervasive on toplevel.
 *
 * Also note that __reftype should not declare a constructor named different
 * from the type constructor, otherwise it will not be suitably exported
 * into other components.
 *)

(* Step 1: introduce dummys for type lib
 *)

structure __pervasive =
struct
    structure Label =
    struct
	fun fromString x = fromString x
    end

    structure Path =
    struct
	fun fromLab x = fromLab x
	fun pervasive x = pervasive x
    end

    structure Type =
    struct
	fun var x = var x
	fun inVar x = inVar x
	fun inCon x = inCon x
	fun inApply x = inApply x
	fun inLambda x = inLambda x
	fun inArrow x = inArrow x
	fun inTuple x = inTuple x
	fun inProd x = inProd x
	fun inSum x = inSum x
	fun inAll x = inCon x
	fun inExist x = inExist x
	fun unknown x = unknown x
	fun fill x = fill x
	fun unknownRow x = unknownRow x
	fun emptyRow x = emptyRow x
	fun extendRow x = extendRow x
    end

    structure Inf =
    struct
    end

    structure PervasiveType =
    struct
	(*val typ_ref = 0	(* mmh... *)*)
	fun lookup s = lookup s
    end
end


(* Step 2: Extend with primitive types encoding datatypes
 *         (accesses type lib). 
 *)

structure __pervasive =
struct
    open __pervasive

    __primitive type zero		= "zero"
    __primitive type 'a succ		= "succ"
    __primitive type ('a,'b) conarrow	= "conarrow"
end


(* Step 3: Extend with actual content
 *         (requires type lib and datatype encoding)
 *)

structure __pervasive =
struct
    open __pervasive

    __primitive datatype exn = "exn"
    datatype 'a list = nil | op:: of 'a * 'a list

    structure Int	= struct __primitive eqtype int		= "int"     end
    structure LargeInt	= struct               type int		= Int.int   end
    structure Word	= struct __primitive eqtype word	= "word"    end
    structure LargeWord	= struct               type word	= Word.word end
    structure Real	= struct __primitive eqtype real	= "real"    end
    structure LargeReal	= struct               type real	= Real.real end
    structure Char	= struct __primitive eqtype char	= "char"    end
    structure WideChar	= struct               type char	= Char.char end
    structure String	= struct __primitive eqtype string	= "string"  end
    structure WideString= struct               type string	= String.string
									    end
    structure Vector	= struct __primitive eqtype 'a vector	= "vector"  end
    structure Array	= struct __primitive __eqeqtype 'a array= "array"   end
    structure Ref	= struct __primitive __reftype 'a ref	= ref of 'a end
    structure General	= struct __primitive datatype exn	= "exn"     end
end
