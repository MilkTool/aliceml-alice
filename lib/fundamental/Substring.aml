(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001-2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                       from "Pervasive"
import type int and char and string
       datatype bool and order and option and list from "ToplevelTypes"
import infix 6 + - infix 4 = <> < >
       val op = and op <> and op < and op >
       val op + and op -                           from "ToplevelValues"
import structure General                           from "General"
import structure Option                            from "Option"
import structure List                              from "List"
import structure Char                              from "Char"
import structure String                            from "String"
import structure CharVectorSlice                   from "CharVectorSlice"
import signature SUBSTRING                         from "SUBSTRING-sig"

structure Substring : SUBSTRING =
struct
    type char			= char
    type string			= string
    type substring		= CharVectorSlice.slice
    type t			= substring

    open CharVectorSlice
    val size			= length
    val all			= full
    val string			= vector
    val extract			= slice
    val slice			= subslice
    fun substring(s,i,n)	= extract(s, i, SOME n)
    val getc			= getItem
    fun first ss		= Option.map #1 (getc ss)
    val explode			= toList

    fun hash ss			= String.hash(#1(base ss))
    val equal			= equal op=
    val compare			= collate Char.compare

    (*INEFFICIENT*)
    fun concatWith s sss	= String.concatWith s (List.map string sss)
    fun translate f ss		= String.concat(List.map f (explode ss))

    fun span(ss1,ss2)		= let
				      val (s1,i1,n1) = base ss1
				      val (s2,i2,n2) = base ss2
				  in
				      if s1 <> s2 orelse i2+n2 < i1
				      then raise General.Span
				      else substring(s1, i1, (i2+n2)-i1)
				  end

    fun isPrefix s ss		= isPrefix'(s,ss,0)
    and isPrefix'(s,ss,i)	= i = String.size s orelse
				  i <> size ss andalso
				  String.sub(s,i) = sub(ss,i)
				  andalso isPrefix'(s,ss,i+1)

    fun isSuffix s ss		= isSuffix'(s, ss, String.size(s)-1, size(ss)-1)
    and isSuffix'(s,ss,i1,i2)	= i1 = ~1 orelse
				  i2 <> ~1 andalso
				  String.sub(s,i1) = sub(ss,i1)
				  andalso isSuffix'(s,ss,i1-1,i2-1)

    fun isSubstring s ss	= isSubstring'(s,ss,0)
    and isSubstring'(s,ss,i)	= i + String.size s < size ss
				  andalso isSubstring''(s,ss,i,0)
				  orelse isSubstring'(s,ss,i+1)
    and isSubstring''(s,ss,i,j)	= j = String.size s orelse
				  String.sub(s,i) = sub(ss,i+j) andalso
				  isSubstring''(s,ss,i,j+1)
(*
    fun position 

    fun tokens
    fun fields
*)
end
