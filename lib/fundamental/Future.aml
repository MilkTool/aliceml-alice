(*
 * Authors:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 1999-2000
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)


(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive      from "Pervasive"
import type unit and bool and exn from "ToplevelTypes"
import structure Time             from "Time"
import structure Hole             from "Hole"
import structure Ref              from "Ref"
import signature FUTURE           from "FUTURE-sig"


structure Future : FUTURE =				(**)
struct
    __primitive exception Future of exn			= "Future.Future"
    exception Cyclic = Hole.Cyclic

    __primitive val concur :	(unit -> 'a) -> 'a	= "Future.concur"
    __primitive val byneed :	(unit -> 'a) -> 'a	= "Future.byneed"
    __primitive val alarm :	Time.time -> unit	= "Future.alarm'"

    __primitive val await :	'a -> 'a		= "Future.await"
    __primitive val awaitOne :	'a * 'b -> 'a		= "Future.awaitOne"

    __primitive val isFuture :	'a -> bool		= "Future.isFuture"
    __primitive val isFailed :	'a -> bool		= "Future.isFailed"

    fun mkLock() =
	let
	    val r = Ref.ref()
	in
	    fn f => fn x =>
	    let
		val new = Hole.hole()
		val old = Ref.exchange(r, new)
	    in
		await old;
		#1 (f x, Hole.fill(new, ()))	(* f x before fill(new, ()) *)
	    end
	end
end
