(*
 * Authors:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 1999-2002
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)


(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive      from "Pervasive"
import type unit and bool and exn from "ToplevelTypes"
import structure Hole             from "Hole"
import structure Time             from "Time"
import signature FUTURE           from "FUTURE-sig"


structure Future : FUTURE =				(**)
struct
    __primitive exception Future of exn			= "Future.Future"
    exception Cyclic = Hole.Cyclic

    __primitive val concur :	(unit -> 'a) -> 'a	= "Future.concur"
    __primitive val byneed :	(unit -> 'a) -> 'a	= "Future.byneed"
    __primitive val alarm :	Time.time -> unit	= "Future.alarm'"

    __primitive val await :	'a -> 'a		= "Future.await"

    local
	type thread
	__primitive val currentThread: unit -> thread = "Thread.current"
	__primitive val raiseIn: thread * exn -> unit = "Thread.raiseIn"
	__primitive exception Terminate  = "Thread.Terminate"
	__primitive exception Terminated = "Thread.Terminated"
    in
	fun awaitOne (a, b) =
	    let
		val c  = Hole.hole ()
		val t1 = Hole.hole ()
		val t2 = Hole.hole ()
	    in
		spawn (Hole.fill (t1, currentThread ());
		       (await a; ()) handle _ => ();
		       Hole.fill (c, ()) handle Hole.Hole => ();
		       raiseIn (t2, Terminate)
			   handle (Hole.Hole|Terminated) => ());
		spawn (Hole.fill (t2, currentThread ());
		       (await b; ()) handle _ => ();
		       Hole.fill (c, ()) handle Hole.Hole => ();
		       raiseIn (t1, Terminate)
			   handle (Hole.Hole|Terminated) => ());
		await c; a
	    end
    end

    __primitive val isFuture :	'a -> bool		= "Future.isFuture"
    __primitive val isFailed :	'a -> bool		= "Future.isFailed"

    fun innerExn(Future e) = innerExn e
      | innerExn e         = e
end
