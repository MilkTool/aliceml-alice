(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001-2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)


(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                   from "Pervasive"
import __primitive infix 6 + - infix 7 * / div
       val op / val op =                       from "ToplevelValues"
import __primitive structure LargeInt          from "LargeInt"
import __primitive structure LargeReal         from "LargeReal"
import __primitive structure IEEEReal          from "IEEEReal"
import __primitive signature TIME              from "TIME-sig"


structure Time :> TIME =
struct
    open LargeInt		(* +, -, <, >, <=, >=, compare *)

    type time			= LargeInt.int	(* microseconds *)
    type t			= time					(**)

    exception Time

    val zeroTime		= 0

    fun fromReal x		= LargeReal.toLargeInt IEEEReal.TO_NEAREST
						  (LargeReal.*(x,1000000.0))
    fun toReal t		= LargeReal.fromLargeInt t / 1000000.0

    fun toSeconds t		= t div 1000000
    fun toMilliseconds t	= t div 1000
    fun toMicroseconds t	= t
    fun toNanoseconds t		= t * 1000
    fun fromSeconds n		= n * 1000000
    fun fromMilliseconds n	= n * 1000
    fun fromMicroseconds n	= n
    fun fromNanoseconds n	= n div 1000

    val equal			= op =
    val hash			= LargeInt.hash
end
