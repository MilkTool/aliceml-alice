(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)


(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                               from "Pervasive"
import type unit and string and exn and ref datatype order from "ToplevelTypes"
import infix 3 := :=: o infix 0 before
       val ! and op := and op :=:                          from "ToplevelValues"
import signature GENERAL                                   from "GENERAL-sig"


structure General : GENERAL =
struct
    type unit					= unit
    type exn					= exn

    __primitive exception Bind			= "General.Bind"
    __primitive exception Chr			= "General.Chr"
    __primitive exception Div			= "General.Div"
    __primitive exception Domain		= "General.Domain"
    __primitive exception Fail of string	= "General.Fail"
    __primitive exception Match			= "General.Match"
    __primitive exception Overflow		= "General.Overflow"
    __primitive exception Size			= "General.Size"
    __primitive exception Span			= "General.Span"
    __primitive exception Subscript		= "General.Subscript"

    __primitive val exnName : exn -> string	= "General.exnName"
    val exnMessage				= exnName

    datatype order				= datatype order

    val !					= !
    val op :=					= op :=
    val op :=:					= op :=:

    fun flip f (a,b)				= f(b,a)
    fun (f o g) a				= f(g a)
    fun a before b				= a
    fun ignore a				= ()
end
