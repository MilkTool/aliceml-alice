(*
 * Author:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature PACKAGE from "PACKAGE-sig"

structure Package :> PACKAGE =
struct
    type package
    type t = package
    type val_package

    type      mismatch = __pervasive.Inf.mismatch
    exception Mismatch = __pervasive.Inf.Mismatch
    exception MismatchVal

    __primitive functor Pack :      fct(signature S structure X : S) ->
				    (val x : package) = "Pack"
    __primitive functor Unpack :    fct(val x : package signature S) ->
				    S = "Unpack"
    __primitive functor PackVal :   fct(type t val x : t) ->
				    (val x : val_package) = "PackVal"
    __primitive functor UnpackVal': fct(val x : val_package type t) ->
				    (val x : t) = "UnpackVal"

    functor UnpackVal(Arg : sig val x : val_package type t end) =
	struct
	    val x = let structure X = UnpackVal'(Arg) in X.x end
		    handle Bind => raise MismatchVal
	end
end
