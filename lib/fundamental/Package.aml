(*
 * Author:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure __pervasive from "Pervasive"
import signature PACKAGE     from "PACKAGE-sig"

(* For now we need a hack to make the Inspector properly display packages...
structure Package :> PACKAGE =
struct
    type package
    type t = package
    type val_package

    type      mismatch = __pervasive.Inf.mismatch
    exception Mismatch = __pervasive.Inf.Mismatch
    exception MismatchVal

    __primitive functor Pack :      fct(signature S structure X : S) ->
				    (val package : package) = "Pack"
    __primitive functor Unpack :    fct(val package : package signature S) ->
				    S = "Unpack"
    __primitive functor PackVal :   fct(type t val x : t) ->
				    (val package : val_package) = "PackVal"
    __primitive functor UnpackVal': fct(val package : val_package type t) ->
				    (val x : t) = "UnpackVal"

    functor UnpackVal(Arg : sig val package : val_package type t end) =
	struct
	    val x = let structure X = UnpackVal'(Arg) in X.x end
		    handle Bind => raise MismatchVal
	end
end
*)

structure Package :> PACKAGE =
struct
    type package'
    datatype package = Package__ of package'
    type t = package
    type val_package'
    datatype val_package = ValPackage__ of val_package'

    type      mismatch = __pervasive.Inf.mismatch
    exception Mismatch = __pervasive.Inf.Mismatch
    exception MismatchVal

    __primitive functor Pack' :     fct(signature S structure X : S) ->
				    (val package : package') = "Pack"
    __primitive functor Unpack' :   fct(val package : package' signature S) ->
				    S = "Unpack"
    __primitive functor PackVal' :  fct(type t val x : t) ->
				    (val package : val_package') = "PackVal"
    __primitive functor UnpackVal': fct(val package : val_package' type t) ->
				    (val x : t) = "UnpackVal"

    functor Pack(Arg : sig signature S structure X : S end) =
    let
	structure P = Pack'(Arg)
    in
	(val package = Package__(P.package))
    end

    functor Unpack(val package : package signature S) =
    let
	val Package__ package' = package
    in
	Unpack'(val package = package' signature S = S)
    end

    functor PackVal(Arg : sig type t val x : t end) =
    let
	structure P = PackVal'(Arg)
    in
	(val package = ValPackage__(P.package))
    end

    functor UnpackVal(val package : val_package type t) =
    let
	val ValPackage__ package' = package
    in
	(val x = let structure X = UnpackVal'(val package = package'
						 type t = t)
		    in X.x end
		    handle Bind => raise MismatchVal
	)
    end
end
