(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                   from "Pervasive"
import type unit and int
       type bool and option and order and list from "ToplevelTypes"
import signature MONO_VECTOR                   from "MONO_VECTOR-sig"

signature MONO_ARRAY =
sig
    structure Vector: MONO_VECTOR

    eqtype array
    type t = array							(**)
    type elem = Vector.elem

    val maxLen: int

    val array: int * elem -> array
    val new: int * elem -> array					(**)
    val toList:	array -> elem list					(**)
    val fromList: elem list -> array
    val toVector: array -> Vector.vector				(**)
    val fromVector: Vector.vector -> array				(**)
    val tabulate: int * (int -> elem) -> array

    val length: array -> int
    val sub: array * int -> elem
    val update: array * int * elem -> unit
    val swap: array * int * int -> unit					(**)
    val reverse: array -> unit						(**)
    val extract: array * int * int option -> Vector.vector
    val copy:
	{src: array, si: int, len: int option, dst: array, di: int} -> unit
    val copyVec:
	{src: Vector.t, si: int, len: int option, dst: array, di: int} -> unit

    val app: (elem -> unit) -> array -> unit
    val appr: (elem -> unit) -> array -> unit				(**)
    val modify: (elem -> elem) -> array -> unit
    val foldl: (elem * 'b -> 'b) -> 'b -> array -> 'b
    val foldr: (elem * 'b -> 'b) -> 'b -> array -> 'b
    val appi: (int * elem -> unit) -> array * int * int option -> unit
    val appri: (int * elem -> unit) -> array * int * int option -> unit	(**)
    val modifyi: (int * elem -> elem) -> array * int * int option -> unit
    val foldli: (int * elem * 'b -> 'b) -> 'b -> array * int * int option -> 'b
    val foldri: (int * elem * 'b -> 'b) -> 'b -> array * int * int option -> 'b

    val all: (elem -> bool) -> array -> bool				(**)
    val exists:	(elem -> bool) -> array -> bool				(**)
    val find: (elem -> bool) -> array -> elem option			(**)

    val equal: (elem * elem -> bool) -> array * array -> bool		(**)
    val compare: (elem * elem -> order) -> array * array -> order	(**)

    val isSorted: (elem * elem -> order) -> array -> bool		(**)
    val sort: (elem * elem -> order) -> array -> unit			(**)
end
