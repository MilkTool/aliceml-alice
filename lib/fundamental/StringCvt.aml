(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg and Leif Kornstaedt, 1999-2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                from "Pervasive"
import __primitive
       type int and string and char
       datatype bool and option and list    from "ToplevelTypes"
import __primitive
       infix 4 = <= infixr 5 :: infix 6 +
       val op = and op <= and op +          from "ToplevelValues"
import __primitive structure List           from "List"
import __primitive signature STRING_CVT     from "STRING_CVT-sig"

structure StringCvt :> STRING_CVT =
struct
    datatype radix		= BIN | OCT | DEC | HEX
    datatype realfmt		= EXACT
				| SCI of int option
				| FIX of int option
				| GEN of int option

    type ('a,'b) reader		= 'b -> ('a * 'b) option
    type cs			= int

    infix 6 ^
    __primitive val ^ :              string * string -> string = "String.^"
    __primitive val String_size :    string -> int        = "CharVector.length"
    __primitive val String_sub :     string * int -> char = "Unsafe.String.sub"
    __primitive val String_implode : char list -> string
						= "CharVector.fromList"
    __primitive val String_tabulate : int * (int -> char) -> string
						= "CharVector.tabulate"
    __primitive val Char_isSpace :   char -> bool         = "Char.isSpace"

    fun padLeft c i s		= if i <= 0 then s else
				  String_tabulate(i, fn _=> c) ^ s
    fun padRight c i s		= if i <= 0 then s else
				  s ^ String_tabulate(i, fn _=> c)

    fun splitl p f src		= splitl'(p, f, src, nil)
    and splitl'(p, f, src, cs)	= case f src
 				    of NONE =>
				       (String_implode(List.rev cs), src)
				     | SOME (c, src') =>
				       if p c
				       then splitl'(p, f, src', c::cs)
				       else (String_implode(List.rev cs), src)

    fun takel p f s		= #1(splitl p f s)
    fun dropl p f s		= #2(splitl p f s)
    fun skipWS f s		= dropl Char_isSpace f s

    fun scanString scan s =
	let
	    fun get i where (i = String_size s) = NONE
	      | get i                           = SOME(String_sub(s,i), i+1)
	in
	    case scan get 0 of NONE      => NONE
			     | SOME(x,_) => SOME x
	end
end
