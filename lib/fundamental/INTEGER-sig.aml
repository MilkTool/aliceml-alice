(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive                              from "Pervasive"
import type char and string and bool and order and option from "ToplevelTypes"
import structure StringCvt                                from "StringCvt"


signature INTEGER =
sig
    eqtype int
    type t = int							(**)

    val minInt :	int option
    val maxInt :	int option
    val precision :	__pervasive.Int.int option

    val toInt :		int -> __pervasive.Int.int
    val fromInt :	__pervasive.Int.int -> int
    val toLarge :	int -> __pervasive.LargeInt.int
    val fromLarge :	__pervasive.LargeInt.int -> int

    val ~ :		int -> int
    val op + :		int * int -> int
    val op - :		int * int -> int
    val op * :		int * int -> int
    val op div :	int * int -> int
    val op mod :	int * int -> int
    val op quot :	int * int -> int
    val op rem :	int * int -> int

    val op < :		int * int -> bool
    val op > :		int * int -> bool
    val op <= :		int * int -> bool
    val op >= :		int * int -> bool
    val compare :	int * int -> order

    val abs :		int -> int
    val min :		int * int -> int
    val max :		int * int -> int
    val sign :		int -> __pervasive.Int.int
    val sameSign :	int * int -> bool

    val toString :	int -> string
    val fromString:	string -> int option
(*TODO
    val fmt :		StringCvt.radix -> int -> string
*)
    val scan :		StringCvt.radix -> (char,'a) StringCvt.reader -> 'a
					-> (int * 'a) option
end
