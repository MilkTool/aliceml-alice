(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

signature GC_SIG =
sig
    structure UnsafeGecode : sig
	structure UnsafeGecodeBase : sig
	    exception InvalidSpace
	    exception InvalidVar
		      
	    val makeSpace : unit -> 'space
				    
	    val fail : 'space -> unit
				 
	    val status  : 'space -> 'status
	    val commit  : 'space * int -> unit
	    val clone   : 'space -> 'space
	    val discard : 'space -> unit
	    val alive   : 'space -> unit
				    
	    val stamps : 'space -> int * int
	    val varStamp : 'var -> int
	end

	structure UnsafeGecodeFD : sig
	    val intvar : 'space * (int * int) vector -> 'intvar
	    val intvarR : 'space * (int * int) vector * 'boolvar -> 'intvar
	    val boolvar : 'space -> 'boolvar
				    
	    val getMin : 'space * 'intvar -> int
	    val getMax : 'space * 'intvar -> int

	    val distinct : 'space * 'intvar vector * 'conlevel -> unit
	    val distinctOffset : 'space * (int * 'intvar) vector * 'conlevel -> unit

	    val countII : 'space * 'intvar vector * 'relation *
			  int * 'relation * int -> unit
	    val countVI : 'space * 'intvar vector * 'relation *
			  'intvar * 'relation * int -> unit
	    val countIV : 'space * 'intvar vector * 'relation *
			  int * 'relation * 'intvar -> unit
	    val countVV : 'space * 'intvar vector * 'relation *
			  'intvar * 'relation * 'intvar -> unit

	    val element : 'space * 'intvar vector * 'intvar * 'intvar -> unit
	    val elementI : 'space * int vector * 'intvar * 'intvar -> unit
	    val lex : 'space * 'intvar vector * 'relation *
		      'intvar vector -> unit

	    val dom : 'space * 'intvar * (int * int) vector -> unit
	    val domR : 'space * 'intvar * (int * int) vector * 'boolvar -> unit

	    val rel : 'space * 'intvar * 'relation * 'intvar -> unit
	    val relI : 'space * 'intvar * 'relation * 'int -> unit
	    val relR : 'space * 'intvar * 'relation * 'intvar * 'boolvar -> unit
	    val relIR : 'space * 'intvar * 'relation * 'int * 'boolvar -> unit
	    val equal : 'space * 'intvar * 'intvar * 'conlevel -> unit
	    val equalV : 'space * 'intvar vector * 'conlevel -> unit
	    val equalR : 'space * 'intvar * 'intvar * 'boolvar * 'conlevel -> unit
	    val equalVR : 'space * 'intvar vector * 'boolvar * 'conlevel -> unit

	    val linear : 'space * (int * 'intvar) vector * 'relation * 
			 int * 'conlevel -> unit
	    val linearR : 'space * (int * 'intvar) vector * 'relation * 
			  int * 'boolvar * 'conlevel -> unit

	    val min : 'space * 'intvar vector * 'intvar -> unit
	    val max : 'space * 'intvar vector * 'intvar -> unit
	    val abs : 'space * 'intvar * 'intvar * 'conlevel -> unit
	    val mult: 'space * 'intvar * 'intvar * 'intvar -> unit
	    val power: 'space * 'intvar * 'intvar * 'intvar -> unit

	    val nega : 'space * 'boolvar * 'boolvar -> unit
	    val conj : 'space * 'boolvar * 'boolvar * 'boolvar -> unit
	    val disj  : 'space * 'boolvar * 'boolvar * 'boolvar -> unit
	    val impl : 'space * 'boolvar * 'boolvar * 'boolvar -> unit
	    val equi  : 'space * 'boolvar * 'boolvar * 'boolvar -> unit
	    val exor : 'space * 'boolvar * 'boolvar * 'boolvar -> unit
	    val conjV: 'space * 'boolvar vector * 'boolvar -> unit
	    val disjV : 'space * 'boolvar vector * 'boolvar -> unit

	    val branch : 'space * 'intvar vector * 
			 'b_var_sel * 'b_val_sel -> unit

	    val assign : 'space * 'intvar vector * 'avalsel -> unit
	end

	structure UnsafeGecodeFS : sig
            val setvar : 'space -> 'setvar

	    val lowerBound : 'space * 'setvar * int vector -> unit
	    val upperBound : 'space * 'setvar * int vector -> unit
	    val incl : 'space * 'intvar * 'setvar -> unit
	    val excl : 'space * 'intvar * 'setvar -> unit
	    val the : 'space * 'intvar * 'setvar -> unit
            val min : 'space * 'intvar * 'setvar -> unit
            val max : 'space * 'intvar * 'setvar -> unit
	    val card : 'space * 'setvar * 'intvar -> unit
	    val cardRange : 'space * int * int * 'setvar -> unit
	    val superOfInter : 'space * 'setvar * 'setvar * 'setvar -> unit
	    val subOfUnion : 'space * 'setvar * 'setvar * 'setvar -> unit
	    val compl : 'space * 'setvar * 'setvar -> unit
	    val difference : 'space * 'setvar * 'setvar * 'setvar -> unit
	    val intersect : 'space * 'setvar * 'setvar * 'setvar -> unit
	    val intersectN : 'space * 'setvar vector * 'setvar -> unit
	    val union : 'space * 'setvar * 'setvar * 'setvar -> unit
	    val unionN : 'space * 'setvar vector * 'setvar -> unit
	    val subset : 'space * 'setvar * 'setvar -> unit
            val noSubset : 'space * 'setvar * 'setvar -> unit
	    val disjoint : 'space * 'setvar * 'setvar -> unit
	    val partition : 'space * 'setvar * 'setvar * 'setvar -> unit
	    val partitionN : 'space * 'setvar vector * 'setvar -> unit
            val distinct : 'space * 'setvar * 'setvar -> unit
            val distinctN : 'space * 'setvar vector -> unit
            val equals : 'space * 'setvar * 'setvar -> unit

	    val universal : 'space -> 'setvar
	    val is : 'space * 'setvar -> bool

	    val inclR : 'space * 'intvar * 'setvar * 'boolvar -> unit
	    val isInR : 'space * int * 'setvar * 'boolvar -> unit
            val equalR : 'space * 'setvar * 'setvar * 'boolvar -> unit
            val subsetR : 'space * 'setvar * 'setvar * 'boolvar -> unit

	    val selectSetvar : 'space * 'setvar * 'setvar vector * 'intvar -> unit
	    val selectUnion : 'space * 'setvar * 'setvar vector * 'setvar -> unit
	    val selectInter : 'space * 'setvar * 'setvar vector * 'setvar -> unit

	    val getUpperBound : 'space * 'setvar -> (int*int) vector
	    val getLowerBound : 'space * 'setvar -> (int*int) vector
	    val getCard : 'space * 'setvar -> (int * int)
	    val getUnknown : 'space * 'setvar -> (int*int) vector
	    val getCardOfLowerBound : 'space * 'setvar -> int
	    val getCardOfUpperBound : 'space * 'setvar -> int
	    val getCardOfUnknown : 'space * 'setvar -> int

	    val setvarbranch : 'space * 'setvar vector * 
			       'fsb_var_sel * 'fsb_val_sel -> unit
            val print : 'space * 'setvar -> unit
	end
    end
end