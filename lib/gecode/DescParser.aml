structure DescParser =
struct
  datatype var_types = IntVar | BoolVar | SetVar | List of var_types
  datatype args =
           Var of var_types | DomSpec | Rel | ConLevel |
           Int | IntArgs | UInt | Bool | Void | Iterator of string |
           AvalSel | BvarSel | BvalSel | SetBvarSel | SetBvalSel | 
           Space | Status | Description | Other of string
           
  type desc = string * (args list * args)

  fun stripWhitespace (s where
                         (Char.isSpace(String.sub(s, String.size s - 1)))) =
      stripWhitespace (String.substring(s, 0, String.size s - 1))
    | stripWhitespace (s where (Char.isSpace(String.sub(s, 0)))) =
      stripWhitespace (String.extract(s, 1, NONE))
    | stripWhitespace s = s

  fun parseArg "intvar" = Var IntVar
    | parseArg "boolvar" = Var BoolVar
    | parseArg "setvar" = Var SetVar
    | parseArg "DomSpec&" = DomSpec
    | parseArg "reltype" = Rel
    | parseArg "const intvarargs&" = Var (List IntVar)
    | parseArg "const IntArgs&" = IntArgs
    | parseArg "conlevel" = ConLevel
    | parseArg "const boolvarargs&" = Var (List BoolVar)
    | parseArg "const setvarargs&" = Var (List SetVar)
    | parseArg "BranchDesc*" = Description
    | parseArg "int" = Int
    | parseArg "unsigned int" = UInt
    | parseArg "void" = Void
    | parseArg "bool" = Bool
    | parseArg "AvalSel" = AvalSel
    | parseArg "BvalSel" = BvalSel
    | parseArg "BvarSel" = BvarSel
    | parseArg "SetBvalSel" = SetBvalSel
    | parseArg "SetBvarSel" = SetBvarSel
    | parseArg (s as ("VarRanges<IntVar>" |
                         "UBIter<SetVar>" |
                         "LBIter<SetVar>" |
                         "Diff<UBIter<SetVar>, LBIter<SetVar> >" |
                         "I&"
                         )) = Iterator s
    | parseArg s = Other s

  fun parseInArgs s =
      case String.tokens (fn #"," => true | _ => false) s of
          nil => raise Empty
        | args => List.map (parseArg o stripWhitespace) args

  fun parseDecl def =
      case String.tokens (fn #"-" => true | _ => false) def of
          [inargs, outarg] => (parseInArgs inargs,
                               parseArg (stripWhitespace outarg))
        | _ => raise Empty

  fun parseLine "" = NONE
    | parseLine "\n" = NONE
    | parseLine (s where (String.isPrefix "//" s)) = NONE
    | parseLine s  =
      case String.tokens (fn #":" => true | _ => false) s of
          [name, def] => SOME (stripWhitespace name, parseDecl def)
        | _ => raise Empty

  fun parseFile' f =
      case TextIO.inputLine f
       of NONE   => nil
	| SOME s => case parseLine s of NONE => parseFile' f
                                      | SOME s => s::parseFile' f

  fun parseFile filename =
      let
	  val f = TextIO.openIn filename
      in
	  parseFile' f
	  before TextIO.closeIn f
      end

end 