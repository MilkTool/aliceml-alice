(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature SEARCH       from "SEARCH-sig"
import structure Space        from "Space"
import structure UnsafeGecode from "UnsafeGecode"

structure Search :> SEARCH =
struct
    open UnsafeGecode

    datatype 'p searchbestresult =
	     SB_CONSTRAIN of 'p Space.space * 'p Space.space
	   | SB_DONE
	   | SB_SOLUTION of 'p Space.space

    fun searchAll s =
	let
	    val se = getSearchEngine s
	    fun lazy nextSol () = 
		     let
			 val n = next se
		     in
			 case n of
			     NONE => nil
			   | SOME s' => s'::nextSol()
		     end
	in
	    nextSol()
	end

    fun searchOne s = next (getSearchEngine s)

    fun searchBest (s, constrain) =
	let
	    val se = getSearchBestEngine s
	    fun nextSol () =
		case nextBest se of
		    SB_DONE => nil
		  | SB_SOLUTION s' => s'::(lazy nextSol())
		  | SB_CONSTRAIN(s1, s2) =>
		    (constrain(s1, s2);
		     nextSol())
	in
	    lazy nextSol()
	end

    fun bab (space, constrain) =
	let
	    fun babe fs bs best =
		case fs of
		    nil =>
		    (case bs of nil => best
			      | b::br => (constrain(b, valOf best);
					  babe [b] br best))
		  | f::fr =>
		    case Space.status f of
			Space.FAILED => (Space.discard f;
					 babe fr bs best)
		      | Space.SOLVED => babe nil (fr@bs) (SOME f)
		      | Space.BRANCH =>
			let
			    val c = Space.clone f
			in
			    Space.commit(f, 1);
			    Space.commit(c, 2);
			    babe (f::c::fr) bs best
			end
	in
	    babe [Space.clone space] nil NONE
	end
end
