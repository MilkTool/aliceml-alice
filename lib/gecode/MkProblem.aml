(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import "PROBLEM-sig"
import "UnsafeGecode"

functor MkProblem() :> PROBLEM =
struct
    type problem

    datatype domain_element =
	     SINGLE of int
	   | RANGE  of int * int
		       
    type domain = domain_element vector

    val space = UnsafeGecode.makeSpace()

    fun fdvar v = UnsafeGecode.fdvar(space,
				     Vector.map
				     (fn SINGLE i => (i,i)
				       | RANGE r => r) v)

    fun fdvarR(v, b) = UnsafeGecode.fdvarR(space,
					   Vector.map
					       (fn SINGLE i => (i,i)
						 | RANGE r => r) v,
					   b)

    fun fdvarVec(n, v) = Vector.tabulate (n, fn _ => fdvar v)
    fun fdvarVecR(n, v, b) = Vector.tabulate (n, fn _ => fdvarR(v,b))

    fun range r = fdvar #[RANGE r]
    fun rangeVec(n,r) = fdvarVec(n, #[RANGE r])
		       
    fun boolvar() = UnsafeGecode.boolvar space
    fun boolvarVec n = Vector.tabulate (n, fn _ => boolvar())
end
