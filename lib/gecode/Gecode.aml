(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import "UnsafeGecode"
import "GECODE-sig"
import "x-alice:/lib/system/UnsafeValue"

signature GECODE =
  sig
      type space
      type intvar
      type boolvar
      type searchengine
      type searchbestengine

      exception NoVal

      datatype b_var_sel =
	       B_MAX_MAX
	     | B_MAX_MIN
	     | B_MIN_MAX
	     | B_MIN_MIN
	     | B_NONE
	     | B_SIZE_MAX
	     | B_SIZE_MIN
	     | B_WIDTH_MAX
	     | B_WIDTH_MIN

      datatype b_val_sel =
	       B_MAX
	     | B_MED
	     | B_MIN
	     | B_SPLIT_MAX
	     | B_SPLIT_MIN
	     | B_VAL


      val makeSpace : unit -> space
      val intvar : space * int * int -> intvar
      val intvarR : space * int * int * boolvar -> intvar
      val boolvar : space -> boolvar
      val boolvar2intvar : boolvar -> intvar
					
      val getMin : space * intvar -> int
      val getMax : space * intvar -> int
      val getVal : space * intvar -> int
      val getBool : space * boolvar -> bool

      datatype relation =
	       EQ (* Equality         == *)
	     | NQ (* Disequality      != *)
	     | LQ (* Less or equal    <= *)
	     | LE (* Less             <  *)
	     | GQ (* Greater or equal >= *)
	     | GR (* Greater          >  *)

      datatype conlevel = 
	       BND | BND_EX | DEF | DOM | DOM_EX | 
	       OTR | VAL | VAL_EX

      val rel : space * intvar * relation * intvar -> unit
      val relI : space * intvar * relation * int -> unit
      val relR : space * intvar * relation * intvar * boolvar -> unit
      val relIR : space * intvar * relation * int * boolvar -> unit
      val eq : space * intvar * intvar * conlevel -> unit
      val eqV : space * intvar vector * conlevel -> unit
      val eqR : space * intvar * intvar * boolvar * conlevel -> unit
      val eqVR : space * intvar vector * boolvar * conlevel -> unit

      val distinct : space * intvar vector * conlevel -> unit
      val distinctI : space * (int * intvar) vector * conlevel -> unit

      val linear : space * (int * intvar) vector * relation * int *
		   conlevel -> unit
      val linearR : space * (int * intvar) vector * relation * int *
		    boolvar * conlevel -> unit

      val bool_not : space * boolvar * boolvar -> unit
      val bool_and : space * boolvar * boolvar * boolvar -> unit
      val bool_or  : space * boolvar * boolvar * boolvar -> unit
      val bool_imp : space * boolvar * boolvar * boolvar -> unit
      val bool_eq  : space * boolvar * boolvar * boolvar -> unit
      val bool_xor : space * boolvar * boolvar * boolvar -> unit
      val bool_andV: space * boolvar vector * boolvar -> unit
      val bool_orV : space * boolvar vector * boolvar -> unit

      val branch : space * intvar vector * b_var_sel * b_val_sel -> unit

      val getSearchEngine : space -> searchengine
      val next : searchengine -> space option

      datatype searchbestresult =
	       SB_CONSTRAIN of space * space
	     | SB_DONE
	     | SB_SOLUTION of space
				 
      val getSearchBestEngine : space -> searchbestengine
      val nextBest : searchbestengine -> searchbestresult

      val searchAll : space -> space list
      val searchOne : space -> space option
      val searchBest : space * (space * space -> unit) -> space list

      datatype status = BRANCH | FAILED | SOLVED
      val status  : space -> status
      val commit  : space * int -> unit
      val clone   : space -> space
      val discard : space -> unit
      val alive   : space -> unit

  end

structure Gecode :> GECODE =
  struct
    type space
    type intvar
    type boolvar
    type searchengine

    datatype b_var_sel =
	     B_MAX_MAX
	   | B_MAX_MIN
	   | B_MIN_MAX
	   | B_MIN_MIN
	   | B_NONE
	   | B_SIZE_MAX
	   | B_SIZE_MIN
	   | B_WIDTH_MAX
	   | B_WIDTH_MIN

    datatype b_val_sel =
	     B_MAX
	   | B_MED
	   | B_MIN
	   | B_SPLIT_MAX
	   | B_SPLIT_MIN
	   | B_VAL

    datatype relation =
	     EQ (* Equality         == *)
	   | GQ (* Greater or equal >= *)
	   | GR (* Greater          >  *)
	   | LE (* Less             <  *)
	   | LQ (* Less or equal    <= *)
	   | NQ (* Disequality      != *)

    datatype conlevel = VAL | VAL_EX | BND | BND_EX
		      | DOM | DOM_EX | OTR | DEF

    type searchbestengine
    datatype searchbestresult =
	     SB_CONSTRAIN of space * space
	   | SB_DONE
	   | SB_SOLUTION of space

    datatype status = BRANCH | FAILED | SOLVED

    open UnsafeGecode

    exception NoVal

    val boolvar2intvar = UnsafeValue.cast

    fun getVal (s,v) =
	let
	    val min = getMin(s,v)
	in
	    if min<>getMax(s,v) then raise NoVal
	    else min
	end

    fun searchAll s =
	let
	    val se = getSearchEngine s
	    fun lazy nextSol () = 
		     let
			 val n = next se
		     in
			 case n of
			     NONE => nil
			   | SOME s' => s'::nextSol()
		     end
	in
	    nextSol()
	end

    val searchOne = next o getSearchEngine

    fun searchBest (s, constrain) =
	let
	    val se = getSearchBestEngine s
	    fun nextSol () =
		case nextBest se of
		    SB_DONE => nil
		  | SB_SOLUTION s' => s'::(lazy nextSol())
		  | SB_CONSTRAIN(s1, s2) =>
		    (constrain(s1, s2);
		     nextSol())
	in
	    lazy nextSol()
	end
    fun getBool v = getVal(boolvar2intvar v)=1
  end
