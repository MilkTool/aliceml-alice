(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature FD           from "FD-sig"
import structure Space        from "Space"
import structure UnsafeGecode from "UnsafeGecode"
import structure UnsafeValue  from "x-alice:/lib/system/UnsafeValue"

structure FD :> FD =
struct
    exception NoFD
    exception NoBool

    datatype relation =
	     EQ (* Equality         == *)
	   | NQ (* Disequality      != *)
	   | LQ (* Less or equal    <= *)
	   | LE (* Less             <  *)
	   | GQ (* Greater or equal >= *)
	   | GR (* Greater          >  *)
	     
    datatype conlevel = 
	     BND | BND_EX | DEF | DOM | DOM_EX | 
	     OTR | VAL | VAL_EX

    datatype avalsel = AVAL_MIN | AVAL_MED | AVAL_MAX

    datatype b_var_sel =
	     B_MAX_MAX
	   | B_MAX_MIN
	   | B_MIN_MAX
	   | B_MIN_MIN
	   | B_NONE
	   | B_SIZE_MAX
	   | B_SIZE_MIN
	   | B_WIDTH_MAX
	   | B_WIDTH_MIN
	     
    datatype b_val_sel =
	     B_MAX
	   | B_MED
	   | B_MIN
	   | B_SPLIT_MAX
	   | B_SPLIT_MIN
	   | B_VAL

   open UnsafeGecode

   type 'problem fdvar
   type 'problem boolvar

   datatype domain_element =
	    SINGLE of int
	  | RANGE  of int * int
		      
   type domain = domain_element vector
		 
   fun fdvar(space,v) = UnsafeGecode.fdvar(space,
					   Vector.map
					       (fn SINGLE i => (i,i)
						 | RANGE r => r) v)
		 
   fun fdvarR(space,v, b) = UnsafeGecode.fdvarR(space,
						Vector.map
						    (fn SINGLE i => (i,i)
						      | RANGE r => r) v,
						b)
		      
   fun fdvarVec(space,n, v) = Vector.tabulate (n, fn _ => fdvar(space,v))
   fun fdvarVecR(space,n, v, b) = Vector.tabulate (n, fn _ => fdvarR(space,v,b))
			    
   fun range(space,r) = fdvar (space,#[RANGE r])
   fun rangeVec(space,n,r) = fdvarVec(space, n, #[RANGE r])
		       
   fun boolvar space = UnsafeGecode.boolvar space
   fun boolvarVec(space,n) = Vector.tabulate (n, fn _ => boolvar space)
		      
   val boolvar2fdvar = UnsafeValue.cast

   fun getVal (s,v) =
       let
	   val min = getMin(s,v)
       in
	   if min<>getMax(s,v) then raise NoFD
	   else min
       end

   fun getBool v = getVal(boolvar2fdvar v)=1 handle NoFD => raise NoBool

end
