(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Space        from "Space"
import signature FD           from "FD-sig"
import structure UnsafeGecode from "UnsafeGecode"

structure FD :> FD where type space = Space.space =
struct
    type space = Space.space

    datatype relation =
	     EQ (* Equality         == *)
	   | NQ (* Disequality      != *)
	   | LQ (* Less or equal    <= *)
	   | LE (* Less             <  *)
	   | GQ (* Greater or equal >= *)
	   | GR (* Greater          >  *)
	     
    datatype conlevel = 
	     BND | DEF | DOM | VAL

    datatype avalsel = AVAL_MIN | AVAL_MED | AVAL_MAX

    datatype b_var_sel =
	     B_MAX_MAX
	   | B_MAX_MIN
	   | B_MIN_MAX
	   | B_MIN_MIN
	   | B_NONE
	   | B_SIZE_MAX
	   | B_SIZE_MIN
	   | B_WIDTH_MAX
	   | B_WIDTH_MIN
	     
    datatype b_val_sel =
	     B_MAX
	   | B_MED
	   | B_MIN
	   | B_SPLIT_MAX
	   | B_SPLIT_MIN
	   | B_VAL

    exception NotAssigned
              
    type domain = (int * int) vector
   
   structure UnsafeGecodeFD = UnsafeGecode.UnsafeGecodeFD
   open UnsafeGecodeFD

   type intvar
   type boolvar = intvar

   val varStamp = UnsafeGecode.UnsafeGecodeBase.varStamp
		 
   fun intvar(space,v) = UnsafeGecodeFD.intvar(space,
					       v)
   fun intvarVec(space,n, v) = Vector.tabulate (n, fn _ => intvar(space,v))
   fun range(space,r) = intvar (space,#[r])
   fun rangeVec(space,n,r) = intvarVec(space, n, #[r])
   fun boolvar space = UnsafeGecodeFD.boolvar space
   fun boolvarVec(space,n) = Vector.tabulate (n, fn _ => boolvar space)
		 
   fun intvar2boolvar(space,d) = (dom(space,d,#[(0,1)]); d)

   structure Reified =
       struct
           fun intvar(space,v, b) =
	       UnsafeGecodeFD.intvarR(space,
				      v, b)           
	   fun intvarVec(space,n, v, b) =
	       Vector.tabulate (n, fn _ => intvar(space,v,b))
	   val dom = UnsafeGecodeFD.domR
	   val rel = UnsafeGecodeFD.relR
	   val relI = UnsafeGecodeFD.relIR
	   val equal = UnsafeGecodeFD.equalR
	   val linear = UnsafeGecodeFD.linearR
       end

   structure Reflect =
       struct
           val min = UnsafeGecodeFD.getMin
	   val max = UnsafeGecodeFD.getMax
           val dom = UnsafeGecodeFD.getDom
	   fun value (s,v) =
	       let
		   val min = min(s,v)
	       in
		   if min<>max(s,v) then raise NotAssigned
		   else min
	       end

	   val boolvar2intvar = fn x => x

	   fun boolVal v = value(boolvar2intvar v)=1
       end

end
