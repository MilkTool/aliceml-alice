(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

signature FS =
sig
    type space
    type intvar
    type boolvar
    type setvar

    (* Allocation of finite set variables *)
    val setvar :  space  ->  setvar
    val setvarVec :  space * int ->  setvar vector

    val lowerBound : space * int vector -> setvar
    val upperBound : space * int vector -> setvar
    val bounds : space * int vector * int vector -> setvar

    (* Standard Propagators *)
    val cardRange : space * int * int * setvar -> unit
    (* val isIn : space * int * setvar -> bool *)

    val superOfInter : space * setvar * setvar * setvar -> unit
    val subOfUnion : space * setvar * setvar * setvar -> unit
    val compl : space * setvar * setvar -> unit
    (* val complIn : space * setvar * setvar * setvar -> unit *)
    val difference : space * setvar * setvar * setvar -> unit
    val intersect : space * setvar * setvar * setvar -> unit
    val intersectN : space * setvar vector * setvar -> unit
    val union : space * setvar * setvar * setvar -> unit
    val unionN : space * setvar vector * setvar -> unit
    val subset : space * setvar * setvar -> unit
    val noSubset : space * setvar * setvar -> unit
    val disjoint : space * setvar * setvar -> unit
(*    val disjointN : space * setvar vector -> unit *)
    val distinct : space * setvar * setvar -> unit
    val distinctN : space * setvar vector -> unit
    val partition : space * setvar * setvar * setvar -> unit
    val partitionN : space * setvar vector * setvar -> unit
    val equals : space * setvar * setvar -> unit
    val convex : space * setvar -> unit
    val convexHull : space * setvar * setvar -> unit

    structure Value :
	sig
	    val make : space * int vector -> setvar
	    val empty : space -> setvar
	    val single : space * int -> setvar
	    val universal : space -> setvar
	    val is : space* setvar -> bool
	end

    structure Int :
        sig
            val incl : space * intvar * setvar -> unit
            val excl : space * intvar * setvar -> unit
            val the : space * intvar * setvar -> unit
	    val min : space * intvar * setvar -> unit
	    val max : space * intvar * setvar -> unit
            val card : space * intvar * setvar -> unit
	    val match : space * setvar * intvar vector -> unit
(*	    val minN : setvar * intvar vector -> unit *)
(*	    val maxN : setvar * intvar vector -> unit *)
	end

    structure Reified : sig
	val isIn : space * int * setvar * boolvar -> unit
	val areIn : space * (boolvar * int) vector * setvar -> unit
	val incl : space * intvar * setvar * boolvar -> unit
	val equal : space * setvar * setvar * boolvar -> unit
        val subset : space * setvar * setvar * boolvar -> unit
(*	val partition : setvar list * int list * setvar * bin list -> unit *)
    end

    structure Selection : sig
	val setvar : space * setvar * setvar vector * intvar -> unit
	val union : space * setvar * setvar vector * setvar -> unit
	val inter : space * setvar * setvar vector * setvar -> unit
    end
	
    structure Reflect : sig
	val card : space * setvar -> (int * int)
	val lowerBound : space * setvar -> (int*int) vector
	val upperBound : space * setvar -> (int*int) vector
	val unknown : space * setvar -> (int*int) vector
	val cardOfLowerBound : space * setvar -> int
	val cardOfUpperBound : space * setvar -> int
	val cardOfUnknown : space * setvar -> int
        val print : space * setvar -> unit (* DEBUGGING ONLY! *)
    end

    (* Branching strategies *)

    datatype fsb_var_sel =
	     FSB_MAX_CARD
	   | FSB_MIN_CARD
           | FSB_MIN_UNKNOWN_ELEM
	   | FSB_NONE
	     
    datatype fsb_val_sel =
	     FSB_MAX
	   | FSB_MIN

    val setvarbranch :  space *  setvar vector * fsb_var_sel *
			fsb_val_sel -> unit
				
end
