import structure Space from "x-alice:/lib/gecode/Space"

import structure Debug from "Debug"

(* Recomputation policy and optimizations. *)
signature POLICY =
sig
  val root : Space.space  (* Root node *)
  val copyq : int -> bool (* All spaces s.t. copyq depth = true are cloned *)

  (* Branch and bound *)
  val bab : bool (* Indicates if branch and bound is active. *)

  type sol (* The type of solutions *)
  val readSolution : Space.space -> sol
  val bound : Space.space * sol -> unit (* bound the given space *)
  val compare : sol * sol -> bool (* true if sol-2 better than sol-1.See (a) *)

  (* Debug level *)
  val mask : Debug.db_mask
end

(* (a) : The function 'compare' is called only
 *       if you use the function 'Search.init' or 'Search.betterThan'.
 *       In particular, it is not used by local Branch and Bound search *)

functor BasicPolicy (val root : Space.space val rdist : int) :> POLICY =
struct

  val root = root
  fun copyq d = d mod rdist = 0
        
  val bab = false
  type sol = unit
  fun readSolution _ = assert false
  fun bound _ = assert false
  fun compare (_, _) = assert false

  val mask = Debug.dbZero

end
