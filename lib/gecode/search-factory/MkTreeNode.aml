import signature POLICY      from "TREENODE-sig"
import signature TREENODE    from "TREENODE-sig"
import functor   MkSpaceNode from "MkSpaceNode"

functor MkTreeNode (Policy:POLICY) :> TREENODE =
struct

  structure SpaceNode = MkSpaceNode Policy

  datatype tree_node = Node of node_rep

  withtype node_rep = {spacenode : SpaceNode.t ,
                       left      : tree_node ,
                       right     : tree_node}

  type t = tree_node

  (* Given a space node, creates a new tree node. *)
  fun fromSpaceNode spaceNode = 
    Node {spacenode = spaceNode ,
          left  = lazy fromSpaceNode (SpaceNode.newChild (spaceNode, 1)) ,
          right = lazy fromSpaceNode (SpaceNode.newChild (spaceNode, 2)) }

  fun new space = fromSpaceNode (SpaceNode.new space)

  fun getLeft  (Node node) = #left node
  fun getRight (Node node) = #right node
                        
  fun getSpace (Node node) = SpaceNode.getSpace (#spacenode node)
  fun getPath  (Node node) = SpaceNode.getPath  (#spacenode node)
  fun status   (Node node) = SpaceNode.status   (#spacenode node)

end
