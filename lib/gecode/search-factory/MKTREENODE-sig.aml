import structure Space  from "x-alice:/lib/gecode/Space"
import signature POLICY from "MKSPACENODE-sig"
import structure Path  from "Path"

signature POLICY = POLICY

signature MKTREENODE = fct (Policy:POLICY) ->
sig
  exception Child

  type path = int list
  type tree_node
  type t = tree_node

  (* Returns a tree_node corresponding to the root space Policy.root. *)
(*  val fromPath : path -> tree_node*)
  val root : tree_node

  (* Returns the left (right) child, raise Child if no child. *)
  val getLeft  : tree_node -> tree_node
  val getRight : tree_node -> tree_node

  (* getSpace node
   * returns the computation space associated with this node. *)
  val getSpace : tree_node -> Space.space

  (* Like Space.status *)
  val status : tree_node -> Space.status

  (* Returns the path corresponding to this node. *)
  val getPath : tree_node -> Policy.sol Path.t

  (* Sets the current best solution (used by distributed search) *)
  val setBest : Policy.sol -> unit

end
