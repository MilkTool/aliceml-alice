import structure MkTreeNode from "MkTreeNode"
import structure Space      from "x-alice:/lib/gecode/Space"
import structure FD         from "x-alice:/lib/gecode/FD"

import structure Explorer   from "x-alice:/tools/Explorer"



(* Recomputation Policy : fixed distance *)
val rdist = 3

structure TreeNode = MkTreeNode (fun copyq d = d mod rdist = 0)

val itos = Int.toString

(*** Search problem :
 *   Choose one number in each column (numbers1, numbers2)
 *   All numbers must be different
 *)
val max = 10
val size = 6
val numbers1 = #[2, 1, 2, 5, 1, 6]
val numbers2 = #[1, 3, 4, 3, 6, 7]

infix %
fun a % b = Vector.sub (a,b)

val cn = FD.BND
 
fun fromInt sp n = FD.intvar (sp,#[(n,n)])
fun toInt   sp v = FD.Reflect.value (sp,v)
  

fun script space =  
  let
    (* Some variables. *)
    val vars  = FD.rangeVec   (space, size, (0, max))
    val reif  = FD.boolvarVec (space, size)
    val nreif = FD.boolvarVec (space, size) (* not reif *)
    val reif2 = Vector.map FD.Reflect.boolvar2intvar reif
    val sum   = FD.intvar (space, #[(0, size*max)])
    val kvars = Vector.tabulate
      (size+1, (fn i => if i<size then (1,vars%i) else (~1, sum)))
    fun getSolution space = Vector.map (toInt space) vars
  in
    (* Propagators. *)
    (FD.distinct (space, vars, cn) ;
     VectorPair.app
     (fn (b1, b2) => FD.nega(space, b1, b2)) (reif, nreif) ;
     
     Vector.appi
     (fn (i, var) =>
      (FD.Reified.rel
       (space, var, FD.EQ, fromInt space (numbers1%i), reif%i) ;
       FD.Reified.rel
       (space, var, FD.EQ, fromInt space (numbers2%i), nreif%i)))
     vars ;
     
     (* Sum *)
     FD.linear (space, kvars, FD.EQ, 0, cn) ;
     
     FD.branch (space, reif2, FD.B_NONE, FD.B_MIN);
     (getSolution, vars))
  end

fun queens space n cl =
    let
	open FD

	val v = rangeVec(space, n, (0, n-1))
	val v1 = Vector.tabulate (n, fn n => (n, Vector.sub(v,n)))
	val v2 = Vector.tabulate (n, fn n => (~n, Vector.sub(v,n)))
        fun getSolution space = Vector.map (toInt space) v
    in
	distinctOffset(space, v1, cl);
	distinctOffset(space, v2, cl);
	distinct(space, v, cl);
	branch(space, v, B_SIZE_MIN, B_MIN);
	(getSolution, v)
    end

fun queensScript space = queens space 6 cn

(*  
fun iOrder (sp, sol) =
  let val lsum = Vector.foldl (fn (e,s) => e+s) 0 sol
    val vsum = fromInt sp lsum
  in
    FD.rel (sp, sum, FD.LE, vsum)
  end

fun xOrder (a,b) =
  let
    val sum1 = Vector.foldl (fn (e,s) => e+s) 0 a
    val sum2 = Vector.foldl (fn (e,s) => e+s) 0 a
  in
    sum1 < sum2
  end
*)
  
fun printSol v =
    Vector.foldl (fn (a, s) => s ^ " ; " ^ itos a) "" v
    

(* The initial root space. *)
val root = Space.new () 
val (getSolution, _) = queensScript root
val rootnode = TreeNode.new root

fun print_path node =
  (List.app
   (fn i => print ((Int.toString i) ^ ", "))
   (TreeNode.getPath node);
   print "\n")

val nbsol = ref 0

fun search node =
  case TreeNode.status node of
    Space.FAILED => () (* (print "A failure at " ; print_path node) *)
  | Space.SOLVED =>
    (
(*
    print "A solution (namely " ;
    print (printSol (getSolution (TreeNode.getSpace node))) ;
    print ") at " ; print_path node *)
    nbsol := !nbsol + 1)

  | Space.BRANCH _ =>
    (
     (* print "A branch at " ; print_path node ; *)
     search (TreeNode.getLeft node) ;
     search (TreeNode.getRight node) )
  

val explorer = Explorer.exploreAllScript queensScript

val _ =
  (search rootnode ;
   print "I found " ; print (Int.toString (!nbsol)) ;
   print " solutions.\n" ;
   (* OS.Process.exit OS.Process.success ; *)
   () )
