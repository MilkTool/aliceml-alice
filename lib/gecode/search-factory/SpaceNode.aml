import structure Space       from "x-alice:/lib/gecode/Space"
import structure Debug       from "Debug"
import signature SPACENODE   from "SPACENODE-sig"
import structure MkSpaceNode from "MkSpaceNode"
import structure Path        from "Path"

structure SpaceNode :> SPACENODE =
struct

  datatype space_node = Node of node_rep
  withtype node_rep =
    {newChild : int -> space_node ,
     getSpace : unit -> Space.space ,
     status   : Space.status ,
     getPath  : unit Path.t}

  type t = space_node

  exception Child

  fun root (space, rdist) =
  let
    structure Policy =
      struct
        val root = space
        fun copyq d = d mod rdist = 0
          
        type sol = unit
        fun getSolution _ = ()
        val bound = NONE
        val mask = Debug.dbZero
      end

    structure LocalSpaceNode = MkSpaceNode Policy

    fun makeNode localNode =
      let
        fun newChild i =
          makeNode (LocalSpaceNode.newChild (localNode, i))
          handle LocalSpaceNode.Child => raise Child

        fun getSpace () = LocalSpaceNode.getSpace localNode
        val status = lazy LocalSpaceNode.status localNode
        val getPath = lazy LocalSpaceNode.getPath localNode
      in
        Node {newChild = newChild ,
              getSpace = getSpace ,
              status   = status ,
              getPath  = getPath }
      end

  in
    makeNode LocalSpaceNode.root
  end

  fun newChild (Node sp, i) = #newChild sp i
  fun getSpace (Node sp)    = #getSpace sp ()
  fun status   (Node sp)    = #status sp
  fun getPath  (Node sp)    = #getPath sp

end
