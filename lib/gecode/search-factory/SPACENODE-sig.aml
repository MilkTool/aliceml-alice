import structure Space  from "x-alice:/lib/gecode/Space"

(* Recomputation policy. *)
signature POLICY =
sig
  val copyq : int -> bool
end


signature SPACENODE =
sig
  type space_node
  type t = space_node

  exception Child

  (* new root
   * Creates a new space_node from the initial gecode-space 'root'.
   * root status is asked, then cloned and never modified again. *)
  val new : Space.space -> space_node

  (* newChild (mom, i)
   * Creates a new space_node as child of node mom with alternative number i.
   * Raises Child if this alternative does not exist. *)
  val newChild : space_node * int -> space_node

  (* getSpace node
   * returns the computation space associated with this node. *)
  val getSpace : space_node -> Space.space

  val status : space_node -> Space.status

  (* Returns the path corresponding to this node. *)
  val getPath : space_node -> int list

end
