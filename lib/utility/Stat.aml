(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure GlobalStamp   from "GlobalStamp"
import functor   MkHashImpMap  from "MkHashImpMap"
import functor   FromEqHashKey from "HASH_KEY-sig"
import signature STAT          from "STAT-sig"

structure Stat :> STAT =
struct
    type 'a stat = GlobalStamp.t
    type value

    exception Remote

    structure Map = MkHashImpMap(FromEqHashKey(GlobalStamp))

    val map = Map.new() : value Map.t

    __primitive val cast : 'a -> 'b = "Unsafe.cast"

    fun stat x =
	let
	    val stamp = GlobalStamp.new()
	in
	    Map.insertDisjoint(map, stamp, cast x);
	    stamp
	end

    fun !!stamp =
	case Map.lookup(map, stamp)
	  of NONE   => raise Remote
	   | SOME x => cast x
end
