(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Inf from "x-alice:/lib/rtt/Inf"
import structure Type from "x-alice:/lib/rtt/Type"
import structure Reflect from "x-alice:/lib/system/Reflect"
import structure Types from "Types"

local
    open Types
in

signature UPDATE = 
    sig

        (* constraint watcher *) 
        val watcher: 
	    'a  * Reflect.value * 
	    (Reflect.value * Type.t  * node * int * int -> node) * 
	    (Reflect.module * Inf.t  * node * int * int -> node)
	    -> Thread.thread

	val reinspect:
	    node * (Reflect.value * Type.t * node * int * int -> node) * 
	    (Reflect.module* Inf.t * node * int * int -> node) -> unit

	val foldDepth: 
	    node * int * (Reflect.value * Type.t * node * int * int -> node) *
	    (Reflect.module * Inf.t * node * int * int -> node) -> unit

	val foldWidth: 
	    node * int * (Reflect.value * Type.t * node * int * int -> node) *
	    (Reflect.module * Inf.t * node * int * int -> node) -> unit

       (* wird in Init bei "shrink" benoetigt *)
	val findHighestDepth: node -> int

end

end
