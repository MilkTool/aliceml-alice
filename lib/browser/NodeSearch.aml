(* Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 datatype intention = DRAW | SEARCH of int * int *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure TextIO from "x-alice:/lib/system/TextIO"
import structure Types from "Types"
import structure MainDictionary from "MainDictionary"
import structure Layout from "Layout"
import structure Helper from "Helper"
import structure WindowHelper from "WindowHelper"
import structure Settings from "Settings"
import structure DrawNodes from "DrawNodes"
import signature NODE_SEARCH from "NODE_SEARCH-sig"

local
open Types Layout Helper
in

structure NodeSearch :> NODE_SEARCH =
struct

    exception unknown

    fun iterate (dict,x,y,cur_pos_y,i,highest_i) = 
	if i > highest_i 
	      then (0,0,NONE) 
	  else
	      case MainDictionary.lookup(dict,i) of
        NONE => iterate(dict,x,y,cur_pos_y,i+1,highest_i)
      | SOME node => let val _ = 
	    TextIO.print("starting iteration with cur_pos_y: " 
			 ^Int.toString(cur_pos_y) ^ "\n")
			 val (new_x,new_y,nodefound) = 
			     DrawNodes.draw(node,0,cur_pos_y,
					    DrawNodes.SEARCH(x,y))
		     in
			 case nodefound of
        NONE => iterate (dict,x,y,new_y+2,i+1,highest_i)
      | SOME n => (new_x,new_y,nodefound)
	    end
						     
    fun search (dict,real_x, real_y) = 
	let
	    val int_x = (Real.trunc(real_x))
	    val font_width = WindowHelper.fontWidth(!Settings.font)
	    val x = int_x div font_width
	    val int_y = (Real.trunc(real_y))
	    val font_height = WindowHelper.fontHeight(!Settings.font)
	    val y = int_y div font_height
	    val highest_i = MainDictionary.getHighestIndexAssigned(dict)
	    val _ = TextIO.print("searching for x:" ^ Int.toString(x) ^ " and y:" ^Int.toString(y)
				  ^ " \n")
	in
	    iterate (dict,x,y,0,0,highest_i)
	end

end

end (* local end *)
