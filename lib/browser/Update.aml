(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Reflect from "x-alice:/lib/system/Reflect";
import structure UnsafeValue from "x-alice:/lib/system/UnsafeValue";
import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Types from "Types"
import structure Helper from "Helper"
import structure MainDictionary from "MainDictionary"
import structure ReinspectedRelDict from "ReinspectedRelDict"
import structure TransientDictionary from "TransientDictionary"
import structure Dictionaries from "Dictionaries"
import structure Layout from "Layout"
import structure WindowHelper from "WindowHelper"
import structure WindowManager from "WindowManager"
import structure DrawNodes from "DrawNodes"
import structure Server from "Server"
import structure Services from "Services"
import structure Settings from "Settings"
import structure NewNodeHelper from "NewNodeHelper"
import signature UPDATE from "UPDATE-sig"

import structure TextIO from "x-alice:/lib/system/TextIO"
import structure Inspector from "x-alice:/lib/tools/Inspector"

local
    open Types Helper 
in

structure Update :> UPDATE = 
struct
    
    exception UpdateError
     
    (* updateChild *)
    fun updateChild (p,i,n) = case p of
	Concat(r) => (Array.update(#kids(r),i,n)
		      ; if not(getParent(n) = Empty)
			    then updateChild(#parent(r),getIndex(p),p)
			else () )
      | Container(r) => (Array.update(#kids(r),i,n)
			 ; if not(getParent(n) = Empty)
			       then updateChild(#parent(r),getIndex(p),p)
			   else () )
      | RelNode(r) => (#content(r) := n
		       ; if not(getParent(n) = Empty)
			     then updateChild(#parent(r),getIndex(p),p) 
			 else () )
      | Empty => () 
      | _ => raise UpdateError
	    
    (* setDazzled *)
    fun setDazzled n = 
	case n of
	Simple(r) => ( #status(r) := DAZZLED
		      ; setDazzled(getParent(n)) )
      | Concat(r) => ( #status(r) := DAZZLED
		      ; setDazzled(getParent(n)) )
      | Container(r) => ( #status(r) := DAZZLED
			 ; setDazzled(getParent(n)) )
      | RelNode(r) => ( #status(r) := DAZZLED
 		       ; setDazzled(getParent(n)) )
      | RelRefNode(r) => ( #status(r) := DAZZLED
			  ; setDazzled(getParent(n)) )
      | Limit(r) => ( #status(r) := DAZZLED
		     ; setDazzled(getParent(n)) )
      | Empty => () 
	    
    (* iterMove *)	    
    fun iterMove (dict,dy,i,highest_i)
	= if i > highest_i 
	      then () 
	  else
	      case MainDictionary.lookup(dict,i) of
	      NONE => iterMove(dict,dy,i+1,highest_i)
            | SOME (node,line) 
	      => ( Services.moveGroup(getGroup(node),0,dy)
		 ;  let
		       val dy' =(Real.fromInt
				 (Services.fontHeight() * dy))
		       val _ = TextIO.print(" dy' is "
					    ^ (Real.toString dy')
					    ^ " and Index is "
					    ^ Int.toString(i)
					    ^ "\n")
		   in
		     Services.yPosSepLine(line,getGroup(node)) 
		     (*  Services.yPosSepRel(line,dy)  *)
		   end 
		  ; iterMove (dict,dy,i+1,highest_i) )
		  
    (* update *)
    and update (n,va,f,g) = 
	if !(Settings.relmode) andalso isRelNode(getParent(n)) 
	    then ()
	else 
	( setDazzled n 
	 ; let val ind = getAncIndex n 
	       val (anc,ancline) = valOf(MainDictionary.lookup 
			       (Dictionaries.dict,ind)) 
	       val old_ydim = Layout.get_ydim(anc)
	       val p = if isRelNode(getParent(n))
			   then getParent(getParent(n))
		       else getParent(n)
	       val new =
		   case getDesc(n) of
		       VALUE(r) => f(va,#typ(r),p,getIndex(n),
				     getDepth(n))
		     | I_VALUE(r) => g(va,#typ(r),p,getIndex(n),
				       getDepth(n))
		     | INTERPUNCT => raise UpdateError 
	       val _ = updateChild(p,getIndex(n),new)
	       val node = if getParent(new) = Empty then new else anc
	       val _ = if isRelRefNode new
			   then findRelNode(node,va)
		       else ()
	       val (_,y_pos) = Services.getPosition(getGroup(anc))
	   in ( Gtk.objectDestroy(getGroup(n))
	       ; if isRelNode new 
		     then let val ri_rel = 
			      case ReinspectedRelDict.lookup
				  (Dictionaries.ri_reldict,ind) 
				   of SOME x => x
				    | NONE => []
			  in ReinspectedRelDict.update(Dictionaries.ri_reldict,
						       (ind,
					            List.append([new],ri_rel)))
			  end 
		 else ()
	       ; showChanges (anc,ancline,node,old_ydim,ind,y_pos) )
	   end )

    (* showChanges *)
    and showChanges (anc,ancline,node,old_ydim,ind,y_pos) = 
        (Layout.layout(node)
	 ; MainDictionary.update(Dictionaries.dict, (ind,(node,ancline))) 
         ; DrawNodes.draw(node,0,y_pos,DrawNodes.move') 
	 ; let val dy =  Layout.get_ydim(node) - old_ydim
	   in ( WindowManager.incr_act_line dy
	       ; iterMove (Dictionaries.dict,dy,getIndex(anc) + 1,
			   MainDictionary.getHighestIndexAssigned
			   (Dictionaries.dict))
	       ; Layout.setVisible(Layout.get_xdim(node),dy)
	       ; !WindowManager.resize() )
	   end)

    (* findRelNode *)
    and findRelNode(anc,va) = 
	let val found = ref false
	    val g = fn n => findRelNode(n,va)
	    val f = fn n => if isRelNode n andalso va = getValue(getDesc(n))
				then ( found := true
				     ; setDazzled n)
			    else ()
	in ( case anc of
	     Concat(r) => ( f anc
			  ; if !found then ()
			    else array_map (f,getKids(anc))
			  ; if !found then ()
			    else array_map (g,getKids(anc)) )
	   | Container(r) => ( f anc
			     ; if !found then () 
			       else array_map (f,getKids(anc))
			     ; if !found then ()
			       else array_map (g,getKids(anc)) )
	   | RelNode(r) => (f anc
                           ; if !found then ()
			     else g (!(#content(r))) )
	   | _ => () )
	end
        
    (* tell *)
    and tell (va,li,f,g) =  
	let val new_li = List.sort (fn (n,m) => Int.compare(getAncIndex n, 
							    getAncIndex m)) 
	                           li
	in (List.map (fn n => update(n,va,f,g)) new_li ; ())
	end   

    (* watcher *)
    and watcher (future,va,f,g) = 
	Thread.thread 
	(fn () 
	 => ( case TransientDictionary.iterLookup 
	               (Dictionaries.transdict, 
			fn (_,l) =>
			List.exists 
			(fn n
			 => UnsafeValue.same(getValue(getDesc(n)),
					     va)) l) of 
	      NONE => () 
	    | SOME((vv,ll),i)  
	      => ( Future.await(future)
		  ; let val new_l = #2(valOf(TransientDictionary.lookup
					     (Dictionaries.transdict,i)))
		    in Server.serve(fn () => tell(va,new_l,f,g))
		    end ) ))
	
    (* reinspect *)
    and reinspect (n,f,g) = 
       (Thread.thread
	(fn () =>
        (let val va = getValue(getDesc(n))
	 in  Server.serve(fn () => update(n,va,f,g))
	 end
	 ; TextIO.print ("REINSPECT: angeklickter Knoten hat Tiefe "
			 ^Int.toString(getDepth(n))
			 ^" und Tiefenlimit ist "
			 ^Int.toString(!(Settings.max_depth))
			 ^" !!!\n") )
	     handle General.Match => raise UpdateError )
      ; () )

    (* foldDepth *)
    and foldDepth (n,i,f,g) = 
	Server.serve
	(fn () => 
	(setDazzled n
	; Settings.set_depth(!Settings.max_depth + i)
	; let val ind = getAncIndex n 
	      val (anc,ancline) = valOf(MainDictionary.lookup 
			      (Dictionaries.dict,ind)) 
	      val old_ydim = Layout.get_ydim(anc) 
	      val va = getValue(getDesc(n))
	      val new = 
		  case getDesc n of 
		  INTERPUNCT => raise Match
		| VALUE(r) => f (va,#typ(r),getParent(n),getIndex(n),
				 getDepth(n))
		| I_VALUE(r) => g (va,#typ(r),getParent(n),getIndex(n),
				   getDepth(n))
	      val _ = updateChild(getParent(n),getIndex(n),new)  
	      val node = if getParent(new) = Empty then new else anc
	      val (_,y_pos) = Services.getPosition(getGroup(anc))
	  in ( Gtk.objectDestroy(getGroup(n))
	      ;  showChanges (anc,ancline,node,old_ydim,ind,y_pos) 
	      ; Settings.set_depth(!Settings.max_depth - i) )
	  end))

    (* foldWith *)
    and foldWidth (n,i,f,g) = TextIO.print("Changing width by " 
					   ^ Int.toString(i)
					   ^ "\n") (* !!!! *)
	
end (* struct *)

end

