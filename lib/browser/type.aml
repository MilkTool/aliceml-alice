import structure Type from "x-alice:/lib/rtt/Type"
import structure Path from "x-alice:/lib/rtt/Path"
import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure UnsafeValue from "x-alice:/lib/system/UnsafeValue"
import structure Label from "x-alice:/lib/rtt/Label"
import structure Reflect from "x-alice:/lib/system/Reflect" (* here *)

(*** Signatur TYPES ***)

signature TYPES = 
sig
    type object = Gtk.object

(* Datentyp 'Node' zur internen Darstellung von Werten *)
    datatype Node = 
    SimpleNode of {   isvalue: Reflect.value, 
		      istype: Type.t,
		      parent: Node ref,
		      index: int ref,
		      value: string,
		      depth: int ref,
		      xdim: int ref,
		      ydim: int ref,
		      xkoord: int ref,
		      ykoord: int ref,
		      dirty: bool ref,
		      tag: object option ref}
    
  | ContNode of   {   istype: Type.t,
		      parent: Node ref,
		      nodes: Node array,
		      index: int ref,
		      depth: int ref,
		      xdim: int ref,
		      ydim: int ref,
		      l_xdim: int ref,
		      xkoord: int ref,
		      ykoord: int ref,
		      dirty: bool ref,
		      tag: object option ref}

  | SepNode of    {   content: Node ref,
		      parent: Node ref,
		      index: int ref,
		      depth: int ref,
		      xdim: int ref,
		      ydim: int ref,
		      xkoord: int ref,
		      ykoord: int ref,
		      dirty: bool ref,
		      tag: object option ref}

  | LabelNode of   {   content: Node ref,
		       label: string,
		       parent: Node ref,
		       index: int ref,
		       depth: int ref,
		       xdim: int ref,
		       ydim: int ref,
		       xkoord: int ref,
		       ykoord: int ref,
		       dirty: bool ref,
		       tag: object option ref}

  | BracketNode of {   isvalue: Reflect.value, 
		       istype: Type.t, 
		       content: Node ref,
		       parent: Node ref,
		       index: int ref,
		       depth: int ref,
		       xdim: int ref,
		       ydim: int ref,
		       xkoord: int ref,
		       ykoord: int ref,
		       dirty: bool ref,
		       tag: object option ref}

  | DLimitNode of   {   isvalue: Reflect.value,
		       istype: Type.t,
		       parent: Node ref,
		       index: int ref,
		       xdim: int ref,
		       ydim: int ref,
		       xkoord: int ref,
		       ykoord: int ref,
		       dirty: bool ref,
		       tag: object option ref}

  | WLimitNode of {    parent: Node ref,
		       index: int ref,
		       xdim: int ref,
		       ydim: int ref,
		       xkoord: int ref,
		       ykoord: int ref,
		       dirty: bool ref,
		       tag: object option ref}
                             
  | EmptyNode

(* Datentyp 'doc' zur einfachen Wertdarstellung (dem Benutzer zugaenglich) *)
    datatype doc =
	SIMPLE of {value: Reflect.value, typ : Type.t, content : string}
      | CONTAINER of {value: Reflect.value, 
                      typ : Type.t, 
		      kids : doc vector, 
                      more : bool}
      | INTERNAL of Node * int * int -> Node
	
    exception lookupError
    exception NoPath   
    exception NoInternal
    exception NoNode

end;

(*** Struktur Types ***)

structure Types :> TYPES =
struct

    type object = Gtk.object

    datatype Node = 
	SimpleNode of {   isvalue: Reflect.value,
		          istype: Type.t,
		          parent: Node ref,
			  index: int ref,
			  value: string, 
			  depth: int ref,
			  xdim: int ref,
			  ydim: int ref,
			  xkoord: int ref,
			  ykoord: int ref,
			  dirty: bool ref,
			  tag: object option ref}

      | ContNode of   {   istype: Type.t,
		          parent: Node ref,
			  nodes: Node array,
			  index: int ref,
			  depth: int ref,
			  xdim: int ref,
			  ydim: int ref,
			  l_xdim: int ref,
			  xkoord: int ref,
			  ykoord: int ref,
			  dirty: bool ref,
			  tag: object option ref}

      | SepNode of    {   content: Node ref,
		          parent: Node ref,
			  index: int ref,
			  depth: int ref,
			  xdim: int ref,
			  ydim: int ref,
			  xkoord: int ref,
			  ykoord: int ref,
			  dirty: bool ref,
			  tag: object option ref}
	
      | LabelNode of   {   content: Node ref,
			   label: string,
			   parent: Node ref,
			   index: int ref,
			   depth: int ref,
			   xdim: int ref,
			   ydim: int ref,
			   xkoord: int ref,
			   ykoord: int ref,
			   dirty: bool ref,
			   tag: object option ref}
	
      | BracketNode of {   isvalue: Reflect.value,
                           istype: Type.t, 
			   content: Node ref,
			   parent: Node ref,
			   index: int ref,
			   depth: int ref,
			   xdim: int ref,
			   ydim: int ref,
			   xkoord: int ref,
			   ykoord: int ref,
			   dirty: bool ref,
			   tag: object option ref}

      | DLimitNode of  {   isvalue: Reflect.value,
		          istype: Type.t,
			  parent: Node ref,
			  index: int ref,
			  xdim: int ref,
			  ydim: int ref,
			  xkoord: int ref,
			  ykoord: int ref,
			  dirty: bool ref,
			  tag: object option ref}

      | WLimitNode of {    parent: Node ref,
		           index: int ref,
			   xdim: int ref,
			   ydim: int ref,
			   xkoord: int ref,
			   ykoord: int ref,
			   dirty: bool ref,
			   tag: object option ref}
	
      | EmptyNode

     datatype doc =
	SIMPLE of {value: Reflect.value, typ : Type.t, content : string}
      | CONTAINER of {value: Reflect.value, 
                      typ : Type.t, 
		      kids : doc vector, 
                      more : bool}
      | INTERNAL of Node * int * int -> Node
	
    exception lookupError
    exception NoPath
    exception NoInternal
    exception NoNode
 
end

