(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Type     from "x-alice:/lib/rtt/Type"
import structure Reflect  from "x-alice:/lib/system/Reflect" 
import structure Gtk      from "x-alice:/lib/gtk/Gtk"
import structure Label    from "x-alice:/lib/rtt/Label"
import structure Types    from "Types"

open Types

signature HELPER =
sig
   
    exception copyArray_error

    (* Hilfsfunktionen zur Typbestimmung *)
    val isApply: Type.desc -> bool	
    val unApply: Type.desc -> Type.desc * Type.t list 

    (* Operationen auf Rows *)
    val row2list : Type.row -> (Label.lab * Type.typ) list
    val labelvector : (Label.lab * Type.typ) list -> Label.lab Vector.vector

    (* map fuer Arrays *)
    val array_map : ('a -> 'b) * 'a Array.array -> unit

    (* Kopieren von Arrays *)
    val copyArray: 'a Array.array * 'a Array.array  -> unit	    

    (* Nodes *)
    val getKids : node -> node Array.array
    val getParent : node -> node
    val getIndex : node -> int
    val getAncIndex : node -> int
    val getDesc : node -> desc
    val getValue : desc -> Reflect.value
    val getTyp : desc -> Type.typ
    val getDepth : node -> int
    val getGroup : node -> Gtk.object
    val getRep : node -> string
    val getStatus : node -> status ref
    val getColor : node -> color_class
    val getSort : node -> limit
    val getValueAnc : node -> node

    val setsVertical : node -> bool

    (* Behandlung von Listen *)
    val inspectList : int * 'a list  -> 'a list_desc 
    val castList : 'a -> 'b list

    (* Relation-Nodes *)
    val setContent : node * node -> unit
    val incrCounter : node -> node

    (* Strings *)
    val iterTake : string -> string

    val castPromise : 'a -> 'b Promise.promise 

end;
