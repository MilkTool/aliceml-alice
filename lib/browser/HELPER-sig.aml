(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Type     from "x-alice:/lib/rtt/Type"
import structure Reflect  from "x-alice:/lib/system/Reflect" 
import structure Gtk      from "x-alice:/lib/gtk/Gtk"
import structure Label from "x-alice:/lib/rtt/Label"
import structure Types    from "Types"

open Types

signature HELPER =
sig
   
    exception copyArray_error

    val createValue  :  Reflect.value * Type.t * actions -> desc

   

    (* Hilfsfunktionen zur Typbestimmung *)
    val isApply: Type.desc -> bool	
    val unApply: Type.desc -> Type.desc * Type.t list 

    (* Operationen auf Rows *)
    val row2list : Type.row -> (Label.lab * Type.typ) list
    val labelvector : (Label.lab * Type.typ) list -> Label.lab Vector.vector

    (* map fuer Arrays *)
    val array_map' : ('a -> 'b) * 'a Array.array * int -> unit
    val array_map : ('a -> 'b) * 'a Array.array -> unit

    (* Kopieren von Arrays *)
    val copyArray': 'a Array.array * 'a Array.array * int -> unit
    val copyArray: 'a Array.array * 'a Array.array  -> unit	    

    (* Nodes *)
    val getKids : node -> node Array.array
    val getParent : node -> node
    val getIndex : node -> int
    val getAncIndex : node -> int
    val getDesc : node -> desc

    val checkContKids : node array * int -> bool
    val checkConcKids : node array * int -> bool
    val setsVertical : node -> bool

    (* Behandlung von Listen *)
    val inspectList : int * 'a list  -> 'a list_desc 
    val inspectList' : int * 'a list * 'a list -> 'a list_desc
    val castList : 'a -> 'b list

    (* Relation-Nodes *)
    val getValue : desc -> Reflect.value
    val setContent : node * node -> unit
    val incrCounter : node -> node

    (* Strings *)
    val iterTake : string -> string
    val iterTake' : string * int * string -> string

end;
