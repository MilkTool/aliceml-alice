(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)
import structure Types from "Types"

open Types

signature DRAW_NODES =
    sig

        exception  MissingColor
	exception DrawError

	datatype intention = DRAW | SEARCH of int * int
	
	val atomDraw   :   node * int * int -> int * int 

	val atomSearch: node * int * int * intention -> int * int * node option

	val atomSearch': node * int * int * int * int * string * desc -> int * int * node option

	val drawSimple :   node * int * int * intention -> int * int * node option

	val drawLimit  :   node * int * int * intention-> int * int * node option

	val drawConcat :   node * int * int * intention -> int * int * node option

	val drawContainer: node * int * int * intention -> int * int * node option
        
        val drawRelNode : node * int * int * intention-> int * int * node option

        val drawRelRefNode : node * int * int  * intention -> int * int * node option

	val draw : node * int * int * intention-> int * int * node option
       
    end
