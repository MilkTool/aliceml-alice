(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Inf from "x-alice:/lib/rtt/Inf"
import structure Path from "x-alice:/lib/rtt/Path"
import structure Type from "x-alice:/lib/rtt/Type"
import structure Reflect from "x-alice:/lib/system/Reflect"

import structure Node from "Node"
import structure GtkSupport from "GtkSupport"

local

open Node

in

signature CREATE_TREE =
sig
    
    val coreSign: Inf.sign
    val packageSign: Inf.sign

    val lookupPath: Inf.sign * string * string -> Path.path

    (* interne Repraesentation von Werten (ausser Strukturen) *)

    val newTree: Reflect.value * Type.t * int * GtkSupport.tag -> node

    val createGraph: int option * Reflect.value * Type.t  * node * int * int * 
	GtkSupport.tag -> node 

    (* interne Repraesentation von Strukturen *)

    val newTreeInf: Reflect.module * Inf.t * int * GtkSupport.tag -> node

    val createGraphInf: Reflect.module * Inf.t  * node * int * int * GtkSupport.tag 
	-> node

end

end
