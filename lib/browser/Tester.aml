import structure NewNode from "NewNode";
import structure Layout from "Layout";
import structure NewNode from "NewNode";
import structure UnsafeInspector from "UnsafeInspector";
import structure Reflect from "x-alice:/lib/system/Reflect";

UnsafeInspector.init();

(* Testen des Relationsmodus *)

(***)

UnsafeInspector.set_relmode true;

structure EList = Reflect.ReflectType 
    ( type t = ((int * int) * (int * int)) list );
val e_list = EList.x;

UnsafeInspector.inspect ([((2,2),(2,2)),((2,3),(2,3))],e_list);

structure EVect = Reflect.ReflectType
    ( type t = int vector vector);
val e_vect = EVect.x;

UnsafeInspector.inspect (#[#[1,2],#[1,2]],e_vect);

(***)

(* Interger *)
structure SInt = Reflect.ReflectType ( type t = int);
val t_int = SInt.x;

UnsafeInspector.inspect (44,t_int);

(* Char *)
structure Char = Reflect.ReflectType ( type t = char);
val t_char = Char.x;

UnsafeInspector.inspect (#"7", t_char);

(* Ausnahme *)
structure Exn = Reflect.ReflectType ( type t = exn);
val t_exn = Exn.x;
exception Error;

UnsafeInspector.inspect (Error,t_exn);

(* Referenz *)
structure Ref = Reflect.ReflectType ( type t = string vector ref);
val t_ref = Ref.x;

UnsafeInspector.inspect (ref #["hallo"],t_ref);

(* Vector *)
structure Vec = Reflect.ReflectType ( type t = real vector);
val t_vec = Vec.x;

UnsafeInspector.inspect (#[1.0,1.0], t_vec);

(* Matrix *)
structure Mat = Reflect.ReflectType ( type t = real vector vector);
val t_mat = Mat.x;

UnsafeInspector.inspect (#[#[1.0,2.0],#[3.0,4.0]],t_mat);

(* Array *)
structure Arr = Reflect.ReflectType ( type t = string array);
val t_array = Arr.x;
val my_array = Array.array(2,""); 
Array.update(my_array,0,"h"); 
Array.update(my_array,1,"h");

UnsafeInspector.inspect (my_array, t_array);

(* Record *)
structure Rec1 = Reflect.ReflectType
    (type t = {vec1: string vector , vec2: int vector}); 
val t_rec1 = Rec1.x; 

UnsafeInspector.inspect ({vec1 = #["Marvin","Marvin"],vec2 = #[23,23]}, 
			 t_rec1);

(* Tupel *) 
structure Rec2 = Reflect.ReflectType
    (type t = string vector vector * int vector vector);
val t_rec2 = Rec2.x;

UnsafeInspector.inspect ({1 = #[#["hi","du"],#["guck","mal"]], 
			  2 = #[#[0,8,1,5],#[4,7,1,1]]},
			 t_rec2);

(* Datentyp *)
datatype S = A | B of int * int | C of real vector
 | D of S | E of {bla: string, blubb: char}
 | F of real vector vector;
structure P = Reflect.ReflectType ( type t = S);
val t_S = P.x;

UnsafeInspector.inspect (A, t_S);
UnsafeInspector.inspect (B (4,4), t_S);
UnsafeInspector.inspect (C #[5.0,7.0], t_S);
UnsafeInspector.inspect (D A, t_S);
UnsafeInspector.inspect (E {bla = "hello", blubb = #"w"}, t_S);
UnsafeInspector.inspect (F #[#[1.0,2.0],#[3.0,4.0],#[1.0,2.0]], t_S);

(* Liste *)
structure Liste = Reflect.ReflectType
    (type t = (string vector vector * int vector vector) list);
val t_list = Liste.x;

UnsafeInspector.inspect ([{1 = #[#["hi","du"],#["guck","mal"]], 
			   2 = #[#[0,8,1,5],#[4,7,1,1]]},
			  {1 = #[#["ich","kann"],#["Listen","zeichnen"]], 
			   2 = #[#[0,8,1,5],#[4,7,1,1]]}],t_list);

