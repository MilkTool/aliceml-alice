(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Type from "x-alice:/lib/rtt/Type"
import structure PathMap from "x-alice:/lib/rtt/PathMap"
import structure Name from "x-alice:/lib/rtt/Name"
import structure UnsafeValue from "x-alice:/lib/system/UnsafeValue"
import structure Reflect from "x-alice:/lib/system/Reflect"
import structure Types from "Types"
import structure Helper from "Helper"
import structure MkPathTable from "MkPathTable" 
import structure NewNode from "NewNode"
import signature CREATE_DOC from "CREATE_DOC-sig"

open Types Helper MkPathTable 

structure CreateDoc :> CREATE_DOC = 
struct

    type doc_creator = int * int * Reflect.value * Type.t -> doc  
    
    fun registerType (path, f) = PathMap.insert (pathTable, path, f)

    fun castVector value  = UnsafeValue.cast value : 'a vector
 
    fun castArray value  = UnsafeValue.cast value : 'a array

    (* createInt *)
    fun createInt (m_width,d,va,t) = 
	let val descr = createValue(va,t,NO_ACTIONS)
	in if d > !(NewNode.max_depth)
	       then LIMIT{desc = descr, 
			  sort = DEPTH_LIMIT}
	   else SIMPLE{desc = descr,
		       rep = Int.toString(UnsafeValue.cast va : int), 
		       color = COLOR}
	end
    
    (* createString *)
    fun createString (m_width,d,va,t) = 
    let val descr = createValue(va,t,NO_ACTIONS)
	in if d > !(NewNode.max_depth)
	   then LIMIT{desc = descr, 
		      sort = DEPTH_LIMIT}
	   else SIMPLE{desc = descr,
			   rep = String.concat["\"",
					       UnsafeValue.cast va : string,
					       "\""],
			   color = COLOR}
    end
 
    (* createChar *)
    fun createChar (m_width,d,va,t) = 
	 let val descr = createValue(va,t,NO_ACTIONS)
	 in if d > !(NewNode.max_depth)	
		then LIMIT{desc = descr, 
			   sort = DEPTH_LIMIT}
	    else SIMPLE{desc = descr,
			rep = String.concat["#\"",
					       Char.toString
					       (UnsafeValue.cast va : char),
					       "\""],
			    color = COLOR}
	 end

    (* createWord *)
    fun createWord (m_width,d,va,t) = 
        let val descr = createValue(va,t,NO_ACTIONS)
	in if d > !(NewNode.max_depth)     
	       then  LIMIT{desc = descr, 
			   sort = DEPTH_LIMIT}
	   else let val int_w = Word.toInt(UnsafeValue.cast va : word)
		in SIMPLE{desc = descr,
			  rep = String.concat["0w",
					      Int.toString(int_w)],
			  color = COLOR}
		end
	end	  

    (* createReal *)
    fun createReal (m_width,d,va,t) = 
        let val descr = createValue(va,t,NO_ACTIONS)
	in if d > !(NewNode.max_depth)
	       then  LIMIT{desc = descr, 
			   sort = DEPTH_LIMIT}
	   else SIMPLE{desc = descr,
		       rep = Real.toString(UnsafeValue.cast va : real), 
		       color = COLOR}
	end    

    (* createExn *)
    fun createExn (m_width,d,va,t) =
        let val descr = createValue(va,t,NO_ACTIONS)
	in if d > !(NewNode.max_depth)
	       then  LIMIT{desc = descr, 
			   sort = DEPTH_LIMIT}
	   else let val conname = UnsafeValue.conName(va)
		    val str = case conname of Name.ExId(n) => n
		                            | Name.InId => ""
		in SIMPLE {desc = descr,
			   rep = String.concat["<exception> : ",
					       str],
			   color = COLOR}
		end
	end     
    
    (* createRef *)
    fun createRef (m_width,d,va,t) =
        let val descr = createValue(va,t,NO_ACTIONS)
	in if d > !(NewNode.max_depth)
	       then LIMIT{desc = descr, 
			  sort = DEPTH_LIMIT}
	   else let val deref = !(UnsafeValue.cast(va))
                    val ref_value = UnsafeValue.cast deref : Reflect.value
                    val ref_typ = #2(Type.asApply t)
                    val conc1 = SIMPLE{desc = INTERPUNCT,
				       rep = "ref",
                                       color = COLOR}
                    val conc2 = 
			CONTAINER{desc = INTERPUNCT,
				  kids = #[SIMPLE{desc = INTERPUNCT,
						       rep = "(",
						       color = COLOR},
					   EMBEDDED(ref_value,ref_typ),
					   SIMPLE{desc = INTERPUNCT,
						  rep = ")",
						  color = COLOR}]} 
                in CONCAT{desc = descr,
                          kids = #[conc1,conc2]}
		end 
	end
    
    (* createVector *)
    fun createVector (m_width,d,va,t) = 
	let val descr = createValue(va,t,NO_ACTIONS)
	in if d > !(NewNode.max_depth)
	       then LIMIT{desc = descr, 
			  sort = DEPTH_LIMIT}
	   else let val vec = castVector va
                    val l = Vector.length(vec)
                    val vec_typ = #2(Type.asApply t)
		    val cont_kids = 
		        Vector.tabulate
			(if l > m_width then m_width + 1 else l,
			 fn i => 
			 if i = m_width
				     then LIMIT{desc = INTERPUNCT,
						sort = WIDTH_LIMIT}
			 else if i = l - 1
				  then EMBEDDED
				      (Vector.sub(vec,i),
				       vec_typ)
			      else CONCAT{desc = INTERPUNCT,
					  kids = 
					  #[EMBEDDED
					    (Vector.sub(vec,i),vec_typ),
						    SIMPLE{desc = INTERPUNCT,
							   rep = ",",
							   color = COLOR}]} )
                    val cont = CONTAINER{desc = INTERPUNCT,
					 kids = cont_kids}
		in CONCAT{desc = descr,
			  kids = #[SIMPLE{desc = INTERPUNCT,
                                          rep = "#[",
					  color = COLOR},
				   cont,
				   SIMPLE{desc = INTERPUNCT,
					  rep = "]",
					  color = COLOR}] }
		end
	end
                                               
    (* createArray *)
    fun createArray (m_width,d,va,t) = 
        let val descr = createValue(va,t,NO_ACTIONS)
	in if d > !(NewNode.max_depth)
	       then LIMIT{desc = descr, 
			  sort = DEPTH_LIMIT}
	   else let val arr = castArray va
                    val l = Array.length(arr)
                    val arr_typ = #2(Type.asApply t)
		    val cont_kids = 
		        Vector.tabulate
			(if l > m_width then m_width + 1 else l,
			 fn i => 
			 if i = m_width
				     then LIMIT{desc = INTERPUNCT,
						sort = WIDTH_LIMIT}
			 else if i = l - 1
				  then CONCAT{desc = INTERPUNCT, 
					      kids = 
					      #[SIMPLE{desc = INTERPUNCT,
						       rep = Int.toString(i),
						       color = COLOR},
						SIMPLE{desc = INTERPUNCT,
						       rep = "=",
						       color = COLOR},
						EMBEDDED(Array.sub(arr,i),
							 arr_typ)] }
			      else CONCAT{desc = INTERPUNCT,
					  kids = 
					  #[SIMPLE{desc = INTERPUNCT,
						   rep = Int.toString(i),
						   color = COLOR},
					    SIMPLE{desc = INTERPUNCT,
						   rep = "=",
						   color = COLOR},
					    EMBEDDED
					    (Array.sub(arr,i),arr_typ),
					    SIMPLE{desc = INTERPUNCT,
						   rep = ",",
						   color = COLOR}]} )
                    val cont = CONTAINER{desc = INTERPUNCT,
					 kids = cont_kids}
		in CONCAT{desc = descr,
			  kids = #[SIMPLE{desc = INTERPUNCT,
                                          rep = "<array> : {",
					  color = COLOR},
				   cont,
				   SIMPLE{desc = INTERPUNCT,
					  rep = "}",
					  color = COLOR}] }
		end
	end 


end

    
    
