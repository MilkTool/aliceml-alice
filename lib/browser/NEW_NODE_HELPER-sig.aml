(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Inf from "x-alice:/lib/rtt/Inf"
import structure Label from "x-alice:/lib/rtt/Label"
import structure Type from "x-alice:/lib/rtt/Type"
import structure Path from "x-alice:/lib/rtt/Path"
import structure Reflect from "x-alice:/lib/system/Reflect"
import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Types from "Types"

local 
    open Types 
in

signature NEW_NODE_HELPER =
sig
    
    val itemToLabel: Inf.item -> Label.lab
    
    val setGroup: node -> Gtk.object

(* low-level-Konstruktion der verschiedenen node-Arten *)
    val createSimple: 
        desc * node * int * int * string * color_class * (node -> Gtk.object) 
	-> node
    
    val createConcat: 
	desc * node * int * int * node array * (node -> Gtk.object) -> node
	
    val createContainer: 
	desc * node * int * int * node array * (node -> Gtk.object) -> node
    
    val createLimit: desc * limit * node * int * int * (node -> Gtk.object) 
	-> node

    val createRelNode : 
	desc * node * node * int * int * string * node list * 
	(node -> Gtk.object) -> node
   
    val createRelRefNode : 
	desc * node * int * int * string * node * (node -> Gtk.object) -> node

    val queryDepth: 
	Reflect.value * Type.t * node * int * int * Type.row * 
        (Reflect.value * Type.t * node * int * int * Type.row -> node)
	-> node

    val queryDepthL: 
	Reflect.value * Type.t * node * int * int * 'a list_desc * 
	(Reflect.value * Type.t * node * int * int * 'a list_desc -> node)
	-> node

(* Behandlung von Listen *)
    val inspectList : int * 'a list  -> 'a list_desc 
    val castList : 'a -> 'b list
    
    val coreSign: Inf.sign
    val packageSign: Inf.sign

    val lookupPath: Inf.sign * string * string -> Path.path

end

end
