(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Inf from "x-alice:/lib/rtt/Inf"
import structure Label from "x-alice:/lib/rtt/Label"
import structure Type from "x-alice:/lib/rtt/Type"
import structure Path from "x-alice:/lib/rtt/Path"
import structure Reflect from "x-alice:/lib/system/Reflect"

import structure Node from "Node"

local 
    open Node
in

signature CREATE_TREE_HELPER =
sig

    datatype 'a list_desc = Det of 'a list * bool (* without any future *)
                          | Indet of 'a list * 'a list (* with a future *)
    
   (* identification and dissection of types *)
 
    val isApply: Type.desc -> bool	 
    val unApply: Type.desc -> Type.desc * Type.t list 

    val isAtomType: Type.t -> bool 

    (* convertion of items to labels *)

    val itemToLabel: Inf.item -> Label.lab 

    (* operations on lists *)
	
    val inspectList : int * 'a list  -> 'a list_desc  
    val castList : 'a -> 'b list 

   (* operations on rows *)

    val row2list : Type.row -> (Label.lab * Type.typ) list 
    val labelvector : (Label.lab * Type.typ) list -> Label.lab Vector.vector 

    (* operations on arrays *) 

    val copyArray: 'a Array.array * 'a Array.array  -> unit

    (* calculates f(0,x_{0}),..., f(br,x_{br}) *)	

    val appi_break: (int * 'a -> 'b) * int * 'a list -> unit 	

end

end
