(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure UnsafeValue from "x-alice:/lib/system/UnsafeValue"
import structure Types from "Types"
import structure Helper from "Helper"
import structure RelManDictionary from "RelManDictionary"
import structure NewNode from "NewNode"
import signature LAYOUT from "LAYOUT-sig"

open Types Helper

structure Layout :> LAYOUT = 
struct

    exception LayoutError

    fun findAdequ n = let val ind = getAncIndex n
			  val relman = RelManDictionary.return(ind,
							       NewNode.reldict)
		      in (case List.find (fn x 
					  => UnsafeValue.same
					           (getValue(getDesc(x)),
						    getValue(getDesc(x))) )
			                  relman of
			  NONE => Empty 
                        | SOME x => x)
		      end 

    fun sum_up (li,f,g) = if List.length(li) = 0
			      then 0
			  else ( if setsVertical(hd(li)) 
				     then g(hd(li))
				 else f(hd(li)) )
			      + sum_up(tl(li),f,g) 
			      
    and max (li,f) = case List.length(li) of
	             0 => 0
		   | 1 => f(hd(li))     
		   | _ => let val m = Int.max(f(hd(li)),
					      f(hd(tl(li))) )
			  in Int.max(m, max(tl(tl(li)),f) )
			  end

    and get_xdim n = case n of Simple(r) => !(#width(r))
                             | Concat(r) => !(#width(r))
                             | Container(r) => !(#width(r))
                             | RelNode(r) => !(#width(r))
                             | RelRefNode(r) => !(#width(r))
			     | Limit(_) => 1
                             | Empty => 0

    and get_ydim n = case n of Concat(r) => !(#height(r))
                             | Container(r) => !(#height(r))
                             | RelNode(r) => !(#height(r))
                             | Empty => 0
                             | _ => 1

    and get_l_xdim n = case n of Container(r) => !(#l_width(r))
                               | _ => raise LayoutError

    and set_xdim n = case n of 
        Concat(r) 
	=> (if !(#status(r)) = DAZZLED
		then #width(r) := calc_xdim n 
	    else ()
	   ; array_map(set_xdim,#kids(r)) )
      | Container(r) 
	=> (if !(#status(r)) = DAZZLED 
		then #width(r) := calc_xdim n 
	    else ()
	   ; array_map(set_xdim,#kids(r)) )
      | RelNode(r) 
        => (if !(#status(r)) = DAZZLED 
		then #width(r) := calc_xdim n 
	    else () 
           ; set_xdim (!(#content(r))) ) 
      | _ => ()
	    
    and set_ydim n = case n of 
	Concat(r) 
	=> (if !(#status(r)) = DAZZLED
		then #height(r) := calc_ydim n 
	    else ()
	   ; array_map(set_ydim,#kids(r)) )
      | Container(r) 
	=> (if !(#status(r)) = DAZZLED 
		then #height(r) := calc_ydim n 
	    else ()
	   ; array_map(set_ydim,#kids(r)) )
      | RelNode(r) 
        => (if !(#status(r)) = DAZZLED 
		then #height(r) := calc_ydim n 
	    else () 
           ; set_ydim (!(#content(r))) ) 
      | _ => ()  

    and set_l_xdim n = case n of
	Concat(r) => array_map(set_l_xdim,#kids(r))
      | Container(r) 
	=> (if !(#status(r)) = DAZZLED 
		then #l_width(r) := calc_l_xdim n 
	    else ()
	   ; array_map(set_l_xdim,#kids(r)) )
      | _ => ()

    and calc_xdim n = case n of
	Simple(r) => !(#width(r))
      | Concat(r) => sum_up (Array.toList(#kids(r)),calc_xdim,calc_l_xdim)
      | Container(r) => let val li = Array.toList(#kids(r))
			in if setsVertical n 
			       then max (li,calc_xdim) 
			   else sum_up (li,calc_xdim,calc_l_xdim) 
			end
      | RelNode(r) => (case findAdequ n of
		       RelNode(rr) 
		       =>if !(#counter(rr)) = 1
			     then String.length(#rep(r)) + 
				  calc_xdim (!(#content(r)))
			 else calc_xdim (!(#content(r)))
                     | _ => calc_xdim (!(#content(r))) )

      | RelRefNode(r) => !(#width(r))
      | Limit(r) => 1
      | Empty => 0

    and calc_ydim n = case n of
	Concat(r) => max (Array.toList(#kids(r)),calc_ydim)
      | Container(r) => if setsVertical n 
			    then sum_up (Array.toList(#kids(r)),calc_ydim,
					 calc_ydim)
			else max (Array.toList(#kids(r)),calc_ydim)
      | RelNode(r) => calc_ydim (!(#content(r)))
      | Empty => 0
      | _ => 1
 
    and calc_l_xdim n = case n of 
        Container(r) => if List.null(Array.toList(#kids(r)))
			    then 0
			else calc_xdim (List.last(Array.toList(#kids(r))) )
      | _ => raise LayoutError

    and set_dirty n = case n of 
	Simple(r) => if !(#status(r)) = DIRTY 
			 then () 
		     else #status(r) := DIRTY
      | Concat(r) => (if !(#status(r)) = DIRTY
			  then ()
		      else #status(r) := DIRTY
                     ; array_map(set_dirty,#kids(r)) )
      | Container(r) => (if !(#status(r)) = DIRTY
			     then ()
			 else #status(r) := DIRTY
			; array_map(set_dirty,#kids(r)) )
      | RelNode(r) => (if !(#status(r)) = DIRTY
			   then ()
		       else #status(r) := DIRTY
                      ; set_dirty (!(#content(r))) )
      | RelRefNode(r) => if !(#status(r)) = DIRTY 
			     then () 
			 else #status(r) := DIRTY
      | Limit(r) => if !(#status(r)) = DIRTY 
			then () 
		    else #status(r) := DIRTY 
      | Empty => ()

    fun layout n = (set_xdim n; set_ydim n; set_l_xdim n ; set_dirty n)

end
