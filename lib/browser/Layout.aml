(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure UnsafeValue from "x-alice:/lib/system/UnsafeValue"
import structure Types from "Types"
import structure Helper from "Helper"
import structure RelManDictionary from "RelManDictionary"
import structure MainDictionary from "MainDictionary"
import structure Dictionaries from "Dictionaries"
import structure WindowHelper from "WindowHelper"
import structure Settings from "Settings"
import signature LAYOUT from "LAYOUT-sig"

open Types Helper

structure Layout :> LAYOUT = 
struct

    exception LayoutError

    fun sum_up (nil,f) = 0
      | sum_up ([x],f) = f(x)
      | sum_up (x::xr,f) = f(x) + sum_up(xr,f) 
			      
    and max (nil,f) = 0
      | max ([x],f) = f(x)
      | max (x::xr,f) = let val m = Int.max(f(x),f(hd(xr)) )
			in Int.max(m, max(tl(xr),f) )
			end

    (* get_xdim *)
    and get_xdim n = case n of Simple(r) => !(#width(r))
                             | Concat(r) => !(#width(r))
                             | Container(r) => !(#width(r))
                             | RelNode(r) => !(#width(r))
                             | RelRefNode(r) => !(#width(r))
			     | Limit(_) => 1
                             | Empty => 0

    (* get_ydim *)
    and get_ydim n = case n of Concat(r) => !(#height(r))
                             | Container(r) => !(#height(r))
                             | RelNode(r) => !(#height(r))
                             | Empty => 0
                             | _ => 1

    (* get_l_xdim *)
    and get_l_xdim n = case n of Container(r) => !(#l_width(r))
                               | _ => raise LayoutError

    (* layout *)
    and layout n = 
	let val f = fn n => #1(layout n)
	    val g = fn n => #2(layout n)
	in (case n of
	    Concat(r) 
	    => if !(#status(r)) = DAZZLED
		   then let val li = Array.toList(#kids(r))
			    val xdim = 
				if List.null li 
				    then 0
				else 
				let val li' = List.take(li,List.length(li)-1)
				    val seclast = List.last(li')
				in if setsVertical seclast
				       then let val kids = getKids(seclast)
						val klist = Array.toList(kids)
					    in if Int.< (f (List.last(klist)),
							 max (klist,f) )
						   then sum_up(li',f) 
					       else sum_up (li,f)	 
					    end
				   else sum_up (li,f)
				end
			    val ydim = max (li,g)
			in (#width(r) := xdim  
			    ; #height(r) := ydim
			    ; #status(r) := DIRTY
			    ; (xdim,ydim,0) )
			end
	       else (get_xdim(n),get_ydim(n),0)   
	  | Container(r)
	    => if !(#status(r)) = DAZZLED
		   then let val li = Array.toList(#kids(r))
			    val xdim = if (setsVertical n) 
					   then max (li,f) 
				       else sum_up (li,f)
			    val ydim = if setsVertical n 
					   then sum_up (li,g)
				       else max (li,g)
			    val l_xdim = if List.null(li)
					     then 0
					 else f (List.last(li))
			in (#width(r) := xdim  
			    ; #height(r) := ydim
			    ; #l_width(r) := l_xdim
			    ; #status(r) := DIRTY
			    ; (xdim,ydim,l_xdim) )   
			end
	       else (get_xdim(n),get_ydim(n),get_l_xdim(n)) 
	  | Simple(r) => (if !(#status(r)) = DAZZLED
			      then #status(r) := DIRTY
			  else ()
			 ; (get_xdim(n),get_ydim(n),0) )
	  | Limit(r) => (if !(#status(r)) = DAZZLED
			     then #status(r) := DIRTY
			 else ()
			     ; (get_xdim(n),get_ydim(n),0) )
	  | RelRefNode(r) => (if !(#status(r)) = DAZZLED
				  then #status(r) := DIRTY
			      else ()
			     ; (get_xdim(n),get_ydim(n),0) )  
	  | RelNode(r) 
	    => (if !(#status(r)) = DAZZLED
		    then let val xdim = if !(#counter(r)) = 1 
					    then f (!(#content(r))) 
					else String.length(#rep(r)) + 
					     f (!(#content(r)))
			     val ydim =  g (!(#content(r)))
			 in (#width(r) := xdim  
			     ; #height(r) := ydim
			     ; #status(r) := DIRTY) 
			 end   
		else ()
	       ; (get_xdim(n),get_ydim(n),0) )
	  | Empty => (0,0,0) )
	end
    
   
   (* calcMaxXDim *) 
   fun calcMaxXDim (dict,i)  = 
       if i > MainDictionary.getHighestIndexAssigned(dict) 
	   then 0
       else
	   case MainDictionary.lookup(dict,i) of
	       NONE => calcMaxXDim(dict,i+1)
	     | SOME node => let
				val x  =  get_xdim(node)
				val x' =  calcMaxXDim(dict,i+1)
			    in
				if x > x' then x 
				else x' 
			    end

    fun setVisible (x,y) = let
			       val w = WindowHelper.fontWidth
				   (!Settings.font)
			       val h = WindowHelper.fontHeight
				   (!Settings.font)
			       val rx =  Real.fromInt(w * x)
			       val ry =  Real.fromInt(h * y)
			   in
			       (if Real.> (rx,!(Settings.max_x)) 
				    then Settings.max_x := rx 
				else Settings.max_x := 
				    Real.fromInt(w * 
				    calcMaxXDim (Dictionaries.dict,0))
				    ; Settings.max_y 
				    := Real.+(!Settings.max_y,ry))
			   end

end

  
