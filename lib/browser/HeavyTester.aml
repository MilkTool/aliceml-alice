import structure UnsafeInspector from "UnsafeInspector";
import structure Reflect from "x-alice:/lib/system/Reflect";

structure Arr = Reflect.ReflectType(type t = int array);
val x = lazy 77;
val arr = Array.array(20,x);

UnsafeInspector.inspect(arr,Arr.x);

Future.await(x);

(**********)

val x0 = lazy 0;
val x1 = lazy 1;
val x2 = lazy 2;
val x3 = lazy 3;
val x4 = lazy 4;
val x5 = lazy 5;
val x6 = lazy 6;
val x7 = lazy 7;
val x8 = lazy 8;
val x9 = lazy 9;

fun f i = case i of 0 => x0
                  | 1 => x1
		  | 2 => x2
		  | 3 => x3
		  | 4 => x4
		  | 5 => x5
		  | 6 => x6
		  | 7 => x7
		  | 8 => x8
		  | 9 => x9

structure Mat = Reflect.ReflectType(type t = int array array);
val arr = Array.tabulate(10,f);
val mat = Array.array(20,arr);

UnsafeInspector.inspect(mat,Mat.x);

val _ = ( Future.await x0
	 ; Future.await x1
	 ; Future.await x2
	 ; Future.await x3
	 ; Future.await x4
	 ; Future.await x5
	 ; Future.await x6
	 ; Future.await x7
	 ; Future.await x8
	 ; Future.await x9 );


