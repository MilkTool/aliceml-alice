(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Inf from "x-alice:/lib/rtt/Inf"
import structure Type from "x-alice:/lib/rtt/Type"
import structure Path from "x-alice:/lib/rtt/Path"
import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Reflect from "x-alice:/lib/system/Reflect" 

signature TYPES = 
sig
   
    datatype actions = NO_ACTIONS (* wird spaeter erweitert *)
    
    datatype desc = 
	INTERPUNCT
      | VALUE of {value : Reflect.value,
		  typ : Type.typ,
		  actions : actions}
      | I_VALUE of {value : Reflect.value,
		    typ : Inf.t,
		    actions : actions} 

   datatype limit = DEPTH_LIMIT | WIDTH_LIMIT

   datatype status = CLEAN | DIRTY | DAZZLED | DEAD (* bei Futures *)

   datatype color_class = INT_COLOR 
                        | REAL_COLOR
                        | CHAR_COLOR
                        | STR_COLOR
                        | WORD_COLOR
                        | EXN_COLOR
                        | REF_COLOR
                        | LABEL_COLOR
                        | SEP_COLOR
                        | EQU_COLOR
                        | LIMIT_COLOR
                        | BRACK_COLOR
                        | REL_COLOR
                        | DEFAULT

   datatype node = 
       Simple of {desc : desc, 
		  parent : node,
		  index : int,
		  depth : int,
		  rep : string,
		  width : int ref,
		  color : color_class, 
		  status : status ref,
		  group : Gtk.object}
       
     | Concat of {desc : desc, 
 		  parent : node,
		  index : int,
                  depth : int,
		  kids : node array, 
		  width : int ref,
                  height : int ref,
		  status : status ref,
		  group : Gtk.object}
           
     | Container of {desc : desc, 
		     parent : node,
		     index : int,
		     depth : int,
		     kids : node array, 
		     width : int ref,
		     height : int ref,
                     l_width : int ref,
		     status : status ref,
		     group : Gtk.object}
       
     | Limit of {desc : desc,
		 sort : limit, 
		 parent : node,
		 index : int,
		 depth : int,
		 status : status ref,
		 group : Gtk.object}

     | RelNode of {desc : desc, 
                   content : node ref,
		   parent : node,  
		   index : int, 
		   depth : int,
                   counter : int ref, 
		   rep : string, 
	           relman : node list ref, 
                   width : int ref,
                   height : int ref,
		   color : color_class, 
		   status : status ref, 
		   group : Gtk.object }  
       
     | RelRefNode of {desc : desc, 
		      parent : node, 
		      index : int,
		      depth : int,
                      rep : string, 
		      relnode : node, 
                      width : int ref, 
		      color : color_class, 
		      status : status ref,  
		      group : Gtk.object}  

    | Empty
       
   datatype doc = 

       SIMPLE of {desc : desc, 
		  rep : string, 
		  color : color_class }

     | CONCAT of {desc : desc, 
		  kids : doc vector }

     | CONTAINER of {desc : desc, 
		     kids : doc vector }

     | LIMIT of {desc : desc, 
		 sort : limit }

     | EMBEDDED of Reflect.value * Type.t

   (* zur Behandlung von Listen *)
   datatype 'a list_desc = Det of 'a list * bool (* ohne Future *)
                         | Indet of 'a list * 'a list (* mit Future *)
       
   val compList : Type.t

end;


     
