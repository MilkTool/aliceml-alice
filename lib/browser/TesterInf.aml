import structure NewNodeInf from "NewNodeInf";
import structure Layout from "Layout";
import structure UnsafeInspector from "UnsafeInspector";
import structure Reflect from "x-alice:/lib/system/Reflect";
import structure UnsafeValue from "x-alice:/lib/system/UnsafeValue";
import structure Inf from "x-alice:/lib/rtt/Inf";

import signature FD from "x-alice:/lib/constraints/FD-sig";
import structure FD from "x-alice:/lib/constraints/FD";

structure V = Reflect.Reflect(signature S = FD structure X = FD);
structure T = Reflect.ReflectSig(signature S = FD);

UnsafeInspector.inspectInf(V.x,T.x);

signature SIMPLE = 
sig
    val x : string
end;

signature TEST =
sig
    type t
    val test: string
    val foo: string -> string
    signature S
    structure X: SIMPLE
end;

structure Test = 
struct
    type t = string
    val test = "hi"
    fun foo str = str^"@"
    signature S = sig
		      val x : string
		  end
    structure X = struct
		      val x = "du"
		  end
end;

structure V = Reflect.Reflect(signature S = TEST structure X = Test);
val v = V.x;

structure T = Reflect.ReflectSig(signature S = TEST);
val t = T.x;

val n = NewNodeInf.newNodeInf (v,t);

UnsafeInspector.inspectInf (v,t);

(*****)

val ilist = Inf.items(Inf.asSig(t));
val label = itemToLabel(List.nth(ilist,0));
 
val test = UnsafeValue.projPoly(v,label);

