import structure NewNode from "NewNode";
import structure Layout from "Layout";
import structure UnsafeInspector from "UnsafeInspector";
import structure Reflect from "x-alice:/lib/system/Reflect";
import structure UnsafeValue from "x-alice:/lib/system/UnsafeValue";
import structure Inf from "x-alice:/lib/rtt/Inf";

(* FD-Struktur *)
import signature FD from "x-alice:/lib/constraints/FD-sig";
import structure FD from "x-alice:/lib/constraints/FD";

structure V = Reflect.Reflect(signature S = FD structure X = FD);
structure T = Reflect.ReflectSig(signature S = FD);

UnsafeInspector.inspectInf(V.x,T.x);


signature SIMPLE = 
sig
    val x : string
end;

signature TEST =
sig
    type t
    val test: string
    val foo: string -> string
    signature S
    structure X: SIMPLE
end;

structure Test = 
struct
    type t = string
    val test = "hi"
    fun foo str = str^"@"
    signature S = sig
		      val x : string
		  end
    structure X = struct
		      val x = "du"
		  end
end;

structure V = Reflect.Reflect(signature S = TEST structure X = Test);
val v = V.x;

structure T = Reflect.ReflectSig(signature S = TEST);
val t = T.x;

UnsafeInspector.inspectInf (v,t);

(* Gtk-Struktur - funktioniert zur Zeit nicht *)
import signature GTK from "x-alice:/lib/gtk/GTK-sig";
import structure Gtk from "x-alice:/lib/gtk/Gtk";

structure V = Reflect.Reflect(signature S = GTK structure X = Gtk);
structure T = Reflect.ReflectSig(signature S = GTK);

UnsafeInspector.inspectInf (V.x,T.x);

(* Gdk-Struktur *)
import signature GDK from "x-alice:/lib/gtk/GDK-sig";
import structure Gdk from "x-alice:/lib/gtk/Gdk";

structure V = Reflect.Reflect(signature S = GDK structure X = Gdk);
structure T = Reflect.ReflectSig(signature S = GDK);

UnsafeInspector.inspectInf (V.x,T.x);


(*****)

structure P = Package.Pack (signature S = TEST structure X = Test);
structure Pack = Reflect.ReflectType (type t = Package.package);

UnsafeInspector.inspect(P.package,Pack.x);


