(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import signature MK_WINDOW from "MK_WINDOW-sig"
import structure Settings from "Settings"
import functor MkWindow from "MkWindow"
import structure Dictionaries from "Dictionaries" (* to be verified *)
import structure MainDictionary from "MainDictionary" (* to be verified *)
import signature WINDOW_MANAGER from "WINDOW_MANAGER-sig"


structure WindowManager :> WINDOW_MANAGER =
    struct
	 structure W = MkWindow() :MK_WINDOW


	val alive      = ref W.alive 
	val canvasroot = ref W.canvasroot
	val window     = ref W.window
	val show       = ref W.show
	val resize     = ref W.resize
	val register   = ref W.register

	val act_line = ref 0

	fun incr_act_line dy = act_line := !act_line + dy
	    
	fun new () = let
			 val a =  !(!alive)
		     in
			 if  a then () 
			 else let
				  structure W =  MkWindow() :MK_WINDOW
				  val _    = alive:= W.alive 
				  val _ = canvasroot := W.canvasroot
				  val _ = window := W.window
				  val _ = show:=  W.show
				  val _ = resize:= W.resize
				  val _ = register := W.register
				  val _ = Settings.max_x :=0.0
				  val _ = Settings.max_y :=0.0
				  val _ = MainDictionary.dumpAll(Dictionaries.dict)
			      in
				  (incr_act_line (~(!act_line)) )
			      end
		     end
end
