(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Gdk from "x-alice:/lib/gtk/Gdk"
import structure Gtk from "x-alice:/lib/gtk/Gtk"

signature GTK_SUPPORT = 
    sig
	
	type tag = Gtk.object
	type color = Gtk.object
	
	(** Primitve Gtk Instructions **)

	val toplevelWindowNew:       unit -> tag
	val windowSetTitle:          tag * string -> unit
	val windowSetPolicy:         tag * int * int * int -> unit
	val windowSetDefaultSize:    tag * int * int -> unit
	val widgetSetUsize:          tag * int * int -> unit
	val widgetSetSensitive:      tag * bool -> unit
	val widgetShowAll:           tag -> unit 
	val widgetHideAll:           tag -> unit
	val containerAdd:            tag * tag -> unit
	val signalConnect:           tag * string * (tag * Gtk.arg list -> unit) 
	                             -> int
	val labelNew:                string -> tag
	val radioButtonNewWithLabel: tag * string -> tag
	val radioButtonGroup:        tag -> tag
	val toggleButtonSetActive:   tag * bool -> unit
	val toggleButtonGetActive:   tag -> bool
	val spinButtonGetValueAsInt: tag -> int 
	val widgetDestroy:           tag -> unit
	val objectDestroy:           tag -> unit
	val adjustmentNew:           real * real * real * real * real * real 
	                             -> tag 
	val widgetSetScrollAdjustments: tag * tag * tag -> bool
	val adjustmentGetFieldPageSize: tag -> real
	val adjustmentGetFieldUpper: tag -> real
	val adjustmentGetFieldValue: tag -> real	
	val layoutFreeze:            tag -> unit
	val layoutThaw:              tag -> unit
	val menuBarAppend:           tag * tag -> unit
	val menuItemNewWithLabel:    string -> tag
	val menuItemRightJustify:    tag -> unit
	val menuBarInsert:           tag * tag * int -> unit

	(** GtkCanvas Primitives **)

	val canvasNew:               unit -> tag
	val canvasRoot:              tag -> tag
	val canvasItemSet:           tag * string * Gtk.arg -> unit
	val canvasItemLowerToBottom: tag -> unit
	val canvasSetScrollRegion:   tag * real * real * real * real -> unit
	val canvasItemMove:          tag * real * real -> unit   
	    
	(** Gdk Primitves **)
	    
	val fontLoad:                string -> tag
	val fontGetFieldAscent:      tag -> int
	val fontGetFieldDescent:     tag -> int	
	val stringWidth:             tag * string -> int
	    
	type event = Gdk.event

	(** Window Creation Toolkit **)
    
	(* Gtk NULL-pointer *)
	val uglyNULL : tag
	    
	(* Abstractions for Menu Creation *) 
	datatype MenuLabel = SEP | LABEL of string
	    
	datatype Handler = Handler of string * (Gtk.arg list -> unit)
	    
	datatype MenuConstructObj = 
	    BarObj of MenuConstructObj list
	  | PopupObj of MenuConstructObj list
	  | MenuObj of {title: string, 
			items: MenuConstructObj list, 
			sensitive: bool} 
	  | EntryObj of MenuLabel * Handler list * bool  
	    
	datatype RadioButtonObj = RBObj of string * Handler list
	    
	datatype ButtonObj = BObj of string * Handler list
	    
	(* Menu Creation *)
	    
	val createMenu:  MenuConstructObj -> tag
	val createCombo : string list -> tag 
	    
	val createNotebookPages : tag -> string * tag -> unit
	val createNotebook : (string * tag) list -> tag

	val createRadioItem : RadioButtonObj * tag -> tag
	val createRadioButtons : RadioButtonObj list -> tag

	val createButton : ButtonObj -> tag
	val createButtonBox: 
	    {buttons: ButtonObj list, borderwidth: int} -> tag
	
	val createTable: 
	    {rows : int, cols : int, 
	     entries : (tag * int * int * int * int) list} -> tag
	
	val createSpinButton:  {init : int, 
				lower : int, 
				upper : int, 
				inc : int, 
				dec : int} -> tag
	    
	val createVBoxDefaults: tag list -> tag   
	val createVBox: (tag * bool * bool * int) list -> tag
	
	val createFrame : string * tag -> tag
	
	val createScrollWindowDefaults: real * real * real * real
	    -> Gtk. object * tag * tag
	
	val createStatusbar: unit 
	    -> tag * (string -> int) * (string -> int)
	
	val stopButton: tag
	val stopButtonSetActive: bool -> unit

	val busyButton: tag
	val busyButtonSetActive: bool -> unit

	val createTextWindow: unit -> (string -> unit)
	    
	(** Complex Handler Functions **)

	(* "About..."-WindowHandler *)
	val aboutWindow: unit -> unit

	(* Scrolling *)
	val scroll: real * tag * tag * real-> unit

       (* handles scrolling via key press *)
	val handleGdkKeyPress: 
	    Gtk.arg list * tag * tag * tag * Real.real * Real.real -> unit
        
	(* Yields coordinates relative to the whole canvas *)
	val calcAbsoluteMousePointerPosition: 
	    real * real * tag * tag -> real * real

	(* mouse event handling *)
	val getMouseClickEventInfo: 
	    Gtk.arg list * tag * tag -> ((real * real) * int) option
	    
	(* Switches "selection" menu on/off *)
	val setSelectionMenuSensitive: tag * bool -> unit

	(* switches the expand field of the menu on/off *) 
	val setExpandSensitive: tag * bool -> unit

	(* switches the shrink field of the menu on/off *) 
	val setShrinkSensitive: tag * bool -> unit

	(** Canvas Items & Handling **)
	    
	(* registers a color (specified by rgb parameters) *)
	val allocColor    : int * int * int -> tag
	    
	(* creates the white rectangle as canvas background *)
	val createCanvasBackground: 
	    tag * real * real -> tag

	(* function that sets the canvas size and associated scroll values *)
	val resizeCanvas: 
	    real * real * tag * tag * tag * real * real * real * real -> unit

	(* creates a Gtk group *)
	val newTag        : tag * real * real -> tag

	(* prints text in the top left corner of a group *)
	val print00       : string * tag * tag * string -> tag

	(* puts a group at a specified position *)
	val positionGroup : tag * real * real -> unit

	(* moves a Gtk group  (args represent distance in characters) *)
	val moveGroup     : tag * int * int * int * int -> unit
	
	(* queries the boundaries (in character positions) of the object *)
	val getCoordinates: tag * int * int -> int * int * int * int 

	(* same as above with only two return values *)
	val getPosition   : tag * int * int -> int * int

	(* moves a Gtk item (absolute parameters) *)
	val itemMoveTo    : tag * real * real -> unit

	(* creates horizontal Line on canvas *)
	val createSepLine : tag * int * real * int -> tag

	(* adjusts length of a separation line *)
	val resizeSepLine : tag * int -> unit

	(* moves separation line below the group it belongs to *)
	val yPosSepLine   : tag * tag * int -> unit 

	(* Arrow creation *)
	val createArrowRight: tag * tag * int * int  -> tag
	val createArrowDown: tag * tag * int * int -> tag
	
	(* Creates Simple Rectangle *)
	val createRectangle: tag * real * real * real * real -> tag

end
