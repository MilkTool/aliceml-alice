import structure Type from "x-alice:/lib/rtt/Type"
import structure Path from "x-alice:/lib/rtt/Path"
import structure PervasiveType from "x-alice:/lib/rtt/PervasiveType"
import structure PathMap from "x-alice:/lib/rtt/PathMap"
import structure MkHashImpMap from "x-alice:/lib/utility/MkHashImpMap"
import structure Gdk from "x-alice:/lib/gtk/Gdk"
import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure GtkCanvas from "x-alice:/lib/gtk/GtkCanvas"
import structure Create_Doc from "create_doc"import structure Layout from "layout"
import structure NewNode from "newNode"
import structure Layout from "layout"
import structure Window from "Window"

open Create_Doc NewNode Layout

(*** Signatur UNSAFE_INSPECTOR ***)

signature UNSAFE_INSPECTOR = 
sig

(* Hauptfunktion zum Inspizieren von alice-Datenstrukturen (im Moment nur mit
   Uebergabe des Typs moeglich *)
    val inspect: 'a * Type.t -> unit

(* Einstellung der Tiefe (spaeter im Fenster selbst) *)
    val set_depth: int -> unit

(* Einstellung der Breite (spaeter im Fenster selbst) *)
    val set_width: int -> unit
    
(* Registrierung der create-Funktionen fuer Pfadtypen in der pathTable *)
    val init: unit -> unit

end;

(*** Struktur UnsafeInspector ***)

structure UnsafeInspector :> UNSAFE_INSPECTOR = 
struct
    fun inspect (value,typ) = let val n = newNode(value,typ)
                              in 
				 (layout n;Window.Node2Canvas(n,Window.window,Window.canvas) )
			      end

    fun set_depth d = depth := d

    fun set_width w = width := w

    fun init () = (registerType(PervasiveType.path_int, createInt)
		  ; registerType(PervasiveType.path_string, createString)
		  ; registerType(PervasiveType.path_char, createChar)
		  ; registerType(PervasiveType.path_word, createWord)
	          ; registerType(PervasiveType.path_real, createReal)
		  ; registerType(PervasiveType.path_exn, createExn)
		  ; registerType(PervasiveType.path_ref, createRef)
		  ; registerType(PervasiveType.path_vec, createVector)
		  ; registerType(PervasiveType.path_array, createArray))

    val _ = Window.windowInit(Window.window,"Small inspector",550,500)

    val _ = Window.canvasInit(Window.window, Window.canvas,1000.0,2000.0)

		 
    val _ = init()

end

