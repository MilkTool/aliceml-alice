(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus and Andreas Rossberg, 2004
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Reflect         from "x-alice:/lib/system/Reflect"
import structure UnsafeInspector from "UnsafeInspector"
(* import signature INSPECTOR from "INSPECTOR-sig" *)

structure Inspector' =
    struct
        fun inspect' t x = UnsafeInspector.inspect(x, t)
    end

structure Inspector (* : INSPECTOR *) =
    struct
        __overload 'a inspect :  'a -> unit = Inspector'.inspect'

        functor Inspect(X : (signature S structure X : S)) : any =
	    let
		structure I = Reflect.ReflectSig X
		structure M = Reflect.Reflect X
	    in
		(val _ = UnsafeInspector.inspectMod (M.x, I.x))
	    end

	val registerType = UnsafeInspector.registerType
    end
