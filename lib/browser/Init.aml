(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure PervasiveType from "x-alice:/lib/rtt/PervasiveType"
import structure UnsafeValue from "x-alice:/lib/system/UnsafeValue"

import structure Node from "Node"
import structure Doc from "Doc"
import structure Settings from "Settings"
import structure NewNode from "NewNode"
import structure NewNodeHelper from "NewNodeHelper"
import structure Update from "Update"

import signature INIT from "INIT-sig"

local 
    open Node Doc GtkSupport PervasiveType
in
   
structure Init :> INIT = 
struct
      
    val path_promise = lookupPath(coreSign,"Promise","promise")   

    val path_package = lookupPath(packageSign,"Package","package") 

    val path_val_package = lookupPath(packageSign,"Package","val_package")  
 
    (* init *)
    fun init () = (  registerType(path_int, createInt)
		   ; registerType(path_string, createString)
		   ; registerType(path_char, createChar)
		   ; registerType(path_word, createWord)
		   ; registerType(path_real, createReal)
		   ; registerType(path_exn, createExn)
		   ; registerType(path_ref, createRef)
		   ; registerType(path_vec, createVector)
		   ; registerType(path_array, createArray)
                   ; registerType(path_promise, createPromise)
                   ; registerType(path_package, createPackage)  
		   ; registerType(path_val_package, createValPackage) 
 
		   ; registerColor(INT_COLOR,  allocColor(0,45000,0))
		   ; registerColor(REAL_COLOR, allocColor(0,45000,0))
		   ; registerColor(CHAR_COLOR, allocColor(45000,0,50000))     
		   ; registerColor(STR_COLOR, allocColor(45000,0,50000)) 
		   ; registerColor(WORD_COLOR, allocColor(0,43000,0))
		   ; registerColor(EXN_COLOR,  allocColor (60000,40000,0))
		   ; registerColor(REF_COLOR, allocColor(0,0,0))
		   ; registerColor(LABEL_COLOR, allocColor (0,10000,65535))
		   ; registerColor(SEP_COLOR, allocColor(0,0,0))
	           ; registerColor(EQU_COLOR, allocColor(0,0,0))
	           ; registerColor(LIMIT_COLOR, allocColor (10000,60000,10000))
	           ; registerColor(BRACK_COLOR, allocColor (0,5000,47000))
	           ; registerColor(REL_COLOR, allocColor (60000,20000,0))
	           ; registerColor(DEFAULT, allocColor(0,0,0)) 

	           ; Window.register
	                    ("reinspect",fn (n,_) 
			                 => Update.reinspect(n,createGraph,
							     createGraphInf))
		   ; Window.register
			    ("width",
			     fn (n,i) => (print "starting width !!!!!\n"
					  ;Update.foldWidth(n,i,createGraph,
							  createGraphInf)))
                   ; Window.register
			    ("depth",
			     fn (n,i) => (print "starting depth !!!!\n"
                                          ;Update.foldDepth(n,i,createGraph,
							    createGraphInf)))

                   ; Window.register
			    ("shrink",
			     fn (n,_) 
			     => let val diff = Helper.getDepth(n) - 
			                       Update.findHighestDepth n
				in if diff >= 0 
				       then ()
				   else Update.foldDepth(n,diff-1,createGraph,
							 createGraphInf)
				end)
		   ; Window.register
			    ("expand",
			     fn (n,_) 
			     => Update.foldDepth(n,1,createGraph,
						 createGraphInf)) 
	           ; Window.register
			    ("force evaluation", 
			     fn (n,_) 
			     => let val b_future = case Helper.getDesc n of  
				    VALUE(r) => UnsafeValue.cast (#value(r)) 
				  | I_VALUE(r) => UnsafeValue.cast (#value(r)) 
                                  | _ => raise Match 
				in Future.await(b_future) 
				end) )
		      
end

end
