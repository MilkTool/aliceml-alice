(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure PervasiveType from "x-alice:/lib/rtt/PervasiveType"
import structure Types from "Types"
import structure Helper from "Helper"
import structure Settings from "Settings"
import structure CreateDoc from "CreateDoc"
import structure NewNode from "NewNode"
import structure NewNodeHelper from "NewNodeHelper"
import structure MkColorTable from "MkColorTable"
import structure WindowManager from "WindowManager"
import structure Update from "Update"
import signature INIT from "INIT-sig"

local 
    open Types CreateDoc MkColorTable NewNode NewNodeHelper
in
   
structure Init :> INIT = 
struct
      
    val path_promise = lookupPath("Promise","promise")   

    val path_package = lookupPath("Package","package")   
 
    (* init *)
    fun init () = ( registerType(PervasiveType.path_int, createInt)
		   ; registerType(PervasiveType.path_string, createString)
		   ; registerType(PervasiveType.path_char, createChar)
		   ; registerType(PervasiveType.path_word, createWord)
		   ; registerType(PervasiveType.path_real, createReal)
		   ; registerType(PervasiveType.path_exn, createExn)
		   ; registerType(PervasiveType.path_ref, createRef)
		   ; registerType(PervasiveType.path_vec, createVector)
		   ; registerType(PervasiveType.path_array, createArray)
                   ; registerType(path_promise, createPromise)
                   ; registerType(path_package, createPackage)   
		   ; registerColor(INT_COLOR,  allocColor(0,45000,0))
		   ; registerColor(REAL_COLOR, allocColor(0,45000,0))
		   ; registerColor(CHAR_COLOR, allocColor(45000,0,50000))     
		   ; registerColor(STR_COLOR, allocColor(45000,0,50000)) 
		   ; registerColor(WORD_COLOR, allocColor(0,43000,0))
		   ; registerColor(EXN_COLOR,  allocColor (60000,40000,0))
		   ; registerColor(REF_COLOR, allocColor(0,0,0))
		   ; registerColor(LABEL_COLOR, allocColor (0,10000,65535))
		   ; registerColor(SEP_COLOR, allocColor(0,0,0))
	           ; registerColor(EQU_COLOR, allocColor(0,0,0))
	           ; registerColor(LIMIT_COLOR, allocColor (10000,50000,10000))
	           ; registerColor(BRACK_COLOR, allocColor (0,5000,47000))
	           ; registerColor(REL_COLOR, allocColor (60000,20000,0))
	           ; registerColor(DEFAULT, allocColor(0,0,0)) 
	           ; !WindowManager.register
	                    ("reinspect",fn (n,_) 
			                 => Update.reinspect(n,createGraph,
							     createGraphInf))
		   ; !WindowManager.register
			    ("width",
			     fn (n,i) => Update.foldWidth(n,i,createGraph,
							  createGraphInf))
                   ; !WindowManager.register
			    ("depth",
			     fn (n,i) => Update.foldDepth(n,i,createGraph,
							  createGraphInf))

                   ; !WindowManager.register
			    ("shrink",
			     fn (n,_) 
			     => let val diff = Helper.getDepth(n) - 
			                       Update.findHighestDepth n
				in if diff >= 0 
				       then ()
				   else Update.foldDepth(n,diff-1,createGraph,
							 createGraphInf)
				end)
		   ; !WindowManager.register
			    ("expand",
			     fn (n,_) 
			     => Update.foldDepth(n,1,createGraph,
						 createGraphInf)) )
		      
end

end
