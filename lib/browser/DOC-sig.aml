(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Inf from "x-alice:/lib/rtt/Inf"
import structure Type from "x-alice:/lib/rtt/Type"
import structure Path from "x-alice:/lib/rtt/Path"
import structure PathMap from "x-alice:/lib/rtt/PathMap"
import structure Reflect from "x-alice:/lib/system/Reflect"

signature DOC =
sig

    datatype limit = DEPTH_LIMIT | WIDTH_LIMIT

    datatype color_class = INT_COLOR 
                         | REAL_COLOR
                         | CHAR_COLOR
                         | STR_COLOR
                         | WORD_COLOR
                         | EXN_COLOR
                         | REF_COLOR
                         | LABEL_COLOR
                         | SEP_COLOR
                         | EQU_COLOR
                         | LIMIT_COLOR
                         | BRACK_COLOR
                         | REL_COLOR
                         | DEFAULT

    (* datatype for storage of value and type information in nodes *)
	
    datatype desc = 
	INTERPUNCT
      | VALUE of {value : Reflect.value,
		  typ : Type.typ}
      | I_VALUE of {value : Reflect.module,
		    typ : Inf.t} 

    (* datatype for path types representing the datastructure hierarchy *)

    datatype doc = 
	
	SIMPLE of {desc : desc, 
		   rep : string, 
		   color : color_class }
	
      | CONCAT of {desc : desc, 
		   kids : doc vector }
	
      | CONTAINER of {desc : desc, 
		      kids : doc vector }
	
      | LIMIT of {desc : desc, 
		  sort : limit }
	
      | EMBEDDED of Reflect.value * Type.t
	
      | EMBEDDED_INF of Reflect.module * Inf.t


    (* function type for functions creating instances of doc *)  
	
    type doc_creator = int * int * Reflect.value * Type.t -> doc  


    (* storage (& registration) for doc creator functions *)

     val pathTable: (int * int * Reflect.value * Type.t -> doc) PathMap.map

     val coreSign: Inf.sign
     val packageSign: Inf.sign

     val lookupPath: Inf.sign * string * string -> Path.path

     val registerType : Path.path * doc_creator -> unit

     (* operations on desc *)
	 
     val createValue  :  Reflect.value * Type.t -> desc
     val createIValue :  Reflect.module * Inf.t -> desc
	
     val getValue : desc -> Reflect.value
     val getInfValue : desc -> Reflect.module
	 
     val getTyp : desc -> Type.typ
     val getInf : desc -> Inf.t

     (* doc creator functions *)

     val createInt        : doc_creator 

     val createIntInf     : doc_creator 

     val createString     : doc_creator 

     val createChar       : doc_creator 

     val createWord       : doc_creator 

     val createReal       : doc_creator 

     val createExn        : doc_creator 

     val createRef        : doc_creator  

     val createVector     : doc_creator 

     val createArray      : doc_creator 

     val createPromise    : doc_creator 

     val createPackage    : doc_creator

     val createValPackage : doc_creator
    
end 

