(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Inf from "x-alice:/lib/rtt/Inf"
import structure Type from "x-alice:/lib/rtt/Type"
import structure Path from "x-alice:/lib/rtt/Path"
import structure PathMap from "x-alice:/lib/rtt/PathMap"
import structure Reflect from "x-alice:/lib/system/Reflect"

import structure Node from "Node"

local open Node

in

signature DOC =
sig

     datatype doc = 
	
	SIMPLE of {desc : desc, 
		   rep : string, 
		   color : color_class }
	
      | CONCAT of {desc : desc, 
		   kids : doc vector }
	
      | CONTAINER of {desc : desc, 
		      kids : doc vector }
	
      | LIMIT of {desc : desc, 
		  sort : limit }
	
      | EMBEDDED of Reflect.value * Type.t
	
      | EMBEDDED_INF of Reflect.module * Inf.t

     type doc_creator = int * int * Reflect.value * Type.t -> doc  

    (* Map fuer doc-creator-Funktionen *)

     val pathTable: (int * int * Reflect.value * Type.t -> doc) PathMap.map

     val registerType : Path.path * doc_creator -> unit

     (* doc-creator-Funktionen *)

     val createInt     : doc_creator 

     val createString  : doc_creator 

     val createChar    : doc_creator 

     val createWord    : doc_creator 

     val createReal    : doc_creator 

     val createExn     : doc_creator 

     val createRef     : doc_creator  

     val createVector  : doc_creator 

     val createArray   : doc_creator 

     val createPromise : doc_creator 

     val createPackage : doc_creator

     val createValPackage : doc_creator
    
end (* signature *)

end
