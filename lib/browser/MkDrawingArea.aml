(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Print from "x-alice:/lib/system/Print"
import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Canvas from "x-alice:/lib/gtk/Canvas"
import structure GtkSupport from "GtkSupport"

import signature DRAWING_AREA from "DRAWING_AREA-sig"

functor MkDrawingArea (val parent  : Gtk.object
		       val xsize   : int
		       val ysize   : int
		       val scrollX : real
		       val scrollY : real) : DRAWING_AREA
=
struct

    type tag = GtkSupport.tag

    (* new canvas *)

    val canvas =  Canvas.new ()
	
    (* initial canvas settings *)

    val white = GtkSupport.allocColor (65535, 65535, 65535)
		
    val hadj = Gtk.scrolledWindowGetHadjustment parent
    val vadj = Gtk.scrolledWindowGetVadjustment parent

    fun update needMove (scrollX, scrollY) =
	let
	    val xSize      = Gtk.adjustmentGetFieldPageSize hadj
	    val ySize      = Gtk.adjustmentGetFieldPageSize vadj
	    val newScrollX = Real.max (scrollX, xSize)
	    val newScrollY = Real.max (scrollY, ySize)
	in
	    Canvas.setScrollRegion
		(canvas, 0.0, 0.0, newScrollX, newScrollY);
	    if needMove then
		Canvas.scrollTo (canvas, 0, Real.trunc (newScrollY - ySize))
	    else ()
	end

    val _ =  (Gtk.widgetSetSizeRequest (canvas, 100, 100); (* Minimal size *)
	      Gtk.widgetModifyBg (canvas, Gtk.STATE_NORMAL, white);
	      Gtk.containerAdd (parent, canvas))

    val root = Canvas.root canvas

    (* function to handle resize requests on this specific canvas *)

    fun resize (h,v,scrolled,valueh,valuev,max_x,max_y)  =
	(Print.printVal ("resize", max_x, max_y);
	 GtkSupport.resizeCanvas(h,v,scrolled,
				 canvas,
				 valueh,
				 valuev, 
				 max_x, 
				 max_y))
  
end
