(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Gtk from "x-alice:/lib/gtk/Gtk"

signature WINDOW_HELPER = 
sig

datatype MenuLabel = SEP | LABEL of string

datatype Handler = Handler of string * (Gtk.arg list -> unit)

datatype MenuConstructObj = 
    BarObj of MenuConstructObj list
  | PopupObj of MenuConstructObj list
  | MenuObj of {title: string, items: MenuConstructObj list, sensitive: bool} 
  | EntryObj of MenuLabel * Handler list * bool  

datatype RadioButtonObj = RBObj of string * Handler list

datatype ButtonObj = BObj of string * Handler list

val uglyNULL : Gtk.object

val setSensitive: Gtk.object * bool -> unit

val createMenu:  MenuConstructObj -> Gtk.object
val createCombo : string list -> Gtk.object 

val createNotebookPages :  Gtk.object -> string * Gtk.object -> unit
val createNotebook : (string * Gtk.object) list -> Gtk.object

val createRadioItem : RadioButtonObj * Gtk.object -> Gtk.object
val createRadioButtons : RadioButtonObj list -> Gtk.object

val createRectangle: Gtk.object * real * real * real * real -> Gtk.object

val copyArray' : 'a Array.array * 'a Array.array * int -> unit
val copyArray : 'a Array.array * 'a Array.array -> unit

val createButton : ButtonObj -> Gtk.object
val createButtonBox: {buttons: ButtonObj list, borderwidth: int}
    -> Gtk.object
val createTable: {rows : int, cols : int, 
		  entries : (Gtk.object * int * int * int * int) list} 
    -> Gtk.object
val createSpinButton:  {init : int, 
			lower : int, 
			upper : int, 
			inc : int, 
			dec : int} -> Gtk.object

val createVBoxDefaults: Gtk.object list -> Gtk.object   
val createVBox: (Gtk.object * int * int * int) list -> Gtk.object
val createFrame : string * Gtk.object -> Gtk.object
val createScrollWindowDefaults: real * real -> Gtk. object * Gtk.object * Gtk.object
val createStatusbar: unit -> Gtk.object * (string -> int) * (string -> int)


end
