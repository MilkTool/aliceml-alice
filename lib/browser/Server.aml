(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import signature SERVER from "SERVER-sig"

structure Server :> SERVER =
struct
    fun newServer () =
	let
	    val tail   = Promise.promise ()
	    val stream = Ref.ref tail
		
	    fun process s = (case s of
				 nil   => ()
			       | p::pr => (p ();
					   process pr))
	    fun send p =
		let
		    val newtail = Promise.promise ()
		    val tail    = Ref.exchange(stream, newtail)
		in
		    Promise.fulfill(tail, p::(Promise.future newtail))
		end
	in
	    (Thread.thread(fn () => (process(Promise.future tail))); send)
	end

    val serve = newServer ()

end
