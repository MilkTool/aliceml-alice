(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure PervasiveType from "x-alice:/lib/rtt/PervasiveType"

import structure Doc from "Doc"
import structure Widget from "Widget"

import signature UNSAFE_INSPECTOR from "UNSAFE_INSPECTOR-sig"

local 
    open PervasiveType Doc 
    
in

structure UnsafeInspector : UNSAFE_INSPECTOR = 
struct

    (***********************************************)

    datatype limit = datatype Doc.limit

    datatype color_class = datatype Doc.color_class

    datatype desc = datatype Doc.desc

    datatype doc = datatype doc 

    type doc_creator = Doc.doc_creator

    val createValue = Doc.createValue

    val registerType = registerType
	       
    (***********************************************)

    (***  registration of doc creator-functions ***)

    val path_intInf = lookupPath(coreSign,
				 "IntInf","int")   

    val path_word32 = lookupPath(coreSign,
				 "Word32","word")   

    val path_promise = lookupPath(coreSign,
				  "Promise","promise")   
	
    val path_package = lookupPath(packageSign,
				  "Package","package") 

    fun init () = ( registerType(path_int, createInt)
		   ; registerType(path_intInf, createIntInf)
		   ; registerType(path_string, createString)
		   ; registerType(path_char, createChar)
		   ; registerType(path_word, createWord)
		   ; registerType(path_word32, createWord32)
		   ; registerType(path_real, createReal)
		   ; registerType(path_exn, createExn)
		   ; registerType(path_ref, createRef)
		   ; registerType(path_vec, createVector)
		   ; registerType(path_array, createArray)
		   ; registerType(path_promise, createPromise)
		   ; registerType(path_package, createPackage) )  
	     
    val _ =  init ()
		    
    (***********************************************)

    (****** INSPECTION ******)

    (* inspection of values *)

    fun inspect (v,t) = Widget.inspect(v,t)
    
    (* inspection of modules *)

    fun inspectMod (v,t) = Widget.inspectMod(v,t)

end

end
