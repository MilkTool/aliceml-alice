(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Type from "x-alice:/lib/rtt/Type"
import structure Path from "x-alice:/lib/rtt/Path"
import structure Label from "x-alice:/lib/rtt/Label"
import structure Reflect from "x-alice:/lib/system/Reflect"
import structure Types from "Types"
import structure MainDictionary from "MainDictionary"
import structure RelManDictionary from "RelManDictionary"

local

open Types 

in

signature NEW_NODE =
sig

    val setGroup : node -> Gtk.object

    val newNode: 'a * Type.t -> node

    val createGraph: Reflect.value * Type.t  * node * int * int -> node
    
    val createUsualGraph: Reflect.value * Type.t  * node * int * int -> node
	  
    val createSimple: 
        desc * node * int * int * string * color_class * (node -> Gtk.object) 
	-> node
    
    val createConcat: 
	desc * node * int * int * node array * int * int * (node -> Gtk.object)
	-> node
	
    val createContainer: 
	desc * node * int * int * node array * int * int * int 
	* (node -> Gtk.object) -> node
    
    val createLimit: desc * limit * node * int * int * (node -> Gtk.object) 
	-> node

    val createRelNode : 
	desc * node * node * int * int * string * node list * 
	(node -> Gtk.object) -> node
   
    val createRelRefNode : 
	desc * node * int * int * string * node * (node -> Gtk.object) -> node

    val createTransient :
	Reflect.value * Type.t  * node * int * int * Type.t -> node

end

end
