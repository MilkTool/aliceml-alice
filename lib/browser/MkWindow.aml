(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Types from "Types"
import structure TextIO from "x-alice:/lib/system/TextIO"
import structure UnsafeValue from "x-alice:/lib/system/UnsafeValue"
import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"
import structure GtkCanvas from "x-alice:/lib/gtk/GtkCanvas"
import structure MkDrawingArea from "MkDrawingArea"
import structure WindowHelper from "WindowHelper"
import structure Settings from "Settings"
import structure Dictionaries from "Dictionaries"
import structure NodeSearch from "NodeSearch" 
import structure DrawNodes from "DrawNodes"
import structure Layout from "Layout"
import structure Server from "Server"
import structure Services from "Services"
import structure Helper from "Helper" (* to be verified *)
(* import structure Update from "Update" (* to be verified *)
import structure NewNode from "NewNode" (* to be verified *) *)
import signature MK_WINDOW from "MK_WINDOW-sig"

local 
open WindowHelper
in


functor MkWindow () :> MK_WINDOW =
struct

    type tag = Gtk.object

    val uglyNULL = UnsafeValue.cast () : Gtk.object

    val serve = Server.newServer ()

    val window = Gtk.windowNew Gtk.WINDOW_TOPLEVEL

    val _  = (Gtk.windowSetTitle (window, "Alice Browser V 0.2")
	      ; Gtk.widgetSetUsize (window, 400, 300)      )
  
    val alive = ref true

    val selection = ref NONE

    fun Delete _ = (Gtk.widgetDestroy(window);alive:= false)

    val _  = Gtk.signalConnect (window, "delete-event", Delete)

    val vbox = Gtk.vboxNew( 0 ,4)

    val handlers = Array.array(5,(fn n=> ()))

    fun selectHandler "reinspect" = Array.sub(handlers,0)
      | selectHandler "width"     = Array.sub(handlers,1)
      | selectHandler "depth"     = Array.sub(handlers,2)
      | selectHandler "shrink"    = Array.sub(handlers,3)
      | selectHandler "expand"    = Array.sub(handlers,4)

    fun register (str,handler) = 
	let
	    val i = case str of "reinspect" => 0
	  | "width" =>  1 
	  | "depth" =>  2
	  | "shrink" => 3
	  | "expand" => 4
	in
	    Array.update(handlers,i,handler)
	end
    
    (* "About..."-WindowHandler *)
    fun about _ = serve (fn () =>  
	let
	    val dialog = Gtk.dialogNew()
	    val _ = Gtk.windowSetTitle(dialog,"information")
	    val ok = Gtk.buttonNewWithLabel("OK")
	    val l = 
		Gtk.labelNew("Alice Browser \n Created by \n Bernadette Blum & Marvin Schiller")
	    fun ddialog _ = Gtk.widgetDestroy(dialog)
	    val _ = Gtk.signalConnect(ok,"clicked",ddialog) 
	    val _ = Gtk.containerAdd((Gtk.dialogGetFieldActionArea(dialog)),
				     ok)
	    val _ = Gtk.containerAdd((Gtk.dialogGetFieldVbox(dialog)),l)
	    val _ = Gtk.widgetShowAll(dialog)
	in
	    ()
	end)
			   
    (* Preferences Window Handler *)
    fun Preferences _ = serve (fn () =>
	let	
	    val vbox = Gtk.vboxNew(0,4)
	    (* Width & Depth Settings *)
	    val inner_vbox = Gtk.vboxNew(0,4)
	    val inner_hbox1 = Gtk.hboxNew(0,4)
	    val width_lab = Gtk.labelNew("Set Width Limit to...")
	    val a = Gtk.adjustmentNew(Real.fromInt(!Settings.max_width), 
				      0.0, 100.0, 1.0, 0.0, 0.0)
	    val width_s = Gtk.spinButtonNew(a,1.0,0)
	    val _ = Gtk.boxPackStart(inner_hbox1,width_lab,0,0,0)
	    val _ = Gtk.boxPackStart(inner_hbox1,width_s,0,0,0)
	    val inner_hbox2 = Gtk.hboxNew(0,4)
	    val depth_lab = Gtk.labelNew("Set Depth Limit to...")
	    val a2 = Gtk.adjustmentNew(Real.fromInt(!Settings.max_depth)
				       , 0.0, 100.0, 1.0, 0.0, 0.0)	
	    val depth_s = Gtk.spinButtonNew(a2,1.0,0)
	    val _ = Gtk.boxPackStart(inner_hbox2,depth_lab,0,0,0)
	    val _ = Gtk.boxPackStart(inner_hbox2,depth_s,0,0,0)
	    val _ = Gtk.boxPackStart(inner_vbox,inner_hbox1,0,0,0)
	    val _ = Gtk.boxPackStart(inner_vbox,inner_hbox2,0,0,0)
	    (* Mode Settings *)
	    val radiobox =  Gtk.vboxNew(0,4)
	    val treemode_button = Gtk.radioButtonNewWithLabel(uglyNULL, 
       			      "Tree Mode")
	    val _ =  Gtk.boxPackStart(radiobox,treemode_button,0,1,0)
	    val group = Gtk.radioButtonGroup(treemode_button)
	    val tokenmode_button = Gtk.radioButtonNewWithLabel(group, 
				"Relational Mode - Token Equality")
	    val _ =  Gtk.boxPackStart(radiobox,tokenmode_button,0,1,0)
	    val group = Gtk.radioButtonGroup(tokenmode_button)
	    val relmode_button = Gtk.radioButtonNewWithLabel(group, 
				"Relational Mode - Structural Equality")
	    val _ =  Gtk.boxPackStart(radiobox,relmode_button,0,1,0)
	    val _ = if !Settings.tokenmode 
			then Gtk.toggleButtonSetActive(tokenmode_button,1)
		    else if !Settings.relmode then 
			Gtk.toggleButtonSetActive(relmode_button,1)
			else
			Gtk.toggleButtonSetActive(treemode_button,1)
	    (* Buttonbox *)

	    val bbox = createButtonBox{buttons = [BObj("ok",[Handler("clicked",
		    (fn _ => let
			val _ =Settings.max_width := 
			       Gtk.spinButtonGetValueAsInt(width_s) 
		        val _ =Settings.max_depth := 
			       Gtk.spinButtonGetValueAsInt(depth_s)
		        val _ = Settings.relmode := (if 
			       Gtk.toggleButtonGetActive(relmode_button) = 1
							 orelse 
			       Gtk.toggleButtonGetActive(tokenmode_button) = 1
							 then true 
						     else false)
			val _ = Settings.tokenmode := (if 
		               Gtk.toggleButtonGetActive(tokenmode_button) = 1
							   then 
							       true 
						       else false)
			val _ =   Gtk.widgetDestroy(w)
			in
					()
			end))]),
				     BObj("apply",[]),
				     BObj("cancel",
					  [Handler("clicked",fn _ => 
						   Gtk.widgetDestroy(w))])]}
  
(* 	    val bbox = Gtk.hbuttonBoxNew()
	    val _ = Gtk.containerSetBorderWidth(bbox,10)
	    val _ = Gtk.buttonBoxSetLayout(bbox,Gtk.BUTTONBOX_END)
	    val ok_button = Gtk.buttonNewWithLabel("ok")
	    val apply_button = Gtk.buttonNewWithLabel("apply")
	    val cancel_button = Gtk.buttonNewWithLabel("cancel")
	    val _ = Gtk.containerAdd(bbox,ok_button)
	    val _ = Gtk.containerAdd(bbox,apply_button)
	    val _ = Gtk.containerAdd(bbox,cancel_button)
	    val n = createNotebook[("Width & Depth Limit Settings",inner_vbox),
				   ("Mode Settings",radiobox)] 
	    val w = Gtk.windowNew Gtk.WINDOW_TOPLEVEL
	    val _  = Gtk.signalConnect (cancel_button, "clicked", 
					fn _ => Gtk.widgetDestroy(w) )
	    val _  = Gtk.signalConnect (ok_button, "clicked", 
		fn _ => let
			val _ =Settings.max_width := 
			       Gtk.spinButtonGetValueAsInt(width_s) 
		        val _ =Settings.max_depth := 
			       Gtk.spinButtonGetValueAsInt(depth_s)
		        val _ = Settings.relmode := (if 
			       Gtk.toggleButtonGetActive(relmode_button) = 1
							 orelse 
			       Gtk.toggleButtonGetActive(tokenmode_button) = 1
							 then true 
						     else false)
			val _ = Settings.tokenmode := (if 
		               Gtk.toggleButtonGetActive(tokenmode_button) = 1
							   then 
							       true 
						       else false)
			val _ =   Gtk.widgetDestroy(w)
			in
					()
			end)
	    val _ = Gtk.windowSetTitle (w, "Preferences")
	    val _ = Gtk.boxPackStart(vbox,n,0,0,0)
	    val _ = Gtk.boxPackEnd(vbox,bbox,0,0,0)
	    val _ = Gtk.containerAdd(w,vbox)
	    val _  = Gtk.signalConnect (w, "delete-event", 
					fn _ => Gtk.widgetDestroy(w) )
	in
	    Gtk.widgetShowAll(w)
	end)
	
    (* Menu-Bar *)
    val bar = WindowHelper.createMenu
	(BarObj[MenuObj
		{title = "Inspector",
		 items = [EntryObj
			  (LABEL "About...",
			   [Handler("activate",
				    about)],true),
			  EntryObj(SEP,[],true),
			  EntryObj(LABEL "Close",
				   [Handler("activate",
					    Delete)],true)],
		 sensitive = true},
		MenuObj
		{title = "Selection",
		 items = [EntryObj(LABEL "Expand",
				   [],true),
			  EntryObj(LABEL "Shrink",
				   [],true),
			  EntryObj(SEP, [],true),
			  EntryObj(LABEL "Reinspect",
				   [],true)],
		 sensitive = true}   ,
		MenuObj
		{title = "Options",
		 items = [EntryObj(LABEL "Preferences...",
				   [Handler("activate",
					    Preferences)],true)],
		 sensitive = true}])  
	
    fun setSelectionMenuSensitive (bar,sensitive) = 
	let
	    val menu_heading_items = UnsafeValue.cast 
		(Gtk.containerChildren(bar)) : Gtk.object list
	    val menu_heading_selection = List.nth(menu_heading_items,1)
	    val selection_menu = hd
		(UnsafeValue.cast 
		 (Gtk.containerChildren(menu_heading_selection)) 
		 : Gtk.object list)
	    val submenu = Gtk.menuItemGetFieldSubmenu(menu_heading_selection)
	in
	    (setSensitive(submenu,sensitive)
	     ; setSensitive(selection_menu,sensitive))
	end

     val _ = setSelectionMenuSensitive (bar,false)  
	 
     val _ = Gtk.boxPackStart(vbox,bar,0,0,0)    
     val status = Gtk.statusbarNew()
     val st_context = Gtk.statusbarGetContextId(status,"st")
     val id = Gtk.statusbarPush(status,st_context,"Inspector Window started successfully")
     val _ = Gtk.boxPackEnd(vbox,status,0,0,0)
	 
     structure DA  =  MkDrawingArea(val xsize = !Settings.max_x 
				    val ysize = !Settings.max_y) 	
	 
     val scrolled = Gtk.scrolledWindowNew(uglyNULL,uglyNULL)
	 
     val _ = Gtk.scrolledWindowSetPolicy(scrolled,
					 Gtk.POLICY_ALWAYS,
					 Gtk.POLICY_ALWAYS)
	 
     val hadj = Gtk.scrolledWindowGetHadjustment(scrolled)
     val vadj = Gtk.scrolledWindowGetVadjustment(scrolled)
	 
     fun handleResize _ = serve (fn () => let
	                     val page_sh = Gtk.adjustmentGetFieldPageSize(hadj)
			     val upperh = Gtk.adjustmentGetFieldUpper(hadj)
			     val upperv = Gtk.adjustmentGetFieldUpper(vadj)
			     val page_sv = Gtk.adjustmentGetFieldPageSize(vadj)
			     val h = if (Real.< (page_sh,(!(Settings.max_x)))) 
					 then !(Settings.max_x) else page_sh 
			     val v = if (Real.< (page_sv,(!(Settings.max_y)))) 
					 then !(Settings.max_y) else page_sv
			   in
			    DA.resize(h,v)  
			 end)

    val _ = Gtk.signalConnect(scrolled,"size_allocate",handleResize)
    val _ = Gtk.boxPackStart(vbox,scrolled,Gtk.EXPAND,Gtk.FILL,0) 
    val _ = Gtk.containerAdd(scrolled,DA.canvas)
    val _ = Gtk.containerAdd(window,vbox)

    val lowest_layer  = GtkCanvas.itemNew(DA.root, 
			  GtkCanvas.GROUP,
			  [("x", Gtk.DOUBLE 0.0), 
			   ("y", Gtk.DOUBLE 0.0)])


    fun makePopup {node = n, widthhandler = w, depthhandler = d, 
		   reinspecthandler = r} = 
	let 
	    val reinspect_active = not(Helper.getDesc(n) = Types.INTERPUNCT)
	in
	case n of
	RelNode _ => ()
      | RelRefNode _ => ()
      | _ =>
	serve (fn () => 
	       (createMenu
		(PopupObj
		 [MenuObj{title = "Explore Tree",
			  items = [MenuObj
				   {title = "width",
				    items = 
				    [EntryObj(LABEL("+1"),[],true)],
				    sensitive = true},
				   MenuObj
				   {title = "depth",
				    items = 
				    [EntryObj(LABEL("-2"),[],true)],
				    sensitive = true}],
			  sensitive = true},
		  MenuObj{title = "Filter",
			  items = [],
			  sensitive = true},
		  MenuObj{title = "Actions",
			  items = [EntryObj(LABEL("reinspect"),r,
					    reinspect_active)],
			  sensitive = true}])
		;()))
	end
				      

	fun calcAbsolutePosition(x,y) = 
	    let
		val valueh = Gtk.adjustmentGetFieldValue(hadj)
		val valuev = Gtk.adjustmentGetFieldValue(vadj) 
		val x = Real.+ (x,valueh)
		val y = Real.+ (y,valuev)
	    in
		(x,y)
	    end
	
	fun destroySelectionMarkings () = case !selection of 
	    NONE => ()
	  | SOME(_,rect) => Gtk.objectDestroy(rect)  
		
	fun handleReinspect node = 
	    fn _ => (selectHandler("reinspect")) node

 fun handleEvent [Gdk.EVENT(event)] = serve (fn () =>
     let
	 val font_width = Services.fontWidth()
	 val font_height = Services.fontHeight()  
     in
	case event of
	  Gdk.GDK_BUTTON_PRESS({button = 1, ...} as r) => 
		    let 
			val (x,y) = calcAbsolutePosition(#x(r),#y(r))
			val node = 
			    NodeSearch.search(Dictionaries.dict,x,y)      
		    in 
		       (case node of 
			    SOME(n) => 
				let
				    val group = Helper.getGroup(n)
				    val x2 = Real.fromInt(font_width 
					    	* Layout.get_xdim(n))
				    val y2 = Real.fromInt(font_height 
						  *Layout.get_ydim(n))
				    val re =createRectangle(group,
							    0.0,
							    0.0,
							    x2,
							    y2)
				    val _ = GtkCanvas.itemLowerToBottom(re)
				    val _ = destroySelectionMarkings()
				    val _ = selection := SOME (n,re)
				in
				    setSelectionMenuSensitive(bar,true)
				end
			  | NONE => ( setSelectionMenuSensitive(bar,false)
				     ; destroySelectionMarkings()
					 ; selection := NONE))
		    end
	| Gdk.GDK_BUTTON_PRESS({button = 3, ...} as r) =>
		    let
			val (x,y) = calcAbsolutePosition(#x(r),#y(r))
			val node = 
			    NodeSearch.search(Dictionaries.dict,x,y)
		    in
		    (case node of 
		     SOME(n) 
		     =>( makePopup({node = n,
				    widthhandler = [], 
				    depthhandler = [], 
				    reinspecthandler = [Handler("activate",
							 handleReinspect(n))]})
				   ; ())
		   | NONE => ())
		    end
        | _ => ()
     end)
    
			     
    val _ = Gtk.signalConnect(DA.canvas,"event",handleEvent)
	
    val canvas = DA.canvas
    val canvasroot = lowest_layer
    val resize = handleResize
    fun show() = if !alive then Gtk.widgetShowAll(window) else ()
	
end

end (* MkWindow End *)


