(*
 * Authors:
 *   Bernadette Blum <blum@ps.uni-sb.de>
 *   Marvin Schiller <schiller@ps.uni-sb.de>
 *
 * Copyright:
 *   Bernadette Blum, 2002
 *   Marvin Schiller, 2002
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)
import structure Inspector from "x-alice:/lib/tools/Inspector"

import structure Types from "Types"
import structure TextIO from "x-alice:/lib/system/TextIO"
import structure UnsafeValue from "x-alice:/lib/system/UnsafeValue"
import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"
import structure GtkCanvas from "x-alice:/lib/gtk/GtkCanvas"
import structure MkDrawingArea from "MkDrawingArea"
import structure WindowHelper from "WindowHelper"
import structure Settings from "Settings"
import structure Dictionaries from "Dictionaries"
import structure RelManDictionary from "RelManDictionary"
import structure NodeSearch from "NodeSearch" 
import structure DrawNodes from "DrawNodes"
import structure Layout from "Layout"
import structure Server from "Server"
import structure Services from "Services"
import structure Helper from "Helper"  
import signature MK_WINDOW from "MK_WINDOW-sig"

local 
open WindowHelper

val serve' = Server.newServer () 

(* "About..."-WindowHandler *)
fun about _ = serve' (fn () =>  
		     let
			 val dialog = Gtk.dialogNew()
			 val ddialog = (fn _ =>  Gtk.widgetDestroy(dialog)) 
			 val ok = createButton(BObj("ok",[Handler("clicked",ddialog)]))
			 val l = 
			     Gtk.labelNew("Alice Browser \n"
					  ^ "Created by \n"
					  ^ "Bernadette Blum & Marvin Schiller")
		     in
			 ( Gtk.windowSetTitle(dialog,"information")
			  ; Gtk.containerAdd((Gtk.dialogGetFieldActionArea(dialog)),
					     ok)
			  ; Gtk.containerAdd((Gtk.dialogGetFieldVbox(dialog)),l)
			  ;Gtk.widgetShowAll(dialog))
		     end)

(* Handles ok Button in Preferences Window *)
fun okHandler(w,
	      width_s,
	      depth_s,
	      treemode_button,
	      relmode_button, 
	      tokenmode_button) = (fn _ => 
				   (Settings.max_width := 
				    Gtk.spinButtonGetValueAsInt(width_s) 
				    ;Settings.max_depth := 
				    Gtk.spinButtonGetValueAsInt(depth_s)
				    ;Settings.relmode := (
			            Gtk.toggleButtonGetActive(relmode_button) = 1
					  orelse 
       			            Gtk.toggleButtonGetActive(tokenmode_button) = 1)
				    ;Settings.tokenmode :=  
				    Gtk.toggleButtonGetActive(tokenmode_button) = 1
				    ;Gtk.widgetDestroy(w)
				    ;if 
				    Gtk.toggleButtonGetActive(treemode_button) = 1
					 then (RelManDictionary.dumpAll(Dictionaries.reldict)
					       ; Settings.relnumber := 0)
				     else ()))

(* Preferences Window Handler *)
fun Preferences _ = serve' (fn () =>
       	   let	
           (* Width & Depth Settings *)
	   val width_lab = Gtk.labelNew("Set Width Limit to...")	       
	   val width_s = createSpinButton{init =(!Settings.max_width) , 
					   lower = 0, 
					   upper = 100, 
					   inc = 1, 
					   dec = 0}
	    val depth_s = createSpinButton{init =(!Settings.max_depth) , 
					   lower = 0, 
					   upper = 100, 
					   inc = 1, 
					   dec = 0}
	    val depth_lab = Gtk.labelNew("Set Depth Limit to...")
	    val table = createTable{rows = 2, cols = 4, 
				    entries = [(width_lab,0,2,0,1),
				     (width_s,2,3,0,1),
				     (depth_lab,0,2,1,2),
				     (depth_s,2,3,1,2)]}
	    val frame = createFrame("",table)
	    (* Mode Settings *)
	    val treemode_button = Gtk.radioButtonNewWithLabel(uglyNULL, 
       			      "Tree Mode")
	    val group = Gtk.radioButtonGroup(treemode_button)
	    val tokenmode_button = Gtk.radioButtonNewWithLabel(group, 
				"Relational Mode - Token Equality")
	    val group = Gtk.radioButtonGroup(tokenmode_button)
	    val relmode_button = Gtk.radioButtonNewWithLabel(group, 
				"Relational Mode - Structural Equality")
	    val _ = if !Settings.tokenmode 
			then Gtk.toggleButtonSetActive(tokenmode_button,1)
		    else if !Settings.relmode then 
			Gtk.toggleButtonSetActive(relmode_button,1)
			else
			Gtk.toggleButtonSetActive(treemode_button,1)

	    val radiobox = createVBoxDefaults[treemode_button,
					      relmode_button,
					      tokenmode_button]
	    (* Buttonbox *)

	    val w = Gtk.windowNew Gtk.WINDOW_TOPLEVEL
	    val bbox = createButtonBox{buttons = 
		      [BObj("ok",[Handler("clicked",
					  (okHandler(w,
						     width_s,
						     depth_s,
						     treemode_button,
						     relmode_button,
						     tokenmode_button)   ))]),
		       BObj("apply",[]),
		       BObj("cancel",
			    [Handler("clicked",fn _ => 
				     Gtk.widgetDestroy(w))])],
				       borderwidth = 20}
		
		
	    val n = createNotebook[("Width & Depth Limit Settings",frame),
				   ("Mode Settings",radiobox)] 

	    val vbox = createVBoxDefaults[n,bbox]
		in
		    (Gtk.windowSetTitle (w, "Preferences")
		    ;Gtk.windowSetPolicy(w,0,0,1)
	            ;Gtk.containerAdd(w,vbox)
	            ;Gtk.signalConnect (w, "delete-event", 
					fn _ => Gtk.widgetDestroy(w) )
		     ;Gtk.widgetShowAll(w))
	end)

(* Switches "selection" menu on/off *)
fun setSelectionMenuSensitive (bar,sensitive) = 
	let
	    val menu_heading_items = UnsafeValue.cast 
		(Gtk.containerChildren(bar)) : Gtk.object list
	    val menu_heading_selection = List.nth(menu_heading_items,1)
	    val selection_menu = hd
		(UnsafeValue.cast 
		 (Gtk.containerChildren(menu_heading_selection)) 
		 : Gtk.object list)
	    val submenu = Gtk.menuItemGetFieldSubmenu(menu_heading_selection)
	in
	    (setSensitive(submenu,sensitive)
	     ; setSensitive(selection_menu,sensitive))
	end

val window' = Gtk.windowNew Gtk.WINDOW_TOPLEVEL

val alive' = ref true

fun Delete _ = (Gtk.widgetDestroy(window');alive':= false)

val selection = ref NONE
    
fun destroySelectionMarkings () = case !selection of 
    NONE => ()
  | SOME(_,rect) => Gtk.objectDestroy(rect) 


fun getSelectionNode() = case !selection of 
    NONE => Types.Empty
  | SOME(n,_) => n  

(* invokes canvas resize *)	
fun handleResize (scrolled,hadj,vadj,resize) = (fn _ =>  serve' (fn () => let
	                     val page_sh = Gtk.adjustmentGetFieldPageSize(hadj)
			     val upperh = Gtk.adjustmentGetFieldUpper(hadj)
			     val valueh = Gtk.adjustmentGetFieldValue(hadj)
			     val upperv = Gtk.adjustmentGetFieldUpper(vadj)
			     val valuev = Gtk.adjustmentGetFieldValue(vadj) 
			     val page_sv = Gtk.adjustmentGetFieldPageSize(vadj)
			     val h = if (Real.< (page_sh,(!(Settings.max_x)))) 
					 then !(Settings.max_x) else page_sh 
			     val v = if (Real.< (page_sv,(!(Settings.max_y)))) 
					 then !(Settings.max_y) else page_sv
			   in
			       resize(h,v,scrolled,valueh,valuev  )  
			 end))

(* Scrolling *)
fun scrollX (x,scrolled,hadj) = let
				    val valueh = Gtk.adjustmentGetFieldValue(hadj)
				    val pages =  Gtk.adjustmentGetFieldPageSize(hadj)
				in
				    ( if Real.> (Real.+(Real.+(valueh,x),pages),!Settings.max_x)
			      then  Gtk.adjustmentSetValue(hadj,Real.-(!Settings.max_x,pages))
				      else Gtk.adjustmentSetValue(hadj,Real.+(valueh,x))
			  ;())
		     end

fun scrollY (y,scrolled,vadj) = let
			 val pages =  Gtk.adjustmentGetFieldPageSize(vadj)
			 val valuev = Gtk.adjustmentGetFieldValue(vadj)
		     in
			 ( if Real.>(Real.+(Real.+(valuev,y),pages),!Settings.max_y) 
			       then  Gtk.adjustmentSetValue(vadj,Real.-(!Settings.max_y,pages))
			   else  Gtk.adjustmentSetValue(vadj,Real.+(valuev,y))
			  ;())
		     end 

(* Popup window for selection *)
 fun makePopup {node = n, widthhandler = w, depthhandler = d, 
		   reinspecthandler = r} = 
	let 
	    val reinspect_active = not(Helper.getDesc(n) = Types.INTERPUNCT)
	in
	case n of
	Types.RelNode _ => ()
      | Types.RelRefNode _ => ()
      | _ =>
	serve' (fn () => 
	       (createMenu
		(PopupObj
		 [MenuObj{title = "Explore Tree",
			  items = [MenuObj
				   {title = "width",
				    items = 
				    [EntryObj(LABEL("+1"),[],true)],
				    sensitive = true},
				   MenuObj
				   {title = "depth",
				    items = 
				    [EntryObj(LABEL("-2"),[],true)],
				    sensitive = true}],
			  sensitive = true},
		  MenuObj{title = "Filter",
			  items = [],
			  sensitive = true},
		  MenuObj{title = "Actions",
			  items = [EntryObj(LABEL("reinspect"),r,
					    reinspect_active)],
			  sensitive = true}])
		;()))
	end

 fun calcAbsoluteMousePointerPosition(x,y,hadj,vadj) = 
     let
	 val valueh = Gtk.adjustmentGetFieldValue(hadj)
	 val valuev = Gtk.adjustmentGetFieldValue(vadj) 
	 val x = Real.+ (x,valueh)
	 val y = Real.+ (y,valuev)
     in
	 (x,y)
     end

in


functor MkWindow () :> MK_WINDOW =
struct

    val serve =  serve'

    type tag = Gtk.object

    val window = window'
  
    val alive = alive'

    val handlers = Array.array(5,(fn n=> ()))

    fun selectHandler "reinspect" = Array.sub(handlers,0)
      | selectHandler "width"     = Array.sub(handlers,1)
      | selectHandler "depth"     = Array.sub(handlers,2)
      | selectHandler "shrink"    = Array.sub(handlers,3)
      | selectHandler "expand"    = Array.sub(handlers,4)

    fun register (str,handler) = 
	let
	    val i = case str of "reinspect" => 0
	  | "width" =>  1 
	  | "depth" =>  2
	  | "shrink" => 3
	  | "expand" => 4
	in
	    Array.update(handlers,i,handler)
	end
          
     val status = Gtk.statusbarNew()
     val st_context = Gtk.statusbarGetContextId(status,"st")
     val id = Gtk.statusbarPush(status,st_context,"Inspector Window started successfully")
	 
     structure DA  =  MkDrawingArea(val xsize = !Settings.max_x 
				    val ysize = !Settings.max_y) 	

     val (scrolled,hadj,vadj) =  createScrollWindowDefaults(20.0,50.0)
     val canvas = DA.canvas
     val lowest_layer  = GtkCanvas.itemNew(DA.root, 
					   GtkCanvas.GROUP,
					   [("x", Gtk.DOUBLE 0.0), 
					    ("y", Gtk.DOUBLE 0.0)])
     val canvasroot = lowest_layer
     val resize = handleResize(scrolled,hadj,vadj,DA.resize)
     fun show() = if !alive then Gtk.widgetShowAll(window) else ()
    
     fun handleReinspect node = 
	 fn _ => (selectHandler("reinspect")) node

     fun handleReinspectSelection _ =
	 (selectHandler("reinspect")) (getSelectionNode())

	 (* Menu-Bar *)
     val bar = WindowHelper.createMenu
	 (BarObj[MenuObj
		 {title = "Inspector",
		  items = [EntryObj
			   (LABEL "About...",
			    [Handler("activate",
				    about)],true),
			   EntryObj(SEP,[],true),
			   EntryObj(LABEL "Close",
				    [Handler("activate",
					     Delete)],true)],
		  sensitive = true},
		 MenuObj
		 {title = "Selection",
		  items = [EntryObj(LABEL "Expand",
				    [],true),
			   EntryObj(LABEL "Shrink",
				   []
				    ,true),
			   EntryObj(SEP, [],true),
			   EntryObj(LABEL "Reinspect",
				    [Handler("activate",handleReinspectSelection)]
				    ,true)],
		  sensitive = true}   ,
		 MenuObj
		 {title = "Options",
		  items = [EntryObj(LABEL "Preferences...",
				    [Handler("activate",
					     Preferences)],true)],
		  sensitive = true}])  
	 
	    
     fun handleEvent [Gdk.EVENT(event)] = serve (fn () =>
     let
	 val font_width = Services.fontWidth()
	 val font_height = Services.fontHeight()  
     in
	case event of
	  Gdk.GDK_BUTTON_PRESS({button = 1, ...} as r) => 
		    let 
			val (x,y) = calcAbsoluteMousePointerPosition(#x(r),#y(r),hadj,vadj)
			val node = 
			    NodeSearch.search(Dictionaries.dict,x,y)      
		    in 
		       (case node of 
			    SOME(n) => 
				let
				    val group = Helper.getGroup(n)
				    val x2 = Real.fromInt(font_width 
					    	* Layout.get_xdim(n))
				    val y2 = Real.fromInt(font_height 
						  *Layout.get_ydim(n))
				    val re =createRectangle(group,
							    0.0,
							    0.0,
							    x2,
							    y2)
				in
				    (GtkCanvas.itemLowerToBottom(re)
				    ;destroySelectionMarkings()
				    ;selection := SOME (n,re)
				    ;setSelectionMenuSensitive(bar,true))
				end
			  | NONE => ( setSelectionMenuSensitive(bar,false)
				     ; destroySelectionMarkings()
					 ; selection := NONE))
		    end
	| Gdk.GDK_BUTTON_PRESS({button = 3, ...} as r) =>
		    let
			val (x,y) = calcAbsoluteMousePointerPosition(#x(r),#y(r),hadj,vadj)
			val node = 
			    NodeSearch.search(Dictionaries.dict,x,y)
		    in
		    (case node of 
		     SOME(n) 
		     =>( makePopup({node = n,
				    widthhandler = [], 
				    depthhandler = [], 
				    reinspecthandler = [Handler("activate",
							 handleReinspect(n))]})
				   ; ())
		   | NONE => ())
		    end 
        | _ => ()
     end)

     fun handleWindowEvent [Gdk.EVENT(event)] = 
	 serve (fn () => 
		case event of  
		    Gdk.GDK_KEY_PRESS({keyval = 65361,...}) => scrollX(~10.0,scrolled,hadj) 
		  | Gdk.GDK_KEY_PRESS({keyval = 65363,...}) => scrollX(10.0,scrolled,hadj) 
		  | Gdk.GDK_KEY_PRESS({keyval = 65362,...}) => scrollY(~10.0,scrolled,vadj)    
		  | Gdk.GDK_KEY_PRESS({keyval = 65364,...}) => scrollY(10.0,scrolled,vadj)
		  | _ => () )

     val _ = (Gtk.windowSetTitle (window, "Alice Browser V 0.2")
	      ; Gtk.widgetSetUsize (window, 200, 100) 
	      ; Gtk.windowSetDefaultSize(window, 500,400)
	      ;Gtk.signalConnect (window, "delete-event", Delete)
	      ;setSelectionMenuSensitive (bar,false)  
	      ;Gtk.signalConnect(scrolled,"size_allocate",
				 handleResize(scrolled,hadj,vadj,DA.resize))
	      ;Gtk.containerAdd(scrolled,DA.canvas)
	      ;Gtk.containerAdd(window,createVBox[(bar,0,0,0),
						  (scrolled,Gtk.EXPAND,Gtk.FILL,0),
						  (status,0,0,0)])
	      ;Gtk.signalConnect(DA.canvas,"event",handleEvent)
	      ;Gtk.signalConnect(window,"event",handleWindowEvent))
	
end

end (* MkWindow End *)


