
import structure GtkTypes from "GtkTypes"
import structure GtkCore from "GtkCore"
import structure GnomeCanvasEnums from "GnomeCanvasEnums"
import structure GnomeCanvasUnsafe from "GnomeCanvasUnsafe"
import signature GNOME_CANVAS from "GNOME_CANVAS-sig"

structure GnomeCanvas :> GNOME_CANVAS =
struct
    open GtkTypes
    val _ = GtkCore.init()
    open GnomeCanvasEnums 
    open GnomeCanvasUnsafe

    fun itemCreate (root, ty, arglist) =
    let
	fun flatten nil = nil
	  | flatten ((a,b)::args) = [GtkTypes.STRING a, b]@(flatten args)
	val item = itemNew(root, ty)
	val _ = case arglist of
	            nil => ()
		  | (fst,fstarg)::args => 
			itemSetValist(item, fst, (fstarg::flatten(args)))
    in
	item
    end

    fun makePoints plist =
    let
	val plist' = if (length plist) mod 2 = 0 then plist else plist@[0]
	val points = pointsNew((length plist') div 2)
	val _ = foldl (fn (x,i) => 
		         ( pointsSetCoords(points,i,x) ; i+1 ) )
		      0 plist'
    in
	points
    end

end
