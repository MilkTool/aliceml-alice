(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus, 2000
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Gdk       from "../Gdk"
import structure Gtk       from "../Gtk"
import structure GnomeCanvas from "../GnomeCanvas"

local
    fun Delete _ = OS.Process.exit OS.Process.success
    val Window   = Gtk.windowNew Gtk.WINDOW_TOPLEVEL
    val _        = Gtk.signalConnect (Window, "delete-event", Delete)
    val _        = Gtk.windowSetTitle(Window,"GnomeCanvas")

    val map      = Gdk.colormapGetSystem ()
    val black    = Gdk.colorNew (0,0,0)
    val white    = Gdk.colorNew (65535,65535,65535)
    val _        = Gdk.colormapAllocColor (map, black, false, true)
    val _        = Gdk.colormapAllocColor (map, white, false, true)
    val MyCanvas = GnomeCanvas.new()
    val root     = GnomeCanvas.root MyCanvas

    val rargs = 
	[("x1", Gtk.REAL 10.0),
	 ("y1", Gtk.REAL 20.0),
	 ("x2", Gtk.REAL 380.0),
         ("y2", Gtk.REAL 380.0),
	 ("fill_color_gdk", Gtk.OBJECT white),
	 ("outline_color_gdk", Gtk.OBJECT black)]
    val ritem = GnomeCanvas.itemCreate (root, GnomeCanvas.rectGetType(), rargs)
(*
    val cargs =
       [("fill_color", Gtk.STRING "blue"),
	("x1", Gtk.REAL 10.0),
	("y1", Gtk.REAL 10.0),
	("x2", Gtk.REAL 90.0),
	("y2", Gtk.REAL 90.0)]
    val citem = GnomeCanvas.itemCreate(root,GnomeCanvas.ellipseGetType(),cargs)
*)

    fun show s = print (s^"\n")
    fun showDelta event = 
	print ("(x: "^(Real.toString (Gdk.eventMotionGetFieldX event))^
	      ", y: "^(Real.toString (Gdk.eventMotionGetFieldY event))^") ")

    fun canvasEvent (_, [Gtk.EVENT (Gtk.UNSUPPORTED event)]) =
	(case Gdk.eventAnyGetFieldType event of
	     Gdk.EXPOSE            => show "Got Expose Event"
	   | Gdk.MOTION_NOTIFY     => (showDelta event;show "Got Motion Event")
	   | Gdk.BUTTON_PRESS      => show "Got ButtonPress Event"
	   | Gdk.GDK_2BUTTON_PRESS => show "Got Button2Press Event"
	   | Gdk.GDK_3BUTTON_PRESS => show "Got Button3Press Event"
	   | Gdk.BUTTON_RELEASE    => show "Got ButtonRelease Event"
	   | Gdk.KEY_PRESS         => show "Got KeyPress Event"
	   | Gdk.KEY_RELEASE       => show "Got KeyRelease Event"
	   | Gdk.ENTER_NOTIFY      => show "Got Enter Event"
	   | Gdk.LEAVE_NOTIFY      => show "Got Leave Event"
	   | Gdk.FOCUS_CHANGE      => show "Got Focus Event"
	   | Gdk.CONFIGURE         => show "Got Configure Event"
	   | Gdk.NO_EXPOSE         => show "Got NoExpose Event"
	   | Gdk.NOTHING           => show "Got Nothing Event"
	   | Gdk.DELETE            => show "Got Delete Event"
	   | Gdk.DESTROY           => show "Got Destroy Event"
	   | Gdk.MAP               => show "Got Map Event"
	   | Gdk.UNMAP             => show "Got Unmap Event"
	   | Gdk.PROPERTY_NOTIFY   => show "Got Property Event"
	   | Gdk.SELECTION_CLEAR   => show "Got SelecitonClear Event"
	   | Gdk.SELECTION_REQUEST => show "Got SelectionRequest Event"
	   | Gdk.SELECTION_NOTIFY  => show "Got SelectionNotify Event"
	   | Gdk.PROXIMITY_IN      => show "Got ProximityIn Event"
	   | Gdk.PROXIMITY_OUT     => show "Got ProximityOut Event"
	   | Gdk.DRAG_ENTER        => show "Got DragEnter Event"
	   | Gdk.DRAG_LEAVE        => show "Got DragLeave Event"
	   | Gdk.DRAG_MOTION       => show "Got DrawMotion Event"
	   | Gdk.DRAG_STATUS       => show "Got DragStatus Event"
	   | Gdk.DROP_START        => show "Got DropStart Event"
	   | Gdk.DROP_FINISHED     => show "Got DropFinished Event"
	   | Gdk.CLIENT_EVENT      => show "Got Client Event"
	   | _                     => show "Got Strange Event")
	     
    val pargs =
	 [("points", 
	     Gtk.OBJECT (GnomeCanvas.makePoints [20, 20, 380, 200, 20, 380])),
	  ("fill_color_gdk", Gtk.OBJECT black),
	  ("width_pixels", Gtk.INT 2)]
    val pitem = GnomeCanvas.itemCreate (root, GnomeCanvas.lineGetType(), pargs)

    val targs =
	[("text", Gtk.STRING "Dies ist ein Test"),
	 ("x", Gtk.REAL 100.0),
	 ("y", Gtk.REAL 100.0),
	 ("font", 
     Gtk.STRING "-adobe-helvetica-medium-r-normal--12-*-72-72-p-*-iso8859-1"),
	 ("fill_color_gdk", Gtk.OBJECT black)]
    val titem = GnomeCanvas.itemCreate (root, GnomeCanvas.textGetType(), targs)

    val _ = Gtk.signalConnect (pitem, "event", canvasEvent)

			       
in
    val _ = (Gtk.containerSetBorderWidth (Window, 10);
	     Gtk.widgetSetSizeRequest(MyCanvas, 400, 400);
	     GnomeCanvas.setScrollRegion(MyCanvas, 0.0, 0.0, 400.0, 400.0);
	     Gtk.containerAdd (Window, MyCanvas);
	     Gtk.widgetShowAll Window)
end
