import structure Gdk from "../Gdk"
import structure Gtk from "../Gtk"
import structure GnomeCanvas from "../GnomeCanvas"
import structure Image from "Image"

local
  open Gtk
in
  (*val _ = widgetShow (colorSelectionDialogNew "Farbe auswaehlen...")*)

  val window = windowNew WINDOW_TOPLEVEL
  val _ = windowSetTitle(window, "Hallo Welt!")
  val _ = containerSetBorderWidth(window,10)

  val gdkpic = Gdk.pixbufNewFromXpmData Image.pixmap
  val image = imageNewFromPixbuf gdkpic
  val ibox = eventBoxNew()
  val _ = containerAdd(ibox, image)

  val button = buttonNewWithLabel "Test"

  val textbuf = textBufferNew NULL
  val textview = textViewNewWithBuffer textbuf

  val combo = comboNew()
  val _ = comboSetPopdownStrings(combo, ["Auswahl 1", "Auswahl 2"])
  val canvas = GnomeCanvas.new()
  val _ = widgetSetSizeRequest(canvas, 100, 100)
  val root = GnomeCanvas.root canvas
  val rect = GnomeCanvas.itemNew(root, GnomeCanvas.rectGetType(),
		  	         "fill_color", [STRING "white", OBJECT NULL])
  val _ = GnomeCanvas.itemSetValist(rect, 
				    "x1", [REAL 5.0,
				    STRING "y1", REAL 5.0,
				    STRING "x2", REAL 95.0,
				    STRING "y2", REAL 95.0,
				    STRING "outline_color", STRING "black",
				    OBJECT NULL])

  val circle = GnomeCanvas.itemNew(root, GnomeCanvas.ellipseGetType(),
		  	         "fill_color", [STRING "blue", OBJECT NULL])
  val _ = GnomeCanvas.itemSetValist(circle, 
				    "x1", [REAL 10.0,
				    STRING "y1", REAL 10.0,
				    STRING "x2", REAL 90.0,
				    STRING "y2", REAL 90.0,
				    STRING "outline_color", STRING "black",
				    OBJECT NULL])

  val text = GnomeCanvas.itemNew(root, GnomeCanvas.textGetType(),
		  	         "fill_color", [STRING "white", OBJECT NULL])
  val _ = GnomeCanvas.itemSetValist(text, 
				    "text", [STRING "Canvas",
                                    STRING "x", REAL 50.0,
				    STRING "y", REAL 50.0,
				    OBJECT NULL])
   

  val box = vboxNew(false,0)

  val _ = ( boxPackStart(box,button,   false,false,0) ;
	    boxPackStart(box,textview, false,false,0) ;
	    boxPackStart(box,combo,    false,false,0) ;
	    boxPackStart(box,ibox,     false,false,0) ;
	    boxPackStart(box,canvas,   false,false,0) ;
	    containerAdd (window,box) ;
 	    widgetShowAll window )
      
  fun callback (widget, arglist) = 
  let
      val table = [(window,"Window"),(image,"Image"),(ibox,"ImageBox"),
		   (button,"Button"),(textbuf,"TextBuffer"),
		   (textview,"TextView"),(combo,"Combo")]
      fun getobj ob = foldl (fn ((x,n),e) => if x=ob then n else e) "???" table
      fun show (BOOL b)    = "BOOL: "^(Bool.toString b)
	| show (INT i)     = "INT: "^(Int.toString i)
	| show (REAL r)    = "REAL: "^(Real.toString r)
	| show (STRING s)  = "STRING: "^s
	| show (OBJECT ob) = "OBJECT: "^(getobj ob)
	| show (LIST l)    = "LIST"
  in
      ( print (">callback function called for widget: "^(getobj widget)^"<\n");
        print ("Number of arguments: "^(Int.toString (length arglist))^"\n");
        List.app (fn a => print ((show a)^"\n")) arglist;
        print "---\n"
      )
  end

  fun delete_event _ = (print "window closed\n" ;
			OS.Process.exit OS.Process.success )


  val sig1 = signalConnectAfter(button,"clicked",callback)
  val sig2 = signalConnect(textbuf,"insert_text",callback)
  val sig3 = signalConnect(ibox,"button_press_event",callback)
  val sig4 = signalConnect(window,"delete_event",delete_event)
end
