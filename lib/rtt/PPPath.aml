(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Name        from "Name"
import structure Label       from "Label"
import structure Path        from "Path"

import structure PrettyPrint from "../utility/PrettyPrint"
import structure PPMisc      from "PPMisc"
import signature PP_PATH     from "PP_PATH-sig"


structure PPPath :> PP_PATH =
struct
    (* Import *)

    open Path
    open PrettyPrint
    open PPMisc

    infixr ^^

    fun ppLab l =
	let
	    val s = Label.toString l
	in
	    if String.isPrefix Path.hiddenPrefix s
	    then text(String.extract(s, String.size Path.hiddenPrefix, NONE))
	    else text s
	end

    fun ppPath' ps p =
	if List.exists (fn p' => Path.equal(p,p')) ps then
	    empty
	else if isDot p then
	    let
		val (p',l) = asDot p
		val  doc1  = ppPath' ps p'
		val  doc2  = ppLab l
	    in
		if isEmpty doc1
		then doc2
		else doc1 ^^ text "." ^^ doc2
	    end
	else
	    ppLab(toLab p) handle Domain => text "_"	(* may be InId *)

    fun ppPath p =
	let
	    val doc = ppPath' [] p
	in
	    if isEmpty doc
	    then text "_"
	    else doc
	end

(*DEBUG
    val ppPath  = fn p => ppPath  p ^^ text("$"^ Int.toString(Path.hash p))
    val ppPath' = fn ps => fn p => ppPath' ps p ^^ text("$"^ Int.toString(Path.hash p))
*)
end
