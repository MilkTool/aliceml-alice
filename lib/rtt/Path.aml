(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

(*******************************************************************************

Paths are primarily globally unique stamps that identify objects like abstract
type constructors etc. They carry some additional location information for
purposes like pretty printing. See Inf for a description of their use.

On Equality:

Since paths must be unique across process boundaries (we pickle them), equality
is defined in terms of an additional global stamp. Two paths with equal stamp
should always contain the same location.

On Hiding:

We allow for hidden paths, i.e. such denoting unaccessible (shadowed) entities.
They are marked by a magic prefix in the corresponding label/name in order to
allow a pretty printer to perform some special action.

*******************************************************************************)

import structure GlobalStamp from "../utility/GlobalStamp"
import structure Name        from "Name"
import structure Label       from "Label"
import signature PATH        from "PATH-sig"


structure Path :> PATH =
struct

  (* Types *)

    type name	= Name.t
    type lab	= Label.t
    type stamp	= GlobalStamp.t

    datatype path' = NAME of name | HIDDEN of name | DOT of path * lab
    withtype path  = stamp * path' ref
    type t = path


  (* Creation *)

    fun pervasive s	= (GlobalStamp.fromString s, ref(NAME(Name.ExId s)))
    fun new p'		= (GlobalStamp.new(), ref p')

    fun invent()	= new(NAME(Name.InId))
    fun name n		= new(NAME n)
    fun hidden n	= new(HIDDEN n)
    fun dot pl		= new(DOT pl)
    fun fromLab l	= new(NAME(Label.toName l))
    fun fromString s	= new(NAME(Name.ExId s))

    fun instance (_, ref p') = new p'


  (* Inspection *)

    datatype desc =
	  Name   of name
	| Hidden of name
	| Dot    of path * lab

    exception Path

    fun inspect (_, ref(NAME n))	= Name n
      | inspect (_, ref(HIDDEN n))	= Hidden n
      | inspect (_, ref(DOT pl))	= Dot pl

    fun isName (_, ref(NAME _))		= true
      | isName  _			= false
    fun isHidden (_, ref(HIDDEN _))	= true
      | isHidden  _			= false
    fun isDot  (_, ref(DOT _))		= true
      | isDot   _			= false

    fun asName (_, ref(NAME n))		= n
      | asName  _			= raise Path
    fun asHidden (_, ref(HIDDEN n))	= n
      | asHidden  _			= raise Path
    fun asDot  (_, ref(DOT pl))		= pl
      | asDot   _			= raise Path

    fun toLab (_, ref(DOT(_,l)))	= l
      | toLab (_, ref(HIDDEN _))	= raise Path
      | toLab (_, ref(NAME n))		= Label.fromName n
					  handle Domain => raise Path

  (* Comparison and hashing *)

    fun equal((stamp1,_), (stamp2,_))	= stamp1 = stamp2
    fun hash (stamp, _)			= GlobalStamp.hash stamp


  (* Hiding *)

    fun hide (_, r as ref p')		= r := hide' p'
    and hide'(NAME name)		= HIDDEN name
      | hide'(p' as HIDDEN _)		= p'
      | hide'(DOT(_,l))			= HIDDEN(Label.toName l)
end
