(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Name  from "Name"
import structure Label from "Label"

signature PATH =
sig
  (* Types *)

    type name	= Name.t
    type lab	= Label.t
    type path
    type t	= path

  (* Creation *)

    val invent :	unit -> path
    val pervasive :	string -> path
    val name :		name -> path
    val dot :		path * lab -> path

  (* Inspection, projection and conversion *)

    exception Path

    val isName :	path -> bool
    val isDot :		path -> bool
    val asName :	path -> name				(* Path *)
    val asDot :		path -> path * lab			(* Path *)

    val fromString :	string -> path
    val fromLab :	lab  -> path
    val toLab :		path -> lab

  (* Comparison and hashing *)

    val equals :	path * path -> bool
    val hash :		path -> int

  (* Transformation *)

    val hiddenPrefix :	string
    val hide :		path -> unit				(* Path *)
end
