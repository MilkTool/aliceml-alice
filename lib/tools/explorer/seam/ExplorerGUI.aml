(*
 * This is a generated file, created by alice-glade.
 * Modifications may get lost.
 *)


import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"

import structure Key from "x-alice:/lib/gtk/Key"

structure ExplorerGUI =
  struct
    structure Helpers = struct
      val accelGroup = Gtk.accelGroupNew()
      val tooltips = Gtk.tooltipsNew()
      fun containerAddList(cont, children) = 
        List.app (fn c => Gtk.containerAdd(cont,c)) children
    end

    val aliceexplorer = Gtk.windowNew(Gtk.WINDOW_TOPLEVEL)
    val _ = Gtk.windowSetTitle(aliceexplorer,"Alice/Gecode Explorer")
    val _ = Gtk.windowAddAccelGroup(aliceexplorer,Helpers.accelGroup)
    val vbox1 = Gtk.vboxNew(false,0)
    val menubar = Gtk.menuBarNew()
    val menuitem1 = Gtk.menuItemNewWithMnemonic("_File")
    val menuitem1_menu = Gtk.menuNew()
    val save = Gtk.imageMenuItemNewFromStock("gtk-save",Helpers.accelGroup)
    val cancel_search = Gtk.imageMenuItemNewWithMnemonic("_Cancel")
    val _ = Gtk.widgetAddAccelerator(cancel_search,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_C,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image24 = Gtk.imageNewFromStock("gtk-cancel",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(cancel_search,image24)
    val reset = Gtk.imageMenuItemNewWithMnemonic("_Reset")
    val _ = Gtk.widgetAddAccelerator(reset,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_R,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image25 = Gtk.imageNewFromStock("gtk-clear",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(reset,image25)
    val separatormenuitem1 = Gtk.menuItemNew()
    val quit = Gtk.imageMenuItemNewFromStock("gtk-quit",Helpers.accelGroup)
    val _ = Helpers.containerAddList(menuitem1_menu,[save,cancel_search,reset,separatormenuitem1,quit])
    val _ = Gtk.menuItemSetSubmenu(menuitem1,menuitem1_menu)
    val nodemenu = Gtk.menuItemNewWithMnemonic("_Node")
    val nodemenu_menu = Gtk.menuNew()
    val hidenodes = Gtk.menuItemNewWithMnemonic("(Un)_Hide")
    val _ = Gtk.widgetAddAccelerator(hidenodes,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_h,0,Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val unhide_all = Gtk.menuItemNewWithMnemonic("Unhide _subtree")
    val _ = Gtk.widgetAddAccelerator(unhide_all,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_h,(Gdk.GdkModifierTypeToInt Gdk.SHIFT_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val hide_failed = Gtk.menuItemNewWithMnemonic("Hide _failed subtrees")
    val _ = Gtk.widgetAddAccelerator(hide_failed,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_f,0,Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val separator2 = Gtk.menuItemNew()
    val go_to_child = Gtk.imageMenuItemNewWithMnemonic("Go to _child")
    val _ = Gtk.widgetAddAccelerator(go_to_child,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Down,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image26 = Gtk.imageNewFromStock("gtk-go-down",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(go_to_child,image26)
    val go_to_parent = Gtk.imageMenuItemNewWithMnemonic("Go to _parent")
    val _ = Gtk.widgetAddAccelerator(go_to_parent,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Up,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image27 = Gtk.imageNewFromStock("gtk-go-up",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(go_to_parent,image27)
    val go_to_left_sibling = Gtk.imageMenuItemNewWithMnemonic("Go to _left sibling")
    val _ = Gtk.widgetAddAccelerator(go_to_left_sibling,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Left,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image28 = Gtk.imageNewFromStock("gtk-go-back",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(go_to_left_sibling,image28)
    val go_to_right_sibling = Gtk.imageMenuItemNewWithMnemonic("Go to _right sibling")
    val _ = Gtk.widgetAddAccelerator(go_to_right_sibling,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Right,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image29 = Gtk.imageNewFromStock("gtk-go-forward",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(go_to_right_sibling,image29)
    val _ = Helpers.containerAddList(nodemenu_menu,[hidenodes,unhide_all,hide_failed,separator2,go_to_child,go_to_parent,go_to_left_sibling,go_to_right_sibling])
    val _ = Gtk.menuItemSetSubmenu(nodemenu,nodemenu_menu)
    val search = Gtk.menuItemNewWithMnemonic("_Search")
    val search_menu = Gtk.menuNew()
    val next_solution = Gtk.menuItemNewWithMnemonic("Ne_xt solution")
    val _ = Gtk.widgetAddAccelerator(next_solution,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_n,0,Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val next_n_solutions = Gtk.menuItemNewWithMnemonic("Next _n solutions")
    val _ = Gtk.widgetAddAccelerator(next_n_solutions,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_n,(Gdk.GdkModifierTypeToInt Gdk.SHIFT_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val all_solutions = Gtk.menuItemNewWithMnemonic("_All solutions")
    val _ = Gtk.widgetAddAccelerator(all_solutions,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_a,0,Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val one_step = Gtk.menuItemNewWithMnemonic("One _step")
    val _ = Gtk.widgetAddAccelerator(one_step,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_s,0,Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val _ = Helpers.containerAddList(search_menu,[next_solution,next_n_solutions,all_solutions,one_step])
    val _ = Gtk.menuItemSetSubmenu(search,search_menu)
    val options1 = Gtk.menuItemNewWithMnemonic("_Options")
    val options1_menu = Gtk.menuNew()
    val inspection1 = Gtk.menuItemNewWithMnemonic("_Inspection")
    val view1 = Gtk.menuItemNewWithMnemonic("_View...")
    val search1 = Gtk.menuItemNewWithMnemonic("_Search...")
    val _ = Helpers.containerAddList(options1_menu,[inspection1,view1,search1])
    val _ = Gtk.menuItemSetSubmenu(options1,options1_menu)
    val menuitem4 = Gtk.menuItemNewWithMnemonic("_Help")
    val menuitem4_menu = Gtk.menuNew()
    val about = Gtk.imageMenuItemNewWithMnemonic("_About...")
    val image30 = Gtk.imageNewFromStock("gtk-dialog-info",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(about,image30)
    val _ = Gtk.containerAdd(menuitem4_menu,about)
    val _ = Gtk.menuItemSetSubmenu(menuitem4,menuitem4_menu)
    val _ = Helpers.containerAddList(menubar,[menuitem1,nodemenu,search,options1,menuitem4])
    val hbox1 = Gtk.hboxNew(false,0)
    val scrolledwindow_xa = Gtk.adjustmentNew(0.0,0.0,400.0,1.0,400.0,400.0)
    val scrolledwindow_ya = Gtk.adjustmentNew(0.0,0.0,250.0,1.0,250.0,250.0)
    val scrolledwindow = Gtk.scrolledWindowNew(scrolledwindow_xa,scrolledwindow_ya)
    val _ = Gtk.scrolledWindowSetPlacement(scrolledwindow,Gtk.CORNER_TOP_LEFT)
    val _ = Gtk.scrolledWindowSetShadowType(scrolledwindow,Gtk.SHADOW_NONE)
    val _ = Gtk.scrolledWindowSetPolicy(scrolledwindow,Gtk.POLICY_ALWAYS,Gtk.POLICY_ALWAYS)
    val _ = Gtk.widgetSetSizeRequest(scrolledwindow,400,250)
    val vbox2 = Gtk.vboxNew(false,0)
    val zoomToFit = Gtk.buttonNew()
    val _ = Gtk.widgetSetSizeRequest(zoomToFit,24,24)
    val _ = Gtk.buttonSetRelief(zoomToFit,Gtk.RELIEF_NONE)
    val _ = Gtk.tooltipsSetTip(Helpers.tooltips,zoomToFit,"Zoom to fit window","")
    val image1 = Gtk.imageNewFromStock("gtk-zoom-fit",Gtk.IntToGtkIconSize(4))
    val _ = Gtk.containerAdd(zoomToFit,image1)
    val scale_adj = Gtk.adjustmentNew(1.0,0.1,3.0,0.1,0.0,0.0)
    val scale = Gtk.vscaleNew(scale_adj)
    val _ = Gtk.scaleSetDrawValue(scale,false)
    val _ = Gtk.scaleSetValuePos(scale,Gtk.POS_TOP)
    val _ = Gtk.scaleSetDigits(scale,1)
    val _ = Gtk.rangeSetUpdatePolicy(scale,Gtk.UPDATE_CONTINUOUS)
    val _ = Gtk.rangeSetInverted(scale,false)
    val _ = Gtk.boxPackStart(vbox2,zoomToFit,false,false,0)
    val _ = Gtk.boxPackStart(vbox2,scale,true,true,0)
    val _ = Gtk.boxPackStart(hbox1,scrolledwindow,true,true,0)
    val _ = Gtk.boxPackStart(hbox1,vbox2,false,true,0)
    val toolbar1 = Gtk.toolbarNew()
    val label6 = Gtk.labelNew("Choices:")
    val noOfChoices = Gtk.labelNew("00000")
    val label7 = Gtk.labelNew("   Failures:")
    val noOfFailed = Gtk.labelNew("00000")
    val label8 = Gtk.labelNew("   Solutions:")
    val noOfSolved = Gtk.labelNew("00000")
    val _ = Helpers.containerAddList(toolbar1,[label6,noOfChoices,label7,noOfFailed,label8,noOfSolved])
    val statusbar = Gtk.statusbarNew()
    val _ = Gtk.boxPackStart(vbox1,menubar,false,false,0)
    val _ = Gtk.boxPackStart(vbox1,hbox1,true,true,0)
    val _ = Gtk.boxPackStart(vbox1,toolbar1,false,false,0)
    val _ = Gtk.boxPackStart(vbox1,statusbar,false,false,0)
    val _ = Gtk.containerAdd(aliceexplorer,vbox1)
  end

(* Created by alice-glade *)
