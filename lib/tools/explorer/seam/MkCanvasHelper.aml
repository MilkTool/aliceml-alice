(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature SPACE        from "x-alice:/lib/gecode/SPACE-sig"

import structure Gtk          from "x-alice:/lib/gtk/Gtk"
import structure Canvas  from "x-alice:/lib/gtk/Canvas"

import functor MkGtkNode      from "MkGtkNode"
import functor MkTypes        from "MkTypes"
import structure Defaults     from "Defaults"
import functor MkEventHandler from "MkEventHandler"

functor MkCanvasHelper(Space : SPACE) =
  struct
  local
  structure Types = MkTypes(Space)
  structure GtkNode = MkGtkNode(Space)
  structure EventHandler = MkEventHandler(Space)
  in

  fun createCanvas (state, serve, xDim, yDim) =
      let
	  val canvas = Canvas.newAa()
	  val rootGroup = GtkNode.makeGroup (Canvas.root canvas)
	  val shadowGroup = GtkNode.makeGroup rootGroup
	  val actionGroup = GtkNode.makeGroup rootGroup
          val actionHandler =
              Gtk.signalConnect(actionGroup, "event",
			        EventHandler.nodeEvent (state, serve));
      in
	   Gtk.widgetSetSizeRequest(canvas, xDim, yDim);
	   Canvas.setScrollRegion(canvas, 0.0, 0.0,
				       Real.fromInt xDim, Real.fromInt yDim);
	   Canvas.setPixelsPerUnit(canvas, 1.0);
	   Canvas.setBackgroundColor(canvas, GtkNode.white);
	   (canvas, ref rootGroup,ref shadowGroup, ref actionGroup,
            ref actionHandler)
      end

  fun resetCanvas serve (s as
			   (ref (SOME {gtk={rootGroup=rootGroup,
				            actionGroup=actionGroup,
                                            actionHandler=actionHandler,
				            canvas=canvas,...},...}
				 : Types.explorer_state option)))=
      (Gtk.signalDisconnect(!actionGroup, !actionHandler);
       Gtk.objectDestroy (!rootGroup);
       rootGroup := GtkNode.makeGroup (Canvas.root canvas);
       actionGroup := GtkNode.makeGroup (!rootGroup);
       actionHandler := Gtk.signalConnect(!actionGroup, "event",
                                          EventHandler.nodeEvent (s, serve));
       ())
    | resetCanvas _ _ = ()

  fun scaleCanvasHandler (serve,
			  ref (SOME({gtk={canvas,scale,...},
                                     ...}
				    : Types.explorer_state)),
			  scaleWidget) _ =
      (serve (fn () =>
		 let
		     val x = Gtk.rangeGetValue scaleWidget
		 in
		     Canvas.setPixelsPerUnit(canvas, x);
		     scale := x / Defaults.floatScaleBase
		 end))
    | scaleCanvasHandler _ _ = ()
  end
  end
