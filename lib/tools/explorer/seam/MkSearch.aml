(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature SPACE      from "x-alice:/lib/gecode/SPACE-sig"
import functor MkTreeNode     from "MkTreeNode"
import functor MkTypes        from "MkTypes"
import functor MkExplorerNode from "MkExplorerNode"

functor MkSearch(Space : SPACE) =
struct
    local
    structure TreeNode = MkTreeNode(Space)
    structure ExplorerNode = MkExplorerNode(Space)
    structure Types = MkTypes(Space)
    open TreeNode
    in

    fun explore (node, state, callBack) =
        let
            fun dfe node =
                case ExplorerNode.noOfChildren (state, node) of
                    0 => (case ExplorerNode.nodeStatus (state, node) of
                              Types.SOLVED => callBack()
                            | _ => ())
                  | n => doDfe 0 n node
            and doDfe m n _ where (m=n) = ()
              | doDfe m n node =
                let
                    val child = (ExplorerNode.getChild node m)
                in
                    if ExplorerNode.isUnknown child orelse
                       ExplorerNode.hasOpenChildren child then
                        (dfe child; doDfe (m+1) n node)
                    else doDfe (m+1) n node
                end
        in
            dfe node
        end

    fun step (node,state) = ignore (ExplorerNode.noOfChildren (state,node))

    end
end
