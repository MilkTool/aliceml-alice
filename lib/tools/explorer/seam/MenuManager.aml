(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Gtk            from "x-alice:/lib/gtk/Gtk"
import structure ExplorerNode   from "ExplorerNode"
import structure TreeNode       from "TreeNode"
import structure Types          from "Types"
import structure ExplorerGUI    from "ExplorerGUI"

structure MenuManager =
  struct

  fun switchItems(onitems, offitems, activate) =
      (app (fn i => Gtk.widgetSetSensitive(i, activate)) onitems;
       app (fn i => Gtk.widgetSetSensitive(i, not activate)) offitems)

  fun updateMenus n =
      (switchItems([ExplorerGUI.next_solution,
		    ExplorerGUI.next_n_solutions,
		    ExplorerGUI.all_solutions], nil,
		   not (ExplorerNode.isHidden n) andalso
		   (ExplorerNode.hasOpenChildren n orelse
		    ExplorerNode.isUnknown n));
       switchItems([ExplorerGUI.one_step],
		   [ExplorerGUI.hidenodes,
		    ExplorerGUI.unhide_all,
		    ExplorerGUI.hide_failed],
		   ExplorerNode.isUnknown n);
       switchItems([ExplorerGUI.go_to_child],nil,
		   TreeNode.noOfChildren n > 0);
       switchItems([ExplorerGUI.go_to_child],nil,
		   TreeNode.noOfChildren n > 0);
       switchItems([ExplorerGUI.go_to_parent],nil,
		   isSome(ExplorerNode.getParent n));
       switchItems([ExplorerGUI.go_to_right_sibling],nil,
		   case ExplorerNode.getParent n of
		       NONE => false
		     | SOME p => TreeNode.noOfChildren p>
			   ExplorerNode.getAlternative n+1);
       switchItems([ExplorerGUI.go_to_left_sibling],nil,
		   case ExplorerNode.getParent n of
		       NONE => false
		     | SOME _ => ExplorerNode.getAlternative n>0)
       )

  fun startSearch() =
      (Gtk.widgetSetSensitive(ExplorerGUI.cancel_search, true);
       Gtk.widgetSetSensitive(ExplorerGUI.save, false))

  fun finishSearch() =
      (Gtk.widgetSetSensitive(ExplorerGUI.cancel_search, false);
       Gtk.widgetSetSensitive(ExplorerGUI.save, true))

  fun refreshStatusbar state =
      let
          val (choices, failed, solved) = Types.getSearchState state
      in
          Gtk.labelSetText(ExplorerGUI.noOfChoices,
                           Int.toString choices);
          Gtk.labelSetText(ExplorerGUI.noOfFailed,
                           Int.toString failed);
          Gtk.labelSetText(ExplorerGUI.noOfSolved,
                           Int.toString solved)
      end
  end
