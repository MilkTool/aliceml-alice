import structure Gtk      from "x-alice:/lib/gtk/Gtk"
import structure Prefs    from "../Prefs"
import structure Common   from "../Common"
import signature HANDLERS from "../HANDLERS-sig"

functor MkPrefsWindow (Handlers:HANDLERS) :> () =
struct
  (********************************************************
   *         Creates a new 'preferences' window.          *
   ********************************************************)

local

  (*************** Preference window. ***********************)
  structure MainWin = Handlers.MainWindow
  val _ = Gtk.widgetSetSensitive(MainWin.menuItemPreferences, false)
  val prefs = Prefs.getCurrentPrefs ()
    
  val dialog = Gtk.dialogNewWithButtons ("Inspector Preferences",
                                         MainWin.window,
                                         Gtk.DIALOG_DESTROY_WITH_PARENT,
                                         "    Done    ",
                                         Gtk.INT 0)
    
  val _ = Gtk.dialogAddButton (dialog, "    Apply    ", 1)
  val _ = Gtk.dialogAddButton (dialog, "    Cancel    ", ~1)
    
  val vbox = Gtk.dialogGetFieldVbox dialog
  val label1 = Gtk.labelNew ""
  val text1  =
    "      <span size=\"large\" foreground=\"blue\">" ^
    "Inspector Preferences</span>      "
    
  val notebook = Gtk.notebookNew ()

  fun hAlign widgets = 
      let val group = Gtk.sizeGroupNew (Gtk.SIZE_GROUP_HORIZONTAL)
      in
	List.app (fn w => Gtk.sizeGroupAddWidget (group, w)) widgets
      end

  (*********** First PAGE of the notebook . ****************)
  local
    val vbox = Gtk.vboxNew (false, 15)      
    val traversal = Gtk.frameNew "Traversal"
    val identif   = Gtk.frameNew "Identifiers"
    val vbox2 = Gtk.vboxNew (false, 5)
    val vbox3 = Gtk.vboxNew (false, 5)
    val hbox1 = Gtk.hboxNew (false, 10)
    val hbox2 = Gtk.hboxNew (false, 10)
    val label1 = Gtk.labelNew "Initial max width"
    val label2 = Gtk.labelNew "Initial max depth"
    val widthLimit = real (#widthLimit prefs)
    val depthLimit = real (#depthLimit prefs)
    val spinner1 = Gtk.spinButtonNewWithRange (1.0, 500.0, 1.0) ;
    val spinner2 = Gtk.spinButtonNewWithRange (1.0, 500.0, 1.0) ;

    val label3 = Gtk.labelNew "Incremental width"
    val label4 = Gtk.labelNew "Incremental depth"
    val incrWidth = real (#incrWidth prefs)
    val incrDepth = real (#incrDepth prefs)
    val spinner3 = Gtk.spinButtonNewWithRange (1.0, 500.0, 1.0) ;
    val spinner4 = Gtk.spinButtonNewWithRange (1.0, 500.0, 1.0) ;
    val check1 = Gtk.checkButtonNewWithLabel
                            "Show indices for futures and references"

    val _ =
      (hAlign [label1, label2, label3, label4] ;
       hAlign [spinner1, spinner2, spinner3, spinner4] ;
       Gtk.spinButtonSetValue (spinner1, widthLimit) ;
       Gtk.spinButtonSetValue (spinner2, depthLimit) ;
       Gtk.spinButtonSetValue (spinner3, incrWidth) ;
       Gtk.spinButtonSetValue (spinner4, incrDepth) ;
       Gtk.containerSetBorderWidth (vbox, 10); 
       Gtk.containerSetBorderWidth (vbox2, 10); 
       Gtk.containerSetBorderWidth (vbox3, 10); 
       Gtk.frameSetShadowType (traversal, Gtk.SHADOW_OUT);
       Gtk.boxPackStart (vbox, traversal, false, false, 0) ;
       Gtk.containerAdd (traversal, vbox2) ;
       Gtk.frameSetShadowType (identif, Gtk.SHADOW_OUT);
       Gtk.boxPackStart (vbox, identif, false, false, 0) ;
       Gtk.containerAdd (identif, vbox3) ;
       Gtk.containerAdd (vbox2, hbox1) ;
       Gtk.containerAdd (vbox2, hbox2) ;
       Gtk.containerAdd (vbox3, check1) ;
       if #identifiers prefs then Gtk.toggleButtonSetActive (check1, true)
       else Gtk.toggleButtonSetActive (check1, false) ;
       Gtk.boxPackStart (hbox1, label1, false, false, 5) ;
       Gtk.boxPackStart (hbox2, label2, false, false, 5) ;
       Gtk.boxPackStart (hbox1, spinner1, false, false, 5) ;
       Gtk.boxPackStart (hbox2, spinner2, false, false, 5) ;
       Gtk.boxPackStart (hbox1, label3, false, false, 5) ;
       Gtk.boxPackStart (hbox2, label4, false, false, 5) ;
       Gtk.boxPackStart (hbox1, spinner3, false, false, 5) ;
       Gtk.boxPackStart (hbox2, spinner4, false, false, 5) ;
       ())
  in
    
    fun read1 (prefs:Prefs.prefs) = 
      {prefs where widthLimit = Gtk.spinButtonGetValueAsInt spinner1 ,
                   depthLimit = Gtk.spinButtonGetValueAsInt spinner2 ,
		   incrWidth  = Gtk.spinButtonGetValueAsInt spinner3 ,
                   incrDepth  = Gtk.spinButtonGetValueAsInt spinner4 ,
                   identifiers = Gtk.toggleButtonGetActive check1}
      
    val page1 = vbox

  end

  (*********** Second PAGE of the notebook. ****************)
  local
    val vbox = Gtk.vboxNew (false, 15)
    val fontname = ref (#fontname prefs)
    val styles   = #styles prefs
    val fontframe = Gtk.frameNew "Fonts"
    val fontvbox  = Gtk.vboxNew (false, 10)
    val fonthbox  = Gtk.hboxNew (false, 10)
    val column1 = Gtk.sizeGroupNew (Gtk.SIZE_GROUP_HORIZONTAL)
    val column2 = Gtk.sizeGroupNew (Gtk.SIZE_GROUP_HORIZONTAL)
    val column3 = Gtk.sizeGroupNew (Gtk.SIZE_GROUP_HORIZONTAL)

    fun createFontChooser (fontref, fonthbox, isDefault) =
	let
	  val fontlabel2 = Gtk.labelNew ""
	  val fontbutton = Gtk.buttonNew ()
	  val fontbuttonBox = Gtk.vbuttonBoxNew ()
      
	  fun setFont () =
	      let
		val markup =
		    "<span font_desc=\"" ^ (!fontref) ^ "\">"
		    ^ Prefs.sampleText ^ "</span>"
	      in
		Gtk.buttonSetLabel (fontbutton, !fontref) ;
		Gtk.labelSetMarkup (fontlabel2, markup)
	      end
		
	  fun fontButtonClicked _ =
	      let
		val fontdialog = Gtk.fontSelectionDialogNew "Pick a font"
		val _ = Gtk.fontSelectionDialogSetFontName (fontdialog,
							    !fontref)
		val _ = Gtk.widgetShow fontdialog
		val result = Gtk.IntToGtkResponseType(Gtk.dialogRun fontdialog)
	      in
		(case result of
		   (Gtk.RESPONSE_APPLY | Gtk.RESPONSE_OK | Gtk.RESPONSE_YES) =>
		   (fontref := Gtk.fontSelectionDialogGetFontName fontdialog ;
		    setFont ())
		 | _ => ()) ;
		
		Gtk.widgetDestroy fontdialog
	      end
	in
	  setFont () ;
	  Gtk.boxPackStart (fonthbox, fontbuttonBox, false, false, 5) ;
	  Gtk.boxPackStart (fonthbox, fontlabel2, false, false, 5) ;
	  Gtk.signalConnect (fontbutton, "clicked", fontButtonClicked);
	  Gtk.containerAdd (fontbuttonBox, fontbutton) ;
	  if isDefault then () 
	  else (Gtk.sizeGroupAddWidget (column2, fontbutton) ;
		Gtk.sizeGroupAddWidget (column3, fontlabel2)) ;
	  fontbutton
	end
    
    fun addEditable ({name, font, usefont, ...} : Prefs.style) =
	let
	  val hbox  = Gtk.hboxNew (false, 10)
	  val checkLabel = "Use customized font for a " ^ name ^ " : "
	  val check = Gtk.checkButtonNewWithLabel checkLabel
	  val _ = Gtk.boxPackStart (hbox, check, false, false, 5)
		  
	  val fontButton = createFontChooser (font, hbox, false)
			   
	  fun checkClicked _ = 
	      if Gtk.toggleButtonGetActive check
	      then (Gtk.widgetSetSensitive (fontButton, true) ;
		    usefont := true)
	      else (Gtk.widgetSetSensitive (fontButton, false) ;
		    usefont := false)
	in
	  if !usefont
	  then (Gtk.widgetSetSensitive (fontButton, true) ;
		Gtk.toggleButtonSetActive (check, true))
	  else (Gtk.widgetSetSensitive (fontButton, false) ;
		Gtk.toggleButtonSetActive (check, false)) ;
	  Gtk.containerAdd (fontvbox, hbox) ;
	  Gtk.signalConnect (check, "toggled", checkClicked) ;
	  Gtk.sizeGroupAddWidget (column1, check) ;
	  ()
	end

    val fontlabel1 = Gtk.labelNew "Default font : "

  val _ =
    (Gtk.containerSetBorderWidth (vbox, 10); 
     Gtk.containerSetBorderWidth (fonthbox, 10); 
     Gtk.frameSetShadowType (fontframe, Gtk.SHADOW_OUT);
     Gtk.boxPackStart (vbox, fontframe, false, false, 0) ;
     Gtk.containerAdd (fontframe, fontvbox) ;
     Gtk.containerAdd (fontvbox, fonthbox) ;
     Gtk.boxPackStart (fonthbox, fontlabel1, false, false, 5) ;
     Gtk.containerAdd (fontvbox, Gtk.hseparatorNew ()) ;
     createFontChooser (fontname, fonthbox, true) ;
     List.app addEditable styles)
  in

    fun read2 (prefs:Prefs.prefs) =
      {prefs where fontname = !fontname}
  
    val page2 = vbox

  end

  (*********** Third PAGE of the notebook. ****************)
  local
    val vbox = Gtk.vboxNew (false, 15)      
    val selection = Gtk.frameNew "Selection"
    val hbox1 = Gtk.hboxNew (false, 10)
    val label1 = Gtk.labelNew "A click on a record label selects "
    val vbox1 = Gtk.vboxNew (false, 5)
    val therecord = "the record"
    val thefield  = "the field"
    val choice1 = Gtk.radioButtonNewWithLabel (Gtk.NULL, thefield) 
    val group   = Gtk.radioButtonGetGroup choice1
    val choice2 = Gtk.radioButtonNewWithLabel (group, therecord)
    val _ = case (#labelOrient prefs) of
	      Prefs.Parent    => Gtk.toggleButtonSetActive (choice2, true)
	    | Prefs.SonStrict => Gtk.toggleButtonSetActive (choice1, true)
	    | Prefs.Son => assert false

    val tooltips = Gtk.frameNew "Tooltips"
    val hbox2   = Gtk.hboxNew (false, 10)
    val check1   = Gtk.checkButtonNewWithLabel "Activate tooltips"
    val label2  = Gtk.labelNew "Tooltip delay (in ms) "
    val unitms = real Prefs.mouseTickms
    val spinner1 = Gtk.spinButtonNewWithRange (unitms, 100000.0, unitms) ;
    val delay = real (Prefs.mouseTickms * (#tipDelay prefs))

    fun checkClicked _ = if Gtk.toggleButtonGetActive check1
                           then (Gtk.widgetSetSensitive (label2, true) ;
                                 Gtk.widgetSetSensitive (spinner1, true))
                         else (Gtk.widgetSetSensitive (label2, false) ;
                               Gtk.widgetSetSensitive (spinner1, false))

    val _ =
      (Gtk.containerSetBorderWidth (vbox, 10); 
       Gtk.containerSetBorderWidth (hbox1, 10); 
       Gtk.containerSetBorderWidth (hbox2, 10); 
       Gtk.frameSetShadowType (selection, Gtk.SHADOW_OUT);
       Gtk.frameSetShadowType (tooltips, Gtk.SHADOW_OUT);
       Gtk.boxPackStart (vbox, selection, false, false, 0) ;
       Gtk.containerAdd (selection, hbox1) ;
       Gtk.boxPackStart (hbox1, label1, false, false, 5) ;
       Gtk.boxPackStart (hbox1, vbox1, false, false, 5) ;
       Gtk.containerAdd (vbox1, choice1) ;
       Gtk.containerAdd (vbox1, choice2) ;
       Gtk.boxPackStart (vbox, tooltips, false, false, 0) ;
       Gtk.containerAdd (tooltips, hbox2) ;
       Gtk.containerAdd (hbox2, check1) ; 
       Gtk.containerAdd (hbox2, label2) ; 
       Gtk.containerAdd (hbox2, spinner1) ; 
       Gtk.spinButtonSetValue (spinner1, delay) ;
       Gtk.toggleButtonSetActive (check1, #tooltips prefs) ;
       checkClicked () ;
       Gtk.signalConnect (check1, "toggled", checkClicked) ;
       ())
  in
    
    fun read3 (prefs:Prefs.prefs) = 
	let
	  val orient = if Gtk.toggleButtonGetActive choice1 
		       then Prefs.SonStrict else Prefs.Parent
          val tooltips = Gtk.toggleButtonGetActive check1
          val delay = Gtk.spinButtonGetValueAsInt spinner1
          val delay = delay div Prefs.mouseTickms
	in
	  {prefs where labelOrient = orient,
                       tooltips    = tooltips,
                       tipDelay    = delay}
	end
      
    val page3 = vbox

  end


  (***************** Behaviour *******************)
    
  fun close () =
    (Gtk.widgetDestroy dialog ;
     Gtk.widgetSetSensitive(MainWin.menuItemPreferences, true))
    
  fun apply () = Handlers.applyPreferences (read3 (read2 (read1 prefs)))
    
  fun response (_, args) =
    case args of
      Gtk.INT 0 :: _ => (apply () ; close ())
    | Gtk.INT 1 :: _ => apply ()
    | Gtk.INT x :: _ => (assert (x<0) ; close ())
    | _ => (Common.warning "MkPrefsWindow.newPrefWindow: GTK - assert false." ;
            close ())
        
 val _ =
   (Gtk.labelSetMarkup (label1, text1) ;
    
    Gtk.boxPackStart (vbox, label1, false, false, 10) ;
    Gtk.boxPackStart (vbox, notebook, true, true, 10) ;
    
    Gtk.notebookAppendPage (notebook, page1, Gtk.labelNew "Structure") ;
    Gtk.notebookAppendPage (notebook, page2, Gtk.labelNew "Appearance") ;
    Gtk.notebookAppendPage (notebook, page3, Gtk.labelNew "Behaviour") ;
    
    Gtk.widgetShowAll dialog ;
    
    Gtk.signalConnect (dialog, "response", response) ;
    
    ())

in

end


end

