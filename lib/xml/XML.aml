import "NativeAliceXML"

signature ALICE_XML =
    sig
	type xmlNode

	exception documentParsingError

	infix />
	fun /> : xmlNode * (xmlNode -> 'a) -> 'a

	val parse : string -> xmlNode
	fun name : xmlNode -> string
	fun children : xmlNode -> xmlNode list
	fun null : xmlNode -> bool
	fun parent : xmlNode -> xmlNode
	fun properties : xmlNode -> xmlNode list
	fun getProp : xmlNode -> string -> string option
	fun getContent : xmlNode -> bool -> string option
    end

structure AliceXML :> ALICE_XML =
    struct
	type xmlNode

	exception documentParsingError

	infix />
	fun node /> f = f node

	structure X = NativeAliceXML

	fun getSiblingsList node acc =
	    if X.isNull node then acc
	    else
		getSiblingsList (X.next node) (node::acc)

	fun parse filename =
	    let
		val doc = X.parse filename
	    in
		if X.isNull doc then
		    raise documentParsingError
		else
		    doc
	    end

	val name = X.name
	fun children n = rev (getSiblingsList (X.children n) nil)
	val null = X.isNull
	val parent = X.parent
	fun properties n = rev (getSiblingsList (X.properties n) nil)
	fun getProp n s = X.getProp(n, s)
	fun getContent n f = X.nodeListGetString(X.children n,
						 if f then 1 else 0)
    end
