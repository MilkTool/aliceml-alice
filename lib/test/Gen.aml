(*
 * Authors:
 *   Benedikt Grundmann <bgrund@ps.uni-sb.de>
 *
 * Copyright:
 *   Benedikt Grundmann, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)
import signature GEN from "GEN-sig"
import structure Random from "x-alice:/lib/utility/Random"

structure Gen :> GEN =
struct
    type 'a test    = 'a -> unit

    type 'a gen	    = int -> 'a

    exception Exhausted

    val randomize = Random.randomize
    
    fun try n gen test =
	    let fun for i =
		    if i < n then (test (gen i); for (i + 1))
		    else ()
	    in
		for 0 handle Exhausted => ()
	    end

    (* Generators / Combinators *)
    fun pair (a, b) n	    = (a n, b n)
    fun triple (a, b, c) n  = (a n, b n, c n)
    
    fun const v (i:int)	    = v

    fun oneOf vals          = List.nth (vals, Random.int (length vals))

    fun oneOfFreq vals	    = 
	    select (Random.int (List.foldl 
		(fn (a, res) => res + #1 a) 0 vals), vals)
    and select (n, (i, v)::xs)	=   if n - i <= 0 then v 
				    else select (n - i, xs)
      | select _		= raise Fail "select: should never happen"

    fun list elem n	    = List.tabulate (n, fn _ => elem n)

    val maxGenTry = 100
    
    fun filter (gen, pred) n = 
	let fun cond' (v, i) =
	        if pred v then v
	        else	if i > maxGenTry then raise Exhausted
			else cond' (gen n, i + 1)
	in
	    cond' (gen n, 1)
	end

    fun bool n		= oneOf [const true, const false] n
    fun char n		= Char.chr (Random.int (Char.maxOrd + 1))
    fun string n	= String.tabulate (Int.abs n, char) 
    fun int n		= if bool 0 then Random.int n else ~ (Random.int n)
    fun largeInt n      = IntInf.* (IntInf.fromInt (int n), 
				    IntInf.fromInt (int n))
    fun word n		= Word.fromInt (Random.int n)
    fun word8 n         = Word8.fromInt (Random.int n)
    fun word32 n        = LargeWord.fromInt (Random.int n)
    fun real n		= Random.real (Real.fromInt n)
    fun cardinal n	= Random.int n

    fun option gen n	= if bool 0 then SOME (gen n) else NONE
    fun alt (ga, gb) n	= if bool 0 then FST (ga n) else SND (gb n)	
    fun vector gen n	= Vector.tabulate (Int.abs n, gen)
    fun array gen n	= Array.tabulate (Int.abs n, gen)
    fun arraySlice gen n = ArraySlice.slice (array gen n, 
					     int n,
					     option int n) 
			    handle Subscript => arraySlice gen n
    fun array2 gen n    = Array2.tabulate Array2.ColMajor 
			                  (int (Int.abs n), 
					   int (Int.abs n), 
					   fn (a, b) => gen (a + b))
    fun refOf gen n	= ref (gen n)
    
end

