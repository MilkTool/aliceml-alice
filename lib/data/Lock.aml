(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Andreas Rossberg, 2001-2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

(*
 *  Items marked with (**) are extensions to the Standard Basis.
 *)

import structure __pervasive              from "Pervasive"
import __primitive type unit datatype ref from "ToplevelTypes"
import __primitive structure Ref          from "Ref"
import __primitive structure Promise      from "Promise"
import __primitive structure Future       from "Future"
import __primitive signature LOCK         from "LOCK-sig"

local
    structure Lock : LOCK =					(**)
    struct
	type lock = unit ref
	type t = lock

	fun lock () = ref ()

	fun sync lock f x =
	    let
		val p = Promise.promise ()
	    in
		let
		    val _ = Future.await (Ref.exchange (lock, Promise.future p))
		    val y = f x
		in
		    Promise.fulfill (p, ()); y
		end
		handle e => (Promise.fulfill (p, ()); raise e)
	    end
    end

    __primitive eqtype lock = "Lock.lock"
    __primitive functor Cast (structure X : LOCK signature S) : S = "Cast"
in
    structure Lock = Cast (signature S = LOCK where type lock = lock
			   structure X = Lock)
end
