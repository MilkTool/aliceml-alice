(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2001-2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature COMPONENT_MANAGER from "../system/COMPONENT_MANAGER-sig"
import structure Unix              from "../system/Unix"
import structure Url               from "../utility/Url"
import structure Http              from "Http"
import structure HttpServer        from "HttpServer"
import structure HttpClient        from "HttpClient"
import signature REMOTE            from "REMOTE-sig"
import structure UnsafeRemote      from "UnsafeRemote"

structure Remote :> REMOTE =
    struct
	exception Ticket

	type ticket = string

	(*fun proxy f = UnsafeRemote.proxy (fn x => f x)*)

	val pickleContentType = "application/x-alice-pickle"

	fun makeTakeHandler value =
	    let
		(* make the snapshot here: can raise Sited exception *)
		val packedValue = UnsafeRemote.packValue value
	    in
		fn (request: Http.request) =>
		   Http.makeResponse
		       {statusCode = 200,
			contentType = pickleContentType,
			body = packedValue}
	    end

	fun offer value =
	    Url.toString (HttpServer.register (makeTakeHandler value))

	fun take ticket =
	    let
		val response =
		    HttpClient.get (Url.fromString ticket)
		    handle HttpClient.Authority => raise Ticket
	    in
		UnsafeRemote.unpackValue (#body response)
	    end

	functor Offer(signature S structure X: S) =
	    (val ticket =
		 let
		     structure P =
			 Package.Pack(signature S = S structure X = X)
		 in
		     offer P.package
		 end)

	functor Take(val ticket: string signature S) =
	    Package.Unpack(val package = take ticket
			   signature S = S)

(*
	functor Execute(val host: string
			signature RESULT
			functor Start(ComponentManager:
				      COMPONENT_MANAGER): RESULT) =
	    let
		val p = Promise.promise ()
		structure T =
		    Offer(signature S =
			      (signature RESULT
			       functor Start(ComponentManager:
					     COMPONENT_MANAGER): RESULT
			       val return: Package.t -> unit)
			  structure X =
			      (signature RESULT = RESULT
			       structure Start = Start
			       val return =
				   proxy (fn package =>
					     Promise.fulfill (p, package))))
	    in
		(*--**DEBUG*)
		TextIO.print ("ssh " ^ host ^ " alicerun " ^
			      "x-alice:/lib/distribution/RemoteServer " ^
			      T.ticket ^ "\n");
		Unix.execute ("ssh",
			      [host, "alicerun",
			       "x-alice:/lib/distribution/RemoteServer",
			       T.ticket]);
		Package.Unpack(val package = Promise.future p
			       signature S = RESULT)
	    end
*)
    end
