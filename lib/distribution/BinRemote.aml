(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus and Leif Kornstaedt, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature REMOTE       from "REMOTE-sig"
import structure UnsafeRemote from "UnsafeRemote"

structure Remote :> REMOTE =
    struct
	exception Ticket = UnsafeRemote.Ticket

	type ticket = string

	fun proxy f = UnsafeRemote.proxy (fn x => f x)
	val offer = UnsafeRemote.offer
	val take = UnsafeRemote.take

	functor Offer(signature S structure X: S) =
	    (val ticket =
		 let
		     structure P =
			 Package.Pack(signature S = S structure X = X)
		 in
		     offer P.package
		 end)

	functor Take(val ticket: string signature S) =
	    Package.Unpack(val package = take ticket
			   signature S = S)
    end
