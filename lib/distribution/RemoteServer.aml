(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature COMPONENT_MANAGER
			     from "x-alice:/lib/system/COMPONENT_MANAGER-sig"
(*--**
import structure ComponentManager
			     from "x-alice:/lib/system/ComponentManager"
*)
import structure Component   from "x-alice:/lib/system/Component"   (*--** *)
import structure OS          from "x-alice:/lib/system/OS"
import structure CommandLine from "x-alice:/lib/system/CommandLine"
import structure Remote      from "Remote"

fun main [ticket] =
    let
	structure Query =
	    Remote.Take(val ticket = ticket
			signature S =
			    (signature RESULT
			     functor Start(ComponentManager:
					   COMPONENT_MANAGER): RESULT
			     val return: Package.t -> unit))
	structure ComponentManager = Component.MkManager()   (*--** *)
	structure P =
	    Package.Pack(signature S = Query.RESULT
			 structure X = Query.Start(ComponentManager))
    in
	Query.return P.package
    end
  | main _ = OS.Process.exit OS.Process.failure

val _ = main (CommandLine.arguments ())
