(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Andreas Rossberg, 2001-2005
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Url              from "x-alice:/lib/system/Url"
import structure Component        from "x-alice:/lib/system/Component"
import structure ComponentManager from "x-alice:/lib/system/ComponentManager"
import structure OS               from "x-alice:/lib/system/OS"
import structure CommandLine      from "x-alice:/lib/system/CommandLine"
import structure Remote           from "Remote"

fun main [ticket] =
    let
	datatype reply = OK of package | EXN of exn

	structure Query =
	    unpack Remote.take ticket : (val component : Component.t
					 val return : reply -> unit)
	val reply =
	    OK (ComponentManager.eval (Url.fromString "", Query.component))
	    handle exn => EXN exn
    in
	Query.return reply
	handle Remote.Proxy Remote.SitedArgument =>
	       Query.return (EXN Remote.SitedResult)
	     | Remote.Proxy exn =>
	       Query.return (EXN exn)
	     | exn => Query.return (EXN exn);
	OS.Process.exit OS.Process.success
    end
  | main _ = OS.Process.exit OS.Process.failure

val _ = main (CommandLine.arguments ())
