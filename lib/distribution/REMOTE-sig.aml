(*
 * Authors:
 *   Thorsten Brunklaus <brunklaus@ps.uni-sb.de>
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Thorsten Brunklaus and Leif Kornstaedt and Andreas Rossberg, 2001-2004
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Component from "x-alice:/lib/system/Component"
import signature COMPONENT_MANAGER
    from "x-alice:/lib/system/COMPONENT_MANAGER-sig"

signature REMOTE =
    sig
	type ticket = string

	exception Ticket
	exception Proxy of exn
	exception SitedArgument			(* only as proxy cause *)
	exception SitedResult			(* only as proxy cause *)
	exception Protocol of string		(* only as proxy cause *)

	(*--** once-only offer and proxy are missing *)
	val proxy: ('a -> 'b) -> 'a -> 'b
	val offer: Package.package -> ticket              (* Sited *)
	val take: ticket -> Package.package               (* Ticket *)
	val execute: string * Component.t -> package

	functor Proxy(signature S structure X: S): S
	functor Offer(signature S structure X: S): (val ticket: ticket)
							  (* Sited *)
	functor Take(val ticket: ticket signature S): S   (* Ticket *)
	functor Execute(val host: string
			signature S
			functor F: COMPONENT_MANAGER -> S): S
    end
