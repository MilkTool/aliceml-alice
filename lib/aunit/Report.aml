(*
 * Authors:
 *   Benedikt Grundmann <bgrund@ps.uni-sb.de>
 *
 * Copyright:
 *   Benedikt Grundmann, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)
import structure AUnit from "AUnit"
import signature REPORT from "REPORT-sig"
import structure Fmt from "fmt/Fmt"

structure Report :> REPORT =
struct
	open AUnit
	structure F = Fmt

	fun report out { name = suiteName, passedNum, failedNum, failedTC } =
		if failedNum = 0 then 
			F.fmt out [F.S suiteName, F.S ": all testcases succeded.", F.NL]
		else
			(F.fmt out [F.S suiteName, F.S ": ", F.I failedNum, F.S " of ", F.I (passedNum + failedNum), F.S " testcases failed.", F.NL];
			 List.app (fn (name, FAIL_EXN e) => F.fmt out [F.TAB, F.S name, F.S ": [raised exception] ", F.S (exnName e), F.NL]
			 			| (name, FAIL_ASSERT assert) => F.fmt out [F.TAB, F.S name, F.S ": [assert failed] ", F.S assert, F.NL]
						| (name, FAIL_TIMEOUT) => F.fmt out [F.TAB,
								F.S name, F.S ": [timeout expired]", F.NL]) failedTC)

	fun execute out cfg = report out o (AUnit.execute cfg)
	
	fun executeAll out cfg = List.app (execute out cfg) 
end

