(*
 * Authors:
 *   Benedikt Grundmann <bgrund@ps.uni-sb.de>
 *
 * Copyright:
 *   Benedikt Grundmann, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)
import signature FMT from "FMT-sig"

structure Fmt :> FMT =
struct
	datatype format =
		S of string
	|	I of int
	|	R of real
	|	B of bool
	|	HEX of int
	|	OCT of int
	|	BIN of int
	|	SPC
	|	NL 						(* newline *)
	|	TAB						(* tabulator *)

	val fmt1 = fn 
			(S str)		=> str
		|	(I i)		=> Int.toString i
		|	(R r)		=> Real.toString r
		|	(B b)		=> Bool.toString b
		|	(HEX i)		=> Int.fmt StringCvt.HEX i
		|	(OCT i)		=> Int.fmt StringCvt.OCT i
		|	(BIN i)		=> Int.fmt StringCvt.BIN i
		|	SPC			=> " "
		|	NL			=> "\n"
		|	TAB			=> "\t"

	fun fmt out l = List.app (fn f => TextIO.output (out, fmt1 f)) l
end


