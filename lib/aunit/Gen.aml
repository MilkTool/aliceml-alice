(*
 * Authors:
 *   Benedikt Grundmann <bgrund@ps.uni-sb.de>
 *
 * Copyright:
 *   Benedikt Grundmann, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)
import signature GEN from "GEN-sig"
import structure Random from "x-alice:/lib/utility/Random"

structure Gen :> GEN =
struct
	type 'a test 			= 'a -> unit

	type 'a gen				= int -> 'a

	exception Exhausted
	
	fun test n gen test =
		let fun for i =
				if i < n then (test (gen i); for (i + 1))
				else ()
		in
			for 0 handle Exhausted => ()
		end

	(* Generators / Combinators *)
	fun pair (a, b) n = (a n, b n)
	fun triple (a, b, c) n = (a n, b n, c n)
	
	fun const v (i:int) = v

	fun oneOf vals = select (Random.int (length vals - 1), vals)
	and select (n, xs)	=	if n = 0 then List.hd xs
							else select (n - 1, List.tl xs)

	fun freq vals = select (Random.int (List.foldl (fn (a, res) => res + #1 a) 0 vals), vals)
	and select	(n, (i, v)::xs) = if n - i <= 0 then v else select (n - i, xs)

	fun listOf elem n = List.tabulate (n, fn _ => elem n)

	val maxGenTry = 100
	
	fun cond (gen, pred) n = 
		let fun cond' (v, i) =
			if pred v then v
			else	if i > maxGenTry then raise Exhausted
					else cond' (gen n, i + 1)
		in
			cond' (gen n, 1)
		end

	val bool		= oneOf [const true, const false]
	fun char n		= Char.chr (Random.int (Char.maxOrd + 1))
	fun string n	= String.tabulate (n, char) 
	fun int n		= if bool 0 then Random.int n else ~ (Random.int n)
	fun cardinal n	= Random.int n

end

