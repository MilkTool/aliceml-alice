(*
 * Authors:
 *   Sebastian Germesin <germi@ps.uni-sb.de>
 *
 * Copyright:
 *   Sebastian Germesin, 2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Report       from "x-alice:/lib/test/Report"
import structure Test         from "x-alice:/lib/test/Test"

import structure Time         from "x-alice:/lib/system/Time"

import structure TestBool     from "lib/fundamental/Bool"
import structure TestString   from "lib/fundamental/String"
import structure TestGeneral  from "lib/fundamental/General"
import structure TestOption   from "lib/fundamental/Option"
import structure TestAlt      from "lib/fundamental/Alt"
import structure TestIEEEReal from "lib/fundamental/IEEEReal"
import structure TestChar     from "lib/fundamental/Char"
import structure TestInteger  from "lib/fundamental/Integer"
import structure TestIntInf   from "lib/fundamental/IntInf"
import structure TestTime     from "lib/system/Time"
import structure TestCompiler from "lib/compiler/Compiler"

val allTests = [TestCompiler.suite,
		TestAlt.suite,
		TestBool.suite,
		TestChar.suite,
		TestGeneral.suite,
		TestOption.suite, 
		TestString.suite,
		TestIEEEReal.suite,
		TestInteger.suite
		(*TestIntInf.suite,
		TestTime.suite*)]

val beg = ref (Time.now ())

fun displayNeededTime () =
    let
	val ending = Time.now ()
	val result = Time.-(ending, !beg)
    in
	TextIO.output (TextIO.stdOut, "\nneeded " ^ Time.toString result ^ " seconds")
    end

fun usage () = print "usage: alicerun Main [timeout, seperate, showMissing]\n"

fun runTests conf = 
    Report.runAll TextIO.stdOut conf allTests

fun start cfg = 
    (beg := Time.now ();
     TextIO.output (TextIO.stdOut, "\n\n   automatic testing sequence for " 
                 ^ "Alice\n------------------------------------------\n\n");
	 runTests cfg)

fun main () = 
    case CommandLine.arguments () of
	 []                           => start Test.defaultConfig
       | [timeout, sep, showMissing]  => 
	 let
	     val t = Time.fromString timeout
	     val b1 = Bool.fromString sep
	     val b2 = Bool.fromString showMissing
	 in 
	     case t of
		 NONE    => start Test.defaultConfig
	       | SOME t1 => (start {timeout = t1,
				   separate = valOf b1,
				   showMissing = valOf b2}) 
		 handle _ => usage ()
	 end
       | _ => ()


val _ = (main ();
	 displayNeededTime ();
	 TextIO.output (TextIO.stdOut, "\ndone.\n");
	 OS.Process.exit OS.Process.success)