(*
 * Authors:
 *   Sebastian Germesin <germi@ps.uni-sb.de>
 *
 * Copyright:
 *   Sebastian Germesin, 2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Report          from "x-alice:/lib/test/Report"
(*
import structure Test            from "x-alice:/lib/test/Test"
*)
import structure Time            from "x-alice:/lib/system/Time"

import structure TestBool        from "lib/fundamental/Bool"
import structure TestString      from "lib/fundamental/String"
import structure TestGeneral     from "lib/fundamental/General"
import structure TestOption      from "lib/fundamental/Option"
import structure TestAlt         from "lib/fundamental/Alt"
import structure TestIEEEReal    from "lib/fundamental/IEEEReal"
import structure TestChar        from "lib/fundamental/Char"
import structure TestReal        from "lib/fundamental/Real"
import structure TestWord        from "lib/fundamental/Word"
import structure TestWord8       from "lib/fundamental/Word8"
import structure TestWord32      from "lib/fundamental/Word32"
import structure TestInteger     from "lib/fundamental/Integer"
import structure TestIntInf      from "lib/fundamental/IntInf"
import structure TestByte        from "lib/fundamental/Byte"
import structure TestList        from "lib/fundamental/List"
import structure TestListPair    from "lib/fundamental/ListPair"
import structure TestArray       from "lib/fundamental/Array"
import structure TestArraySlice  from "lib/fundamental/ArraySlice"
import structure TestArray2      from "lib/fundamental/Array2"
import structure TestVector      from "lib/fundamental/Vector"
import structure TestVectorPair  from "lib/fundamental/VectorPair"
import structure TestPair        from "lib/fundamental/Pair"
import structure TestRef         from "lib/fundamental/Ref"
import structure TestConfig      from "lib/system/Config"
import structure TestTime        from "lib/system/Time"
import structure TestTimer       from "lib/system/Timer"
import structure TestOSPath      from "lib/system/OS_Path"
import structure TestCompiler    from "lib/compiler/Compiler"
import structure TestRegressions from "lib/regression/tests/TestRegressions"

fun randomizeTests () = 
    let
	val allTests = [TestCompiler.randomize,
			TestAlt.randomize,
			TestBool.randomize,
			TestChar.randomize,
			TestArray.randomize,
			TestVector.randomize,
			TestWord.randomize,
			TestVectorPair.randomize,
			TestGeneral.randomize,
			TestArraySlice.randomize,
			TestOption.randomize, 
			TestString.randomize,
			TestIEEEReal.randomize,
			TestInteger.randomize,
			TestIntInf.randomize,
			TestByte.randomize,
			TestList.randomize,
			TestListPair.randomize,
			TestTime.randomize,
			TestReal.randomize,
			TestTimer.randomize,
			TestWord8.randomize,
			TestWord32.randomize,
			TestArray2.randomize,
			TestOSPath.randomize,
			TestRef.randomize,
			TestConfig.randomize,
			TestPair.randomize,
		        TestRegressions.randomize]
    in
	List.app (fn x => x ()) allTests
    end

val allTests = [TestRegressions.suite,
		TestCompiler.suite,
		TestPair.suite,
		TestRef.suite,
		TestAlt.suite,
		TestBool.suite,
		TestGeneral.suite,
		TestWord.suite,
		TestWord8.suite,
		TestWord32.suite,
		TestReal.suite,
		TestOption.suite, 
		TestList.suite,
		TestListPair.suite,
		TestArray.suite,
		TestArraySlice.suite,
		TestArray2.suite,
		TestVector.suite,
		TestVectorPair.suite,
		TestChar.suite,
		TestString.suite,
		TestIEEEReal.suite,
		TestInteger.suite,
		TestIntInf.suite,
		TestByte.suite,
		TestConfig.suite,
		TestOSPath.suite,
		TestTimer.suite,
		TestTime.suite]

val defaultConfig = {
	    timeout = Time.fromSeconds (Int.toLarge 20),
	    separate = false,
	    showMissing = true
    }

val beg = ref (Time.now ())

fun displayNeededTime () =
    let
	val ending = Time.now ()
	val result = Time.-(ending, !beg)
	val result = IntInf.toInt (Time.toSeconds result)
	val h = result div 3600
	val m = (result mod 3600) div 60
	val s = (result mod 3600) mod 60
    in
	TextIO.output (TextIO.stdOut, "\nneeded " ^ Int.toString h 
				    ^ " hours " ^ Int.toString m 
				    ^ " minutes " ^ Int.toString s 
				    ^ " seconds")
    end

fun usage () = print "usage: alicerun Main [timeout, seperate, showMissing]\n"

fun runTests conf = 
    Report.runAll TextIO.stdOut conf allTests

fun start cfg = 
    (beg := Time.now ();
     TextIO.output (TextIO.stdOut, "\n\n   automatic testing sequence for " 
                 ^ "Alice\n------------------------------------------\n\n");
	 runTests cfg)

fun main () = 
    case CommandLine.arguments () of
	 []                           => 
	     (randomizeTests ();
	      start defaultConfig)
       | [timeout, sep, showMissing, randomize]  => 
	 let
	     val t = Time.fromString timeout
	     val b1 = Bool.fromString sep
	     val b2 = Bool.fromString showMissing
	     val b3 = (*Bool.fromString randomize*) true
	 in 
	     if b3 then randomizeTests () else ();
	     case t of
		 NONE    => start defaultConfig
	       | SOME t1 => (start {timeout = t1,
				   separate = valOf b1,
				   showMissing = valOf b2}) 
		 handle _ => usage ()
	 end
       | _ => ()


val _ = (main ();
	 displayNeededTime ();
	 TextIO.output (TextIO.stdOut, "\ndone.\n");
	 OS.Process.exit OS.Process.success)






