(*
 * Authors:
 *   Sebastian Germesin <germi@ps.uni-sb.de>
 *
 * Copyright:
 *   Sebastian Germesin, 2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature TESTSUITE from "../../src/TESTSUITE-sig"

import structure Gen       from "x-alice:/lib/test/Gen"
import structure Test      from "../../src/Test"

import structure Random    from "x-alice:/lib/utility/Random"

structure TestString :> TESTSUITE =
struct

    fun strGen0 _ = Gen.string 1
    fun strGen1 _ = Gen.string (Random.int (String.maxSize div 20))
    val allGenString = [strGen0, strGen1]
    val allGenStrFreq = [(12,strGen0), (4,strGen1)]

    fun testSize () =
	Gen.try 10 (Gen.oneOfFreq allGenStrFreq)
	   (Test.test (fn s => true))

    fun testArithmetic () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testCompare () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testIsPrefix () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testSubstring () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testExtract () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testConcatWith () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testScanC () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testTokens () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testToFromCString () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testTabulate () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testScan () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testEqual () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testTranslate () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testIsSuffix () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testCollate () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testIsSubstring () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testConcat2 () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testStr () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testImplodeExplode () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testSub () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testHash () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testToFromString () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testConcat () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testMaxSize () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testToFromWide () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testMap () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testFields () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()


    val suite = ("String", [("size", testSize),
			    ("arithmetic", testArithmetic),
			    ("compare", testCompare),
			    ("isPrefix", testIsPrefix),
			    ("substring", testSubstring),
			    ("extract", testExtract),
			    ("concatWith", testConcatWith),
			    ("scanC", testScanC),
			    ("tokens", testTokens),
			    ("toFromCString", testToFromCString),
			    ("tabulate", testTabulate),
			    ("scan", testScan),
			    ("equal", testEqual),
			    ("translate", testTranslate),
			    ("isSuffix", testIsSuffix),
			    ("collate", testCollate),
			    ("isSubstring", testIsSubstring),
			    ("concat2", testConcat2),
			    ("str", testStr),
			    ("sub", testSub),
			    ("hash", testHash),
			    ("implodeExplode", testImplodeExplode),
			    ("toFromString", testToFromString),
			    ("concat", testConcat),
			    ("maxSize", testMaxSize),
			    ("toFromWide", testToFromWide),
			    ("map", testMap),
			    ("fields", testFields)])
end