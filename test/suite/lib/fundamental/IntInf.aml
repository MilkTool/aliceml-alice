(*
 * Authors:
 *   Sebastian Germesin <germi@ps.uni-sb.de>
 *
 * Copyright:
 *   Sebastian Germesin, 2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature TESTSUITE from "../../src/TESTSUITE-sig"

import structure Gen       from "x-alice:/lib/test/Gen"
import structure Test      from "../../src/Test"

structure TestIntInf :> TESTSUITE = (* the intInf test suite *)
struct

    fun testMinInt () =
	Test.test (fn m => LargeInt.minInt = m) NONE

    fun testMaxInt () =
	Test.test (fn m => LargeInt.maxInt = m) NONE

    fun testPrecision () =
	Test.test (fn m => LargeInt.precision = m) NONE

    fun testToFromInt () = 
	(Test.test (fn x => LargeInt.toInt (LargeInt.fromInt x) = x) 
	                                                    (valOf Int.maxInt);
	 Test.test (fn x => LargeInt.toInt (LargeInt.fromInt x) = x) 
	                                                    (valOf Int.minInt);
	 Gen.try 1000 Gen.int 
	    (Test.test (fn x => LargeInt.toInt (LargeInt.fromInt x) = x)))

    fun testToInt () = 
	let
	    val x1 = LargeInt.fromInt (valOf Int.maxInt)
	    val x2 = LargeInt.* (x1, x1)
	    val x1 = LargeInt.- (x1, x2)
	in
	    Test.test (fn s => (LargeInt.toInt s; false) handle _ => true) x1;
	    Test.test (fn s => (LargeInt.toInt s; false) handle _ => true) x2
	end

    fun testToLarge () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testFromLarge () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testToFromLarge () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testDiv () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testMod () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testQuot () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testRem () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testEqual () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testCompare () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testHash () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testDivMod () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testQuotRem () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testPow () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testLog2 () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testOrB () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testAndB () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testXorB () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testFromInt () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testNotB () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testLeftShift () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testRightShift () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testAbs () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testMin () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testMax () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testSign () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testSameSign () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testToString () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testFromString () =
	Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testToFromString () =
	let
	    val x1 = LargeInt.fromInt (valOf Int.maxInt)
	    val x2 = LargeInt.fromInt (valOf Int.minInt)
	    fun toFrom x = valOf (LargeInt.fromString (LargeInt.toString x))
	in
            (Test.test (fn x => toFrom x = x handle _ => false) x1;
	     Test.test (fn x => toFrom x = x handle _ => false) x2;
	     Gen.try 1000 Gen.int 
		     (Test.test (fn x => let
					   val t = LargeInt.fromInt x
				         in
					   toFrom t = t handle _ => false
				         end)))
	end

    fun testArithmetic () = Test.test (fn _ => raise Test.NotYetImplemented) ()

    fun testFmt () = Test.test (fn _ => raise Test.NotYetImplemented) ()    

    fun testScan () = Test.test (fn _ => raise Test.NotYetImplemented) ()

    val suite = ("IntInf", [("minInt", testMinInt),
			    ("maxInt", testMaxInt),
			    ("precision", testPrecision),
			    ("toInt", testToInt),
			    ("fromInt", testFromInt),
			    ("toLarge", testToLarge),
			    ("fromLarge", testFromLarge),
			    ("toFromLarge", testToFromLarge),
			    ("arithmetic", testArithmetic),
			    ("div", testDiv),
			    ("mod", testMod),
			    ("quot", testQuot),
			    ("rem", testRem),
			    ("equal", testEqual),
			    ("compare", testCompare),
			    ("hash", testHash),
			    ("divMod", testDivMod),
			    ("quotRem", testQuotRem),
			    ("pow", testPow),
			    ("log2", testLog2),
			    ("orb", testOrB),
			    ("xorb", testXorB),
			    ("andb", testAndB),
			    ("notb", testNotB),
			    ("<<", testLeftShift),
			    ("~>>", testRightShift),
			    ("abs", testAbs),
			    ("min", testMin),
			    ("max", testMax),
			    ("sign", testSign),
			    ("sameSign", testSameSign),
			    ("toString", testToString),
			    ("fromString", testFromString),
			    ("toFromString", testToFromString),
			    ("fmt", testFmt),
			    ("scan", testScan)])
end
