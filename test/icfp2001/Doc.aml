import structure Tag from "Tag"

signature DOC =
sig
    datatype item =
	  TEXT   of string list	(* reversed *)
	| TAGGED of Tag.tag * doc
    withtype doc = item list

    val length : doc -> int
    val output : TextIO.outstream * doc -> unit
end

structure Doc : DOC =
struct
    datatype item =
	  TEXT   of string list	(* reversed *)
	| TAGGED of Tag.tag * doc
    withtype doc = item list

    fun length doc                   = length'(doc, 0)
    and length'(items, n)            = List.foldl lengthItem n items
    and lengthItem(TEXT ss, n)       = List.foldl lengthString n ss
      | lengthItem(TAGGED(t,doc), n) = length'(doc, n + Tag.cost t)
    and lengthString(s, n)           = String.length s + n

    fun output(out, items)       = List.app (fn x => outputItem(out, x)) items
    and outputItem(out, TEXT ss) = List.appr (fn s => TextIO.output(out, s)) ss
      | outputItem(out, TAGGED(t,doc)) =
	let
	    val tag = Tag.toString t
	in
	    TextIO.output(out, "<" ^ tag ^ ">");
	    output(out, doc);
	    TextIO.output(out, "</" ^ tag ^ ">")
	end
end
