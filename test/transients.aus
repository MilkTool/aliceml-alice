infix  7  * / div mod
infix  6  + - ^
infixr 5  :: @
infix  4  = <> > >= < <=
infix  3  := o
infix  0  before

__prebound Prebound

type     int    = Prebound.int
datatype list   = datatype Prebound.list
datatype ref    = datatype Prebound.ref
type     exn    = Prebound.exn

type unit = {}

exception Promise
exception Future
exception Fulfill
exception ByNeed of exn

__primitive op+ : int * int -> int = "+"
__primitive op- : int * int -> int = "-"

__primitive exchange: 'a ref * 'a -> 'a = "General.exchange"

__primitive spawn: (unit -> 'a) -> unit = "Thread.spawn"
__primitive sleep: int -> unit = "Thread.sleep"

__primitive promise: unit -> 'a = "Transient.promise"
__primitive future: 'a -> 'a = "Transient.future"
__primitive fulfill: 'a * 'a -> unit = "Transient.fulfill"
__primitive await: 'a -> 'a = "Transient.await"
__primitive byNeed: (unit -> 'a) -> 'a = "Transient.byNeed"

__primitive exit: int -> 'a = "Application.exit"

__primitive show: (unit -> 'a) -> 'a = "show"

fun concurrent f =
    let
	val p = promise ()
    in
	spawn (fn () => fulfill (p, f ())); future p
    end

fun next (x, p) =
    let
	val p' = promise ()
    in
	fulfill (p, x::p'); p'
    end

local
    fun append' (nil, ys, p) = fulfill (p, ys)
      | append' (x::xr, ys, p) = append' (xr, ys, next (x, p))
in
    fun append (xs, ys) =
	let
	    val p = promise ()
	in
	    append' (xs, ys, p); p
	end
end

val _ = show (append ([1, 2, 3], [4, 5]))

fun mailbox () =
    let
	val p = promise ()
	val r = ref p
	fun put x =
	    let
		val p' = promise ()
	    in
		fulfill (exchange (r, p'), x::future p')
	    end
    in
	(put, future p)
    end

val (put, xs) = mailbox ()

fun loop (x::xr) = (show x; loop xr)

val _ = spawn (fn () => loop xs)
val _ = show "sleeping"
val _ = sleep 1000
val _ = put 1
val _ = sleep 1000
val _ = put 2
val _ = sleep 1000
val _ = put 3
val _ = sleep 1000
val _ = show xs

fun dispenser xs =
    let
	val r = ref xs
    in
	fn () =>
	let
	    val p = promise ()
	    val x::xs = exchange (r, future p)
	in
	    fulfill (p, xs); x
	end
    end

fun channel () =
    let
	val (put, stream) = mailbox ()
    in
	(put, dispenser stream)
    end

fun fib 0 = 1
  | fib 1 = 1
  | fib n = fib (n - 1) + fib (n - 2)

val _ = spawn (fn () => show (30, fib 30))
val _ = spawn (fn () => show (29, fib 29))
val _ = spawn (fn () => show (28, fib 28))
val _ = spawn (fn () => show (27, fib 27))

val _ = exit 0
