infix  7  * / div mod
infix  6  + - ^
infixr 5  :: @
infix  4  = <> > >= < <=
infix  3  := o
infix  0  before

__prebound Prebound

type     int    = Prebound.int
type     string = Prebound.string
datatype list   = datatype Prebound.list
datatype ref    = datatype Prebound.ref
type     exn    = Prebound.exn

type unit = {}

exception Promise
exception Future
exception Fulfill
exception ByNeed of exn

__primitive val op+ : int * int -> int = "+"
__primitive val op- : int * int -> int = "-"

__primitive val exchange: 'a ref * 'a -> 'a = "General.exchange"

__primitive val spawn: (unit -> 'a) -> unit = "Thread.spawn"
__primitive val sleep: int -> unit = "Thread.sleep"

__primitive val promise: unit -> 'a = "Transient.promise"
__primitive val future: 'a -> 'a = "Transient.future"
__primitive val fulfill: 'a * 'a -> unit = "Transient.fulfill"
__primitive val await: 'a -> 'a = "Transient.await"
__primitive val byNeed: (unit -> 'a) -> 'a = "Transient.byNeed"

__primitive val exit: int -> 'a = "Application.exit"

__primitive val show: (unit -> 'a) -> 'a = "show"

__primitive val save: ('a * string) -> unit = "Pickle.save"
__primitive val load: string -> 'a = "Pickle.load"

val _ = show "pickling"
val _ = save ((1, [2.0], "bla"), "pickle")
val _ = show "done"

val _ = show (load "pickle")
