(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Contributor:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2000-2002
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Reflect             from "../../lib/system/Reflect"
import structure Crash               from "../infrastructure/Crash"
import structure Stamp               from "../common/Stamp"
import structure StampMap            from "../common/StampMap"
import structure PrimPickle          from "PrimPickle"
import structure Value               from "ValueCross"
import structure AbstractCodeGrammar from "AbstractCodeGrammar"
import signature OUTPUT_PICKLE       from "OUTPUT_PICKLE-sig"

structure OutputPickle :> OUTPUT_PICKLE =
    struct
	structure V = Value
	open AbstractCodeGrammar

	structure Label =
	    struct
		datatype t =
		    ARRAY
		  | CELL
		  | CON_VAL
		  | RECORD
		  | VECTOR
		  | TAG of LargeInt.int
		  | TUPLE
		  | CLOSURE
		  | TRANSFORM

		val false_ = 0: LargeInt.int
		val true_  = 1: LargeInt.int

		val none = 0: LargeInt.int
		val some = TAG 1

		val idDef    = TAG 0
		val wildcard = 1: LargeInt.int

		val oneArg  = TAG 0
		val tupArgs = TAG 1

		val appPrim        = TAG 0
		val appVar         = TAG 1
		val close          = TAG 2
		val compactIntTest = TAG 3
		val compactTagTest = TAG 4
		val conTest        = TAG 5
		val endHandle      = TAG 6
		val endTry         = TAG 7
		val getRef         = TAG 8
		val getTup         = TAG 9
		val intTest        = TAG 10
		val kill           = TAG 11
		val lazyPolySel    = TAG 12
		val putCon         = TAG 13
		val putNew         = TAG 14
		val putPolyRec     = TAG 15
		val putRef         = TAG 16
		val putTag         = TAG 17
		val putTup         = TAG 18
		val putVar         = TAG 19
		val putVec         = TAG 20
		val raise_         = TAG 21
		val realTest       = TAG 22
		val reraise        = TAG 23
		val return         = TAG 24
		val sel            = TAG 25
		val shared         = TAG 26
		val specialize     = TAG 27
		val stringTest     = TAG 28
		val tagTest        = TAG 29
		val try            = TAG 30
		val vecTest        = TAG 31

		val global       = TAG 0
		val immediate    = TAG 1
		val lastUseLocal = TAG 2
		val local_       = TAG 3
		val toplevel     = TAG 4

		val template = TAG 0

		val function    = TAG 0

		fun toInt ARRAY   = 0
		  | toInt CELL    = 1
		  | toInt CON_VAL = 2
		  | toInt RECORD  = 3
		  | toInt VECTOR  = 4
		  | toInt (TAG i) = 5 + i
		  | toInt TUPLE   = 243
		  | toInt CLOSURE = 242
		  | toInt TRANSFORM = 245
	    end

	type context = {outstream: PrimPickle.outstream,
			shared: PrimPickle.register StampMap.t}

	fun nextRegister ({outstream, ...}: context) =
	    PrimPickle.nextRegister outstream
	fun outputInt ({outstream, ...}: context, i) =
	    PrimPickle.outputInt (outstream, i)
	fun outputChunk ({outstream, ...}: context, words) =
	    PrimPickle.outputChunk (outstream, words)
	fun outputBlock ({outstream, ...}: context, label, size) =
	    PrimPickle.outputBlock (outstream, Label.toInt label, size)
	fun outputTuple ({outstream, ...}: context, size) =
	    PrimPickle.outputTuple (outstream, size)
	fun outputClosure ({outstream, ...}: context, size) =
	    PrimPickle.outputClosure (outstream, size)
	fun outputString ({outstream, ...}: context, s) =
	    PrimPickle.outputString (outstream, s)
	fun outputAtom ({outstream, ...}: context, s) =
	    PrimPickle.outputAtom (outstream, s)
	fun outputTransform ({outstream, ...}: context) =
	    PrimPickle.outputTransform outstream
	fun outputLoad ({outstream, ...}: context, i) =
	    PrimPickle.outputLoad (outstream, i)
	fun outputStore ({outstream, ...}: context, i) =
	    PrimPickle.outputStore (outstream, i)
	fun outputOption _ (context, NONE) =
	    outputInt (context, Label.none)
	  | outputOption output (context, SOME x) =
	    (output (context, x);
	     outputBlock (context, Label.some, 1))

	fun outputBool (context, b) =
	    outputInt (context, if b then Label.true_ else Label.false_)

	fun outputVector output (context, xs) =
	    (Vector.app (fn x => output (context, x)) (Vector.rev xs);
	     outputInt (context, LargeInt.fromInt (Vector.length xs));
	     outputBlock (context, Label.VECTOR, Vector.length xs + 1))
	     
	fun outputStamp (context, stamp) =
	    outputInt (context, LargeInt.fromInt (Stamp.hash stamp))

	fun outputId (context, id) = outputInt (context, LargeInt.fromInt id)

	fun outputIdDef (context, IdDef id) =
	    (outputId (context, id);
	     outputBlock (context, Label.idDef, 1))
	  | outputIdDef (context, Wildcard) =
	    outputInt (context, Label.wildcard)

	fun outputArgs outputArg (context, OneArg x) =
	    (outputArg (context, x); outputBlock (context, Label.oneArg, 1))
	  | outputArgs outputArg (context, TupArgs xs) =
	    (outputVector outputArg (context, xs);
	     outputBlock (context, Label.tupArgs, 1))

	fun outputCoord (context, (string, line, column)) =
	    (outputInt (context, LargeInt.fromInt column);
	     outputInt (context, LargeInt.fromInt line);
	     outputString (context, string);
	     outputTuple (context, 3))

	fun outputLiveness (context, is) =
	    outputVector (fn (context, i) =>
			     outputInt (context, LargeInt.fromInt i))
			 (context, is)

	fun outputWideString (context, s) =
	    outputChunk (context,
			 Vector.fromList
			 (List.foldr (fn (c, cs) =>
				      let
					  val i = Char.ord c
				      in
					  Word8.fromInt (i div 0x100)::
					  Word8.fromInt (i mod 0x100)::cs
				      end) nil (String.explode s)))

	fun outputReal (context, r) =
	    let
		val vec = Reflect.realToVector r
	    in
		outputChunk (context,
			     Vector.tabulate
				 (8, fn i => Word8Vector.sub (vec, i)))
	    end

	fun outputLabel (context, label) =
	    outputAtom (context, label)
	    
	fun outputName (context, string) =
	    outputString (context, string)

	fun outputValue (context, V.Prim name) =
	    (outputString (context, name);
	     outputString (context, "Alice.primitive.value");
	     outputTransform context)
	  | outputValue (context, V.Int i) = 
	    outputInt (context, i)
	  | outputValue (context, V.String s) =
	    outputString (context, s)
	  | outputValue (context, V.WideString s) =
	    outputWideString (context, s)
	  | outputValue (context, V.Real r) =
	    outputReal (context, r)
	  | outputValue (context, V.TaggedValue (i, values)) =
	    (Vector.app (fn value => outputValue (context, value))
	     (Vector.rev values);
	     outputBlock (context, Label.TAG i, Vector.length values))
	  | outputValue (context, V.Tuple values) =
	    (Vector.app (fn value => outputValue (context, value))
	     (Vector.rev values);
	     outputTuple (context, Vector.length values))
	  | outputValue (context, V.Vector values) =
	    (Vector.app (fn value => outputValue (context, value))
	     (Vector.rev values);
	     outputInt (context, LargeInt.fromInt (Vector.length values));
	     outputBlock (context, Label.VECTOR, Vector.length values + 1))
	  | outputValue (context, V.Closure (abstractCode, values)) = 
	    (Vector.app (fn value => outputValue (context, value))
	     (Vector.rev values);
	     outputAbstractCode (context, abstractCode);
	     outputString (context, "Alice.function");
	     outputTransform context;
	     outputClosure (context, 1 + Vector.length values))
	  | outputValue (context, V.Sign _) =
	    outputInt (context, 0) (*--** i.e., `NONE' *)
	and outputInstr (context, Kill (ids, instr)) =
	    (outputInstr (context, instr);
	     outputVector outputId (context, ids);
	     outputBlock (context, Label.kill, 2))
	  | outputInstr (context, PutVar (id, idRef, instr)) =
	    (outputInstr (context, instr);
	     outputIdRef (context, idRef);
	     outputId (context, id);
	     outputBlock (context, Label.putVar, 3))
	  | outputInstr (context, PutNew (id, s, instr)) =
	    (outputInstr (context, instr);
	     outputString (context, s);
	     outputId (context, id);
	     outputBlock (context, Label.putNew, 3))
	  | outputInstr (context, PutTag (id, tag, idRefs, instr)) =
	    (outputInstr (context, instr);
	     outputVector outputIdRef (context, idRefs);
	     outputInt (context, LargeInt.fromInt tag);
	     outputId (context, id);
	     outputBlock (context, Label.putTag, 4))
	  | outputInstr (context, PutCon (id, idRef, idRefs, instr)) =
	    (outputInstr (context, instr);
	     outputVector outputIdRef (context, idRefs);
	     outputIdRef (context, idRef);
	     outputId (context, id);
	     outputBlock (context, Label.putCon, 4))
	  | outputInstr (context, PutRef (id, idRef, instr)) =
	    (outputInstr (context, instr);
	     outputIdRef (context, idRef);
	     outputId (context, id);
	     outputBlock (context, Label.putRef, 3))
	  | outputInstr (context, PutTup (id, idRefs, instr)) =
	    (outputInstr (context, instr);
	     outputVector outputIdRef (context, idRefs);
	     outputId (context, id);
	     outputBlock (context, Label.putTup, 3))
	  | outputInstr (context, PutPolyRec (id, labels, idRefs, instr)) =
	    (outputInstr (context, instr);
	     outputVector outputIdRef (context, idRefs);
	     outputVector outputLabel (context, labels);
	     outputId (context, id);
	     outputBlock (context, Label.putPolyRec, 4))
	  | outputInstr (context, PutVec (id, idRefs, instr)) =
	    (outputInstr (context, instr);
	     outputVector outputIdRef (context, idRefs);
	     outputId (context, id);
	     outputBlock (context, Label.putVec, 3))
	  | outputInstr (context, Close (id, idRefs, template, instr)) =
	    (outputInstr (context, instr);
	     outputTemplate (context, template);
	     outputVector outputIdRef (context, idRefs);
	     outputId (context, id);
	     outputBlock (context, Label.close, 4))
	  | outputInstr (context, Specialize (id, idRefs, template, instr)) =
	    (outputInstr (context, instr);
	     outputTemplate (context, template);
	     outputVector outputIdRef (context, idRefs);
	     outputId (context, id);
	     outputBlock (context, Label.specialize, 4))
	  | outputInstr (context, AppPrim (value, idRefs, idDefInstrOpt)) =
	    (outputOption (fn (context, (idDef, instr)) =>
			   (outputInstr (context, instr);
			    outputIdDef (context, idDef);
			    outputTuple (context, 2)))
	     (context, idDefInstrOpt);
	     outputVector outputIdRef (context, idRefs);
	     outputValue (context, value);
	     outputBlock (context, Label.appPrim, 3))
	  | outputInstr (context,
			 AppVar (idRef, inArgs, isDirectIn, outArgsInstrOpt)) =
	    (outputOption (fn (context, (outArgs, instr)) =>
			   (outputInstr (context, instr);
			    outputArgs outputIdDef (context, outArgs);
			    outputTuple (context, 2)))
	     (context, outArgsInstrOpt);
	     outputBool (context, isDirectIn);
	     outputVector outputIdRef (context, inArgs);
	     outputIdRef (context, idRef);
	     outputBlock (context, Label.appVar, 4))
	  | outputInstr (context, GetRef (id, idRef, instr)) =
	    (outputInstr (context, instr);
	     outputIdRef (context, idRef);
	     outputId (context, id);
	     outputBlock (context, Label.getRef, 3))
	  | outputInstr (context, GetTup  (idDefs, idRef, instr)) =
	    (outputInstr (context, instr);
	     outputIdRef (context, idRef);
	     outputVector outputIdDef (context, idDefs);
	     outputBlock (context, Label.getTup, 3))
	  | outputInstr (context, Sel (id, idRef, i, instr)) =
	    (outputInstr (context, instr);
	     outputInt (context, LargeInt.fromInt i);
	     outputIdRef (context, idRef);
	     outputId (context, id); 
	     outputBlock (context, Label.sel, 4))
	  | outputInstr (context, LazyPolySel (ids, idRef, labels, instr)) =
	    (outputInstr (context, instr);
	     outputVector outputLabel (context, labels);
	     outputIdRef (context, idRef);
	     outputVector outputId (context, ids);
	     outputBlock (context, Label.lazyPolySel, 4))
	  | outputInstr (context, Raise idRef) =
	    (outputIdRef (context, idRef);
	     outputBlock (context, Label.raise_, 1))
	  | outputInstr (context, Reraise idRef) =
	    (outputIdRef (context, idRef);
	     outputBlock (context, Label.reraise, 1))
	  | outputInstr (context,
			 Try (tryInstr, idDef1, idDef2, handleInstr)) =
	    (outputInstr (context, handleInstr);
	     outputIdDef (context, idDef2);
	     outputIdDef (context, idDef1);
	     outputInstr (context, tryInstr);
	     outputBlock (context, Label.try, 4))
	  | outputInstr (context, EndTry instr) =
	    (outputInstr (context, instr);
	     outputBlock (context, Label.endTry, 1))
	  | outputInstr (context, EndHandle instr) =
	    (outputInstr (context, instr);
	     outputBlock (context, Label.endHandle, 1))
	  | outputInstr (context, IntTest (idRef, tests, instr)) =
	    (outputInstr (context, instr);
	     outputVector (fn (context, (int, instr)) =>
			   (outputInstr (context, instr);
			    outputInt (context, int);
			    outputTuple (context, 2))) (context, tests);
	     outputIdRef (context, idRef);
	     outputBlock (context, Label.intTest, 3))
	  | outputInstr (context, CompactIntTest (idRef, i, instrs, instr)) =
	    (outputInstr (context, instr);
	     outputVector outputInstr (context, instrs);
	     outputInt (context, i);
	     outputIdRef (context, idRef);
	     outputBlock (context, Label.compactIntTest, 4))
	  | outputInstr (context, RealTest (idRef, tests, instr)) =
	    (outputInstr (context, instr);
	     outputVector (fn (context, (real, instr)) =>
			   (outputInstr (context, instr);
			    outputReal (context, real);
			    outputTuple (context, 2))) (context, tests);
	     outputIdRef (context, idRef);
	     outputBlock (context, Label.realTest, 3))
	  | outputInstr (context, StringTest (idRef, tests, instr)) =
	    (outputInstr (context, instr);
	     outputVector (fn (context, (string, instr)) =>
			   (outputInstr (context, instr);
			    outputString (context, string);
			    outputTuple (context, 2))) (context, tests);
	     outputIdRef (context, idRef);
	     outputBlock (context, Label.stringTest, 3))
	  | outputInstr (context, TagTest (idRef, tests1, tests2, instr)) =
	    (outputInstr (context, instr);
	     outputVector (fn (context, (tag, idDefs, instr)) =>
			   (outputInstr (context, instr);
			    outputVector outputIdDef (context, idDefs);
			    outputInt (context, LargeInt.fromInt tag);
			    outputTuple (context, 3)))
	     (context, tests2);
	     outputVector (fn (context, (tag, instr)) =>
			   (outputInstr (context, instr);
			    outputInt (context, LargeInt.fromInt tag);
			    outputTuple (context, 2)))
	     (context, tests1);
	     outputIdRef (context, idRef);
	     outputBlock (context, Label.tagTest, 4))
	  | outputInstr (context, CompactTagTest (idRef, tests, instrOpt)) =
	    (outputOption outputInstr (context, instrOpt);
	     outputVector (fn (context, (idDefsOpt, instr)) =>
			   (outputInstr (context, instr);
			    outputOption
			    (fn (context, idDefs) =>
			     outputVector
			     outputIdDef (context, idDefs))
			    (context, idDefsOpt);
			    outputTuple (context, 2))) (context, tests);
	     outputIdRef (context, idRef);
	     outputBlock (context, Label.compactTagTest, 3))
	  | outputInstr (context, ConTest (idRef, tests1, tests2, instr)) =
	    (outputInstr (context, instr);
	     outputVector (fn (context, (idRef, idDefs, instr)) =>
			   (outputInstr (context, instr);
			    outputVector outputIdDef (context, idDefs);
			    outputIdRef (context, idRef);
			    outputTuple (context, 3))) (context, tests2);
	     outputVector (fn (context, (idRef, instr)) =>
			   (outputInstr (context, instr);
			    outputIdRef (context, idRef);
			    outputTuple (context, 2))) (context, tests1);
	     outputIdRef (context, idRef);
	     outputBlock (context, Label.conTest, 4))
	  | outputInstr (context, VecTest (idRef, tests, instr)) =
	    (outputInstr (context, instr);
	     outputVector (fn (context, (idDefs, instr)) =>
			   (outputInstr (context, instr);
			    outputVector outputIdDef (context, idDefs);
			    outputTuple (context, 2))) (context, tests);
	     outputIdRef (context, idRef);
	     outputBlock (context, Label.vecTest, 3))
	  | outputInstr (context as {shared, ...}, Shared (stamp, instr)) =
	    (case StampMap.lookup (shared, stamp) of
		 SOME id => outputLoad (context, id)
	       | NONE =>
		     let
			 val id = nextRegister context
		     in
			 outputInstr (context, instr);
			 outputStamp (context, stamp);
			 outputBlock (context, Label.shared, 2);
			 outputStore (context, id);
			 StampMap.insert (shared, stamp, id)
		     end)
	  | outputInstr (context, Return args) =
	    (outputArgs outputIdRef (context, args);
	     outputBlock (context, Label.return, 1))
	and outputIdRef (context, Immediate value) =
	    (outputValue (context, value);
	     outputBlock (context, Label.immediate, 1))
	  | outputIdRef (context, Local id) =
	    (outputId (context, id);
	     outputBlock (context, Label.local_, 1))
	  | outputIdRef (context, LastUseLocal id) =
	    (outputId (context, id);
	     outputBlock (context, Label.lastUseLocal, 1))
	  | outputIdRef (context, Global i) =
	    (outputId (context, i);
	     outputBlock (context, Label.global, 1))
	and outputTemplate (context, Template (coord, ntoplevels, localNames,
					       args, body, liveness)) =
	    (outputLiveness (context, liveness);
	     outputInstr (context, body);
	     outputVector outputIdDef (context, args);
	     outputVector outputName (context, localNames);
	     outputInt (context, LargeInt.fromInt ntoplevels);
	     outputCoord (context, coord);
	     outputBlock (context, Label.template, 6))	     
	and outputAbstractCode (context, Function (coord, globals, localNames,
						   args, body, liveness)) =
	    (outputLiveness (context, liveness);
	     outputInstr (context, body);
	     outputVector outputIdDef (context, args);
	     outputVector outputName (context, localNames);
	     outputVector (outputOption outputValue) (context, globals);
	     outputCoord (context, coord);
	     outputBlock (context, Label.function, 6))

	fun output (outstream, value) =
	    outputValue ({outstream = outstream, shared = StampMap.map ()},
			 value)
    end
