(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2000-2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature COMPONENT_MANAGER
    from "../../lib/system/COMPONENT_MANAGER-sig"
import structure Crash               from "../infrastructure/Crash"
import signature SWITCHES            from "../infrastructure/SWITCHES-sig"
import signature PHASE               from "../infrastructure/PHASE-sig"
import structure MkTracingPhase      from "../infrastructure/MkTracingPhase"
import structure EmptyContext        from "../infrastructure/EmptyContext"
import structure Target              from "../infrastructure/Target"
import structure FlatGrammar         from "../backend-common/FlatGrammar"
import structure PrimPickle          from "PrimPickle"
import structure Value               from "ValueCross"
import structure AbstractCodeGrammar from "AbstractCodeGrammar"
import structure OutputPickle        from "OutputPickle"
import structure MkCodeGenPhase      from "MkCodeGenPhase"

functor MkBackendStockwerk(structure ComponentManager: COMPONENT_MANAGER
			   structure Switches: SWITCHES): PHASE =
    let
	structure CodeGenPhase = MkCodeGenPhase(AbstractCodeGrammar)

	fun sign (Value.TaggedValue
		     (_, #[_, _, Value.Sign (SOME exportSign)])) = exportSign
	  | sign _ = raise Crash.Crash "MkBackendStockwerk.sign"

	fun save value filename =
	    let
		val outstream = PrimPickle.openOut filename
	    in
		OutputPickle.output (outstream, value);
		PrimPickle.closeOut outstream
	    end
    in
	MkTracingPhase(structure Phase =
			   struct
			       structure C = EmptyContext
			       structure I = FlatGrammar
			       structure O = Target

			       fun translate () x =
				   let
				       val value =
					   CodeGenPhase.translate () x
				   in
				       Target.FOREIGN {save = save value,
						       sign = sign value}
				   end
			   end
		       structure Switches = Switches
		       val name = "Emitting Pickle")
    end
