(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2000-2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Reflect             from "../../lib/system/Reflect"
import structure Crash               from "../infrastructure/Crash"
import structure Stamp               from "../common/Stamp"
import structure StampMap            from "../common/StampMap"
import structure PrimPickle          from "PrimPickle"
import structure Value               from "ValueCross"
import structure AbstractCodeGrammar from "AbstractCodeGrammar"
import signature OUTPUT_PICKLE       from "OUTPUT_PICKLE-sig"

structure OutputPickle :> OUTPUT_PICKLE =
    struct
	structure V = Value
	open AbstractCodeGrammar

	structure Label =
	    struct
		datatype t =
		    ARRAY
		  | CELL
		  | CONSTRUCTOR
		  | CON_VAL
		  | VECTOR
		  | TAG of LargeInt.int

		val none = 0: LargeInt.int
		val some = TAG 1

		val idDef = TAG 0
		val wildcard = 1: LargeInt.int

		val global = TAG 0
		val local_ = TAG 1

		val oneArg = TAG 0
		val tupArgs = TAG 1

		val function = TAG 0

		val appConst = TAG 0
		val appPrim = TAG 1
		val appVar = TAG 2
		val conTest = TAG 3
		val endHandle = TAG 4
		val endTry = TAG 5
		val getRef = TAG 6
		val getTup = TAG 7
		val intTest = TAG 8
		val kill = TAG 9
		val lazySel = TAG 10
		val putCon = TAG 11
		val putConst = TAG 12
		val putFun = TAG 13
		val putNew = TAG 14
		val putRef = TAG 15
		val putTag = TAG 16
		val putTup = TAG 17
		val putVar = TAG 18
		val putVec = TAG 19
		val raise_ = TAG 20
		val realTest = TAG 21
		val reraise = TAG 22
		val return = TAG 23
		val sel = TAG 24
		val shared = TAG 25
		val stringTest = TAG 26
		val tagTest = TAG 27
		val try = TAG 28
		val vecTest = TAG 29

		fun toInt ARRAY        = 0
		  | toInt CELL         = 1
		  | toInt CONSTRUCTOR  = 2
		  | toInt CON_VAL      = 3
		  | toInt VECTOR       = 4
		  | toInt (TAG i)      = 5 + i
	    end

	type context = {outstream: PrimPickle.outstream,
			shared: PrimPickle.id StampMap.t}

	fun outputInt ({outstream, ...}: context, i) =
	    PrimPickle.outputInt (outstream, i)
	fun outputChunk ({outstream, ...}: context, words) =
	    PrimPickle.outputChunk (outstream, words)
	fun outputBlock ({outstream, ...}: context, label, size) =
	    PrimPickle.outputBlock (outstream, Label.toInt label, size)
	fun outputTuple ({outstream, ...}: context, size) =
	    PrimPickle.outputTuple (outstream, size)
	fun outputClosure ({outstream, ...}: context, size) =
	    PrimPickle.outputClosure (outstream, size)
	fun outputReference ({outstream, ...}: context, id) =
	    PrimPickle.outputReference (outstream, id)
	fun outputString ({outstream, ...}: context, s) =
	    PrimPickle.outputString (outstream, s)
	fun outputTransform ({outstream, ...}: context, name) =
	    PrimPickle.outputTransform (outstream, name)

	fun outputOption _ (context, NONE) =
	    outputInt (context, Label.none)
	  | outputOption output (context, SOME x) =
	    (outputBlock (context, Label.some, 1); output (context, x))

	fun outputVector output (context, xs) =
	    (outputBlock (context, Label.VECTOR, Vector.length xs + 1);
	     outputInt (context, LargeInt.fromInt (Vector.length xs));
	     Vector.app (fn x => output (context, x)) xs)

	fun outputStamp (context, stamp) =
	    outputInt (context, LargeInt.fromInt (Stamp.hash stamp))

	fun outputId (context, id) = outputInt (context, LargeInt.fromInt id)

	fun outputIdDef (context, IdDef id) =
	    (outputBlock (context, Label.idDef, 1); outputId (context, id))
	  | outputIdDef (context, Wildcard) =
	    outputInt (context, Label.wildcard)

	fun outputIdRef (context, Local id) =
	    (outputBlock (context, Label.local_, 1); outputId (context, id))
	  | outputIdRef (context, Global id) =
	    (outputBlock (context, Label.global, 1); outputId (context, id))

	fun outputArgs outputArg (context, OneArg x) =
	    (outputBlock (context, Label.oneArg, 1); outputArg (context, x))
	  | outputArgs outputArg (context, TupArgs xs) =
	    (outputBlock (context, Label.tupArgs, 1);
	     outputVector outputArg (context, xs))

	fun outputCoord (context, (string, line, column)) =
	    (outputTuple (context, 3); outputString (context, string);
	     outputInt (context, LargeInt.fromInt line);
	     outputInt (context, LargeInt.fromInt column))

	fun outputWideString (context, s) =
	    outputChunk (context,
			 Vector.fromList
			 (List.foldr (fn (c, cs) =>
				      let
					  val i = Char.ord c
				      in
					  Word8.fromInt (i div 0x100)::
					  Word8.fromInt (i mod 0x100)::cs
				      end) nil (String.explode s)))

	fun outputReal (context, r) =
	    let
		val vec = Reflect.realToVector r
	    in
		outputChunk (context,
			     Vector.tabulate
			     (8, fn i => Vector.sub (vec, i)));
		()
	    end

	fun outputValue (context, V.Prim name) =
	    (outputTransform (context, "Alice.primitive.value");
	     outputBlock (context, Label.TAG 0, 1);
	     outputString (context, name); ())
	  | outputValue (context, V.Int i) = outputInt (context, i)
	  | outputValue (context, V.String s) =
	    ignore (outputString (context, s))
	  | outputValue (context, V.WideString s) =
	    ignore (outputWideString (context, s))
	  | outputValue (context, V.Real r) = outputReal (context, r)
	  | outputValue (context, V.TaggedValue (i, values)) =
	    (outputBlock (context, Label.TAG i, Vector.length values);
	     Vector.app (fn value => outputValue (context, value)) values)
	  | outputValue (context, V.Tuple values) =
	    (outputTuple (context, Vector.length values);
	     Vector.app (fn value => outputValue (context, value)) values)
	  | outputValue (context, V.Vector values) =
	    (outputBlock (context, Label.VECTOR, Vector.length values + 1);
	     outputInt (context, LargeInt.fromInt (Vector.length values));
	     Vector.app (fn value => outputValue (context, value)) values)
	  | outputValue (context, V.Closure (function, values)) =
	    (outputClosure (context, 1 + Vector.length values);
	     outputFunction (context, function);
	     Vector.app (fn value => outputValue (context, value)) values)
	  | outputValue (context, V.Sign _) =
	    outputInt (context, 0) (*--** i.e., `NONE' *)
	and outputFunction (context,
			    Function (coord, nglobals, nlocals, args, body)) =
	    (outputTransform (context, "Alice.function");
	     outputBlock (context, Label.function, 5);
	     outputCoord (context, coord);
	     outputInt (context, LargeInt.fromInt nglobals);
	     outputInt (context, LargeInt.fromInt nlocals);
	     outputArgs outputIdDef (context, args);
	     outputInstr (context, body))
	and outputInstr (context, Kill (ids, instr)) =
	    (outputBlock (context, Label.kill, 2);
	     outputVector outputId (context, ids);
	     outputInstr (context, instr))
	  | outputInstr (context, PutConst (id, value, instr)) =
	    (outputBlock (context, Label.putConst, 3); outputId (context, id);
	     outputValue (context, value); outputInstr (context, instr))
	  | outputInstr (context, PutVar (id, idRef, instr)) =
	    (outputBlock (context, Label.putVar, 3); outputId (context, id);
	     outputIdRef (context, idRef); outputInstr (context, instr))
	  | outputInstr (context, PutNew (id, instr)) =
	    (outputBlock (context, Label.putNew, 2); outputId (context, id);
	     outputInstr (context, instr))
	  | outputInstr (context, PutTag (id, tag, idRefs, instr)) =
	    (outputBlock (context, Label.putTag, 4); outputId (context, id);
	     outputInt (context, LargeInt.fromInt tag);
	     outputVector outputIdRef (context, idRefs);
	     outputInstr (context, instr))
	  | outputInstr (context, PutCon (id, idRef, idRefs, instr)) =
	    (outputBlock (context, Label.putCon, 4); outputId (context, id);
	     outputIdRef (context, idRef);
	     outputVector outputIdRef (context, idRefs);
	     outputInstr (context, instr))
	  | outputInstr (context, PutRef (id, idRef, instr)) =
	    (outputBlock (context, Label.putRef, 3); outputId (context, id);
	     outputIdRef (context, idRef); outputInstr (context, instr))
	  | outputInstr (context, PutTup (id, idRefs, instr)) =
	    (outputBlock (context, Label.putTup, 3); outputId (context, id);
	     outputVector outputIdRef (context, idRefs);
	     outputInstr (context, instr))
	  | outputInstr (context, PutVec (id, idRefs, instr)) =
	    (outputBlock (context, Label.putVec, 3); outputId (context, id);
	     outputVector outputIdRef (context, idRefs);
	     outputInstr (context, instr))
	  | outputInstr (context, PutFun (id, idRefs, function, instr)) =
	    (outputBlock (context, Label.putFun, 4); outputId (context, id);
	     outputVector outputIdRef (context, idRefs);
	     outputFunction (context, function); outputInstr (context, instr))
	  | outputInstr (context, AppPrim (value, idRefs, idDefInstrOpt)) =
	    (outputBlock (context, Label.appPrim, 3);
	     outputValue (context, value);
	     outputVector outputIdRef (context, idRefs);
	     outputOption (fn (context, (idDef, instr)) =>
			   (outputTuple (context, 2);
			    outputIdDef (context, idDef);
			    outputInstr (context, instr)))
	     (context, idDefInstrOpt))
	  | outputInstr (context, AppVar (idRef, inArgs, outArgsInstrOpt)) =
	    (outputBlock (context, Label.appVar, 3);
	     outputIdRef (context, idRef);
	     outputArgs outputIdRef (context, inArgs);
	     outputOption (fn (context, (outArgs, instr)) =>
			   (outputTuple (context, 2);
			    outputArgs outputIdDef (context, outArgs);
			    outputInstr (context, instr)))
	     (context, outArgsInstrOpt))
	  | outputInstr (context, AppConst (value, inArgs, outArgsInstrOpt)) =
	    (outputBlock (context, Label.appConst, 3);
	     outputValue (context, value);
	     outputArgs outputIdRef (context, inArgs);
	     outputOption (fn (context, (outArgs, instr)) =>
			   (outputTuple (context, 2);
			    outputArgs outputIdDef (context, outArgs);
			    outputInstr (context, instr)))
	     (context, outArgsInstrOpt))
	  | outputInstr (context, GetRef (id, idRef, instr)) =
	    (outputBlock (context, Label.getRef, 3); outputId (context, id);
	     outputIdRef (context, idRef); outputInstr (context, instr))
	  | outputInstr (context, GetTup  (idDefs, idRef, instr)) =
	    (outputBlock (context, Label.getTup, 3);
	     outputVector outputIdDef (context, idDefs);
	     outputIdRef (context, idRef); outputInstr (context, instr))
	  | outputInstr (context, Sel (id, idRef, i, instr)) =
	    (outputBlock (context, Label.sel, 4);
	     outputId (context, id); outputIdRef (context, idRef);
	     outputInt (context, LargeInt.fromInt i);
	     outputInstr (context, instr))
	  | outputInstr (context, LazySel (id, idRef, i, instr)) =
	    (outputBlock (context, Label.lazySel, 4);
	     outputId (context, id); outputIdRef (context, idRef);
	     outputInt (context, LargeInt.fromInt i);
	     outputInstr (context, instr))
	  | outputInstr (context, Raise idRef) =
	    (outputBlock (context, Label.raise_, 1);
	     outputIdRef (context, idRef))
	  | outputInstr (context, Reraise idRef) =
	    (outputBlock (context, Label.reraise, 1);
	     outputIdRef (context, idRef))
	  | outputInstr (context,
			 Try (tryInstr, idDef1, idDef2, handleInstr)) =
	    (outputBlock (context, Label.try, 4);
	     outputInstr (context, tryInstr); outputIdDef (context, idDef1);
	     outputIdDef (context, idDef2); outputInstr (context, handleInstr))
	  | outputInstr (context, EndTry instr) =
	    (outputBlock (context, Label.endTry, 1);
	     outputInstr (context, instr))
	  | outputInstr (context, EndHandle instr) =
	    (outputBlock (context, Label.endHandle, 1);
	     outputInstr (context, instr))
	  | outputInstr (context, IntTest (idRef, tests, instr)) =
	    (outputBlock (context, Label.intTest, 3);
	     outputIdRef (context, idRef);
	     outputVector (fn (context, (int, instr)) =>
			   (outputTuple (context, 2);
			    outputInt (context, int);
			    outputInstr (context, instr))) (context, tests);
	     outputInstr (context, instr))
	  | outputInstr (context, RealTest (idRef, tests, instr)) =
	    (outputBlock (context, Label.realTest, 3);
	     outputIdRef (context, idRef);
	     outputVector (fn (context, (real, instr)) =>
			   (outputTuple (context, 2);
			    outputReal (context, real);
			    outputInstr (context, instr))) (context, tests);
	     outputInstr (context, instr))
	  | outputInstr (context, StringTest (idRef, tests, instr)) =
	    (outputBlock (context, Label.stringTest, 3);
	     outputIdRef (context, idRef);
	     outputVector (fn (context, (string, instr)) =>
			   (outputTuple (context, 2);
			    outputString (context, string);
			    outputInstr (context, instr))) (context, tests);
	     outputInstr (context, instr))
	  | outputInstr (context, WideStringTest (idRef, tests, instr)) =
	    (outputBlock (context, Label.stringTest, 3);
	     outputIdRef (context, idRef);
	     outputVector (fn (context, (string, instr)) =>
			   (outputTuple (context, 2);
			    outputWideString (context, string);
			    outputInstr (context, instr))) (context, tests);
	     outputInstr (context, instr))
	  | outputInstr (context, TagTest (idRef, tests1, tests2, instr)) =
	    (outputBlock (context, Label.tagTest, 4);
	     outputIdRef (context, idRef);
	     outputVector (fn (context, (tag, instr)) =>
			  (outputTuple (context, 2);
			   outputInt (context, LargeInt.fromInt tag);
			   outputInstr (context, instr))) (context, tests1);
	     outputVector (fn (context, (tag, idDefs, instr)) =>
			   (outputTuple (context, 3);
			    outputInt (context, LargeInt.fromInt tag);
			    outputVector outputIdDef (context, idDefs);
			    outputInstr (context, instr))) (context, tests2);
	     outputInstr (context, instr))
	  | outputInstr (context, ConTest (idRef, tests1, tests2, instr)) =
	    (outputBlock (context, Label.conTest, 4);
	     outputIdRef (context, idRef);
	     outputVector (fn (context, (idRef, instr)) =>
			   (outputTuple (context, 2);
			    outputIdRef (context, idRef);
			    outputInstr (context, instr))) (context, tests1);
	     outputVector (fn (context, (idRef, idDefs, instr)) =>
			   (outputTuple (context, 3);
			    outputIdRef (context, idRef);
			    outputVector outputIdDef (context, idDefs);
			    outputInstr (context, instr))) (context, tests2);
	     outputInstr (context, instr))
	  | outputInstr (context, VecTest (idRef, tests, instr)) =
	    (outputBlock (context, Label.vecTest, 3);
	     outputIdRef (context, idRef);
	     outputVector (fn (context, (idDefs, instr)) =>
			   (outputTuple (context, 2);
			    outputVector outputIdDef (context, idDefs);
			    outputInstr (context, instr))) (context, tests);
	     outputInstr (context, instr))
	  | outputInstr (context as {shared, ...}, Shared (stamp, instr)) =
	    (case StampMap.lookup (shared, stamp) of
		 SOME id => outputReference (context, id)
	       | NONE =>
		     let
			 val id = outputBlock (context, Label.shared, 2)
		     in
			 outputStamp (context, stamp);
			 outputInstr (context, instr);
			 StampMap.insert (shared, stamp, id)
		     end)
	  | outputInstr (context, Return args) =
	    (outputBlock (context, Label.return, 1);
	     outputArgs outputIdRef (context, args))

	fun output (outstream, value) =
	    outputValue ({outstream = outstream, shared = StampMap.new ()},
			 value)
    end
