(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2000-2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Component             from "../../lib/system/Component"
import signature COMPONENT_MANAGER
    from "../../lib/system/COMPONENT_MANAGER-sig"
import signature SWITCHES              from "../infrastructure/SWITCHES-sig"
import signature PHASE                 from "../infrastructure/PHASE-sig"
import structure MkTracingPhase        from "../infrastructure/MkTracingPhase"
import structure EmptyContext          from "../infrastructure/EmptyContext"
import structure Target                from "../infrastructure/Target"
import structure FlatGrammar           from "../backend-common/FlatGrammar"
import structure Value                 from "Value"
import structure MkAbstractCodeGrammar from "MkAbstractCodeGrammar"
import structure MkCodeGenPhase        from "MkCodeGenPhase"

functor MkBackendStockwerk(structure ComponentManager:
			       COMPONENT_MANAGER
				   where type component = Component.t
			   structure Switches: SWITCHES): PHASE =
    let
	structure AbstractCodeGrammar = MkAbstractCodeGrammar(Value)
	structure CodeGenPhase = MkCodeGenPhase(AbstractCodeGrammar)

	__primitive val cast: AbstractCodeGrammar.t -> Component.t =
	    "Unsafe.cast"

	fun translate () x =
	    let
		val component = cast (CodeGenPhase.translate () x)
		(*--** eval needs to enrich the environment *)
		fun eval url = ignore (ComponentManager.eval (url, component))
	    in
		Target.COMPONENT {component = fn () => component, eval}
	    end
    in
	MkTracingPhase(structure Phase =
			   struct
			       structure C = EmptyContext
			       structure I = FlatGrammar
			       structure O = Target

			       val translate = translate
			   end
		       structure Switches = Switches
		       val name = "Generating Abstract Code")
    end
