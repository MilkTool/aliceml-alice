(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2000-2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Reflect               from "../../lib/system/Reflect"
import structure Component             from "../../lib/system/Component"
import signature COMPONENT_MANAGER
    from "../../lib/system/COMPONENT_MANAGER-sig"
import signature SWITCHES              from "../infrastructure/SWITCHES-sig"
import signature PHASE                 from "../infrastructure/PHASE-sig"
import structure MkTracingPhase        from "../infrastructure/MkTracingPhase"
import structure Target                from "../infrastructure/Target"
import structure StampMap              from "../common/StampMap"
import structure Value                 from "Value"
import structure MkAbstractCodeGrammar from "MkAbstractCodeGrammar"
import structure MkCodeGenPhase        from "MkCodeGenPhase"

functor MkBackendStockwerk(structure ComponentManager:
			       COMPONENT_MANAGER
				   where type component = Component.t
			   structure Switches: SWITCHES): PHASE =
    let
	structure AbstractCodeGrammar = MkAbstractCodeGrammar(Value)
	structure CodeGenPhase = MkCodeGenPhase(AbstractCodeGrammar)

	type value = AbstractCodeGrammar.value
	__primitive val cast: value -> Component.t = "Unsafe.cast"
	__primitive val selTuple: Reflect.value * int -> value =
	    "Unsafe.selTuple"

	structure ThePhase =
	    struct
		structure C = CodeGenPhase.C
		structure I = CodeGenPhase.I
		structure O = Target

		fun translate context x =
		    let
			val (value, exportDesc) =
			    CodeGenPhase.translate context x
			val component = cast value
			fun eval url =
			    let
				val str =
				    ComponentManager.eval (url, component)
			    in
				Vector.appi
				    (fn (i, stamp) =>
					StampMap.insert
					    (context, stamp,
					     selTuple (str, i)))
				    (exportDesc, 0, NONE)
			    end
		    in
			Target.COMPONENT {component = fn () => component, eval}
		    end
	    end
    in
	MkTracingPhase(structure Phase = ThePhase
		       structure Switches = Switches
		       val name = "Code Generation")
    end
