(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2000-2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Url                      from "../../lib/utility/Url"
import structure PrettyPrint              from "../../lib/utility/PrettyPrint"
import signature SWITCHES                 from "../infrastructure/SWITCHES-sig"
import structure Source                   from "../infrastructure/Source"
import structure ComposePhases
    from "../infrastructure/ComposePhases"
import structure MkTracingPhase
    from "../infrastructure/MkTracingPhase"
import structure MkResultDumpingPhase
    from "../infrastructure/MkResultDumpingPhase"
import structure MkContextDumpingPhase
    from "../infrastructure/MkContextDumpingPhase"
import structure FlatGrammar     from "FlatGrammar"
import structure OutputFlatGrammar        from "OutputFlatGrammar"
import structure MkFlatteningPhase        from "MkFlatteningPhase"
import structure ValuePropagationPhase    from "ValuePropagationPhase"
import structure MkLivenessAnalysisPhase  from "MkLivenessAnalysisPhase"

functor MkBackendCommon(val loadSign: Source.desc * Url.t -> FlatGrammar.sign
			structure Switches: SWITCHES) =
    let
	structure Phase1 =
	    MkFlatteningPhase(val loadSign = loadSign
			      structure Switches = Switches)
	structure Phase1 =
	    MkTracingPhase(structure Phase = Phase1
			   structure Switches = Switches
			   val name = "Flattening")
	structure Phase1 =
	    MkResultDumpingPhase(
		structure Phase = Phase1
		structure Switches = Switches
		val header = "Flat Syntax"
		val pp = PrettyPrint.text o OutputFlatGrammar.componentToString
		val switch = Switches.Debug.dumpFlatteningResult)
	structure BackendCommon = Phase1

	structure Phase2 =
	    MkTracingPhase(structure Phase = ValuePropagationPhase
			   structure Switches = Switches
			   val name = "Value Propagation")
	structure Phase2 =
	    MkContextDumpingPhase(
		structure Phase = Phase2
		structure Switches = Switches
		val header = "Environment after value propagation"
		val pp = ValuePropagationPhase.dumpContext
		val switch = Switches.Debug.dumpValuePropagationContext)
	structure Phase2 =
	    MkResultDumpingPhase(
		structure Phase = Phase2
		structure Switches = Switches
		val header = "Propagated Syntax"
		val pp = PrettyPrint.text o OutputFlatGrammar.componentToString
		val switch = Switches.Debug.dumpValuePropagationResult)
	structure BackendCommon =
	    ComposePhases(structure Phase1 = BackendCommon
			  structure Phase2 = Phase2)

	structure Phase3 = MkLivenessAnalysisPhase(Switches)

	structure BackendCommon =
	    ComposePhases(structure Phase1 = BackendCommon
			  structure Phase2 = Phase3)
    in
	BackendCommon
    end
