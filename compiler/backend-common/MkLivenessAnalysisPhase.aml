(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 1999-2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

(*
 * This file implements liveness analysis.  Its effect is to annotate
 * all statements in a program with liveness information, i.e., the
 * associated kill-sets (see below).  It does so in two phases:  First
 * the use-sets of all statements are computed (and annotated) during
 * a backwards traversal of the code.  Then the kill-sets are - in a
 * forward traversal of the code - computed from the annotated use-set
 * and the def-set of each statement.  The def-set is not annotated,
 * it is computed as we go along.
 *
 * Definitions:
 *
 * The /use-set/ of a statement S is the set of all identifiers that may
 * be referenced on any path starting from and including S and that have
 * already been initialized on (all) paths to S.
 *
 * The /def-set/ of a statement S is the set of all identifiers that will
 * already have been initialized upon reaching S.
 *
 * The /kill-set/ of a statement S is the set of identifiers that will not
 * be referenced in any path starting from S, and that are not in the
 * kill-set of any statement on a path leading to S.
 *)

import structure PrettyPrint             from "../../lib/utility/PrettyPrint"
import structure Crash                   from "../infrastructure/Crash"
import signature SWITCHES                from "../infrastructure/SWITCHES-sig"
import structure ComposePhases           from "../infrastructure/ComposePhases"
import structure MkTracingPhase
    from "../infrastructure/MkTracingPhase"
import structure MkResultDumpingPhase
    from "../infrastructure/MkResultDumpingPhase"
import structure EmptyContext            from "../infrastructure/EmptyContext"
import structure Stamp                   from "../common/Stamp"
import structure StampSet                from "../common/StampSet"
import signature FLAT_GRAMMAR            from "FLAT_GRAMMAR-sig"
import structure FlatGrammar             from "FlatGrammar"
import structure OutputFlatGrammar       from "OutputFlatGrammar"
import signature LIVENESS_ANALYSIS_PHASE from "LIVENESS_ANALYSIS_PHASE-sig"

structure LivenessAnalysisPhase1 :>
    LIVENESS_ANALYSIS_PHASE where type C.t = unit =
    struct
	structure C = EmptyContext
	structure I = FlatGrammar
	structure O = FlatGrammar

	open I

	(* Annotate `use' set at each statement *)

	datatype 'a lazyCopy =
	    Orig of 'a
	  | Copy of 'a

	fun lazyValOf (Orig x) = x
	  | lazyValOf (Copy x) = x

	fun processArgs (OneArg id, lset, f) = f (lset, id)
	  | processArgs (TupArgs ids, lset, f) =
	    Vector.foldl (fn (id, lset) => f (lset, id)) lset ids
	  | processArgs (ProdArgs labIdVec, lset, f) =
	    Vector.foldl (fn ((_, id), lset) => f (lset, id)) lset labIdVec

	fun delDef (lset as (Orig set), IdDef (Id (_, stamp, _))) =
	    if StampSet.member (set, stamp) then
		let
		    val set' = StampSet.clone set
		in
		    StampSet.delete (set', stamp);
		    Copy set'
		end
	    else lset
	  | delDef (lset as (Copy set), IdDef (Id (_, stamp, _))) =
	    (StampSet.delete (set, stamp); lset)
	  | delDef (lset, Wildcard) = lset

	fun delDefVec (lset, idDefs) =
	    Vector.foldl (fn (idDef, lset) => delDef (lset, idDef)) lset idDefs

	fun ins (lset as (Orig set), Id (_, stamp, _)) =
	    if StampSet.member (set, stamp) then lset
	    else
		let
		    val set' = StampSet.clone set
		in
		    StampSet.insert (set', stamp);
		    Copy set'
		end
	  | ins (lset as (Copy set), Id (_, stamp, _)) =
	    (StampSet.insert (set, stamp); lset)

	fun insVec (lset, ids) =
	    Vector.foldl (fn (id, lset) => ins (lset, id)) lset ids

	fun union (lset as (Copy set), lset') =
	    (StampSet.union (set, lazyValOf lset'); lset)
	  | union (lset', lset as (Copy set)) =
	    (StampSet.union (set, lazyValOf lset'); lset)
	  | union (Orig set, lset') =
	    union (Copy (StampSet.clone set), lset')

	fun setInfo ({liveness = ref (Use _), ...}: stm_info, _) =
	    raise Crash.Crash "LivenessAnalysisPhase1.setInfo"
	  | setInfo ({liveness, ...}: stm_info, lset) =
	    let
		val set = lazyValOf lset
	    in
		liveness := Use set; Orig set
	    end

	fun scanBody (ValDec (info, idDef, exp)::stms, set) =
	    setInfo (info, scanExp (exp, delDef (scanBody (stms, set), idDef)))
	  | scanBody (RefDec (info, idDef, id)::stms, set) =
	    setInfo (info, ins (delDef (scanBody (stms, set), idDef), id))
	  | scanBody (TupDec (info, idDefs, id)::stms, set) =
	    let
		val lset =
		    Vector.foldr (fn (idDef, lset) => delDef (lset, idDef))
		    (scanBody (stms, set)) idDefs
	    in
		setInfo (info, ins (lset, id))
	    end
	  | scanBody (ProdDec (info, labelIdDefVec, id)::stms, set) =
	    let
		val lset =
		    Vector.foldr
		    (fn ((_, idDef), lset) => delDef (lset, idDef))
		    (scanBody (stms, set)) labelIdDefVec
	    in
		setInfo (info, ins (lset, id))
	    end
	  | scanBody ([RaiseStm (info, Id (_, stamp, _))], _) =
	    let
		val set = StampSet.new ()
		val _ = StampSet.insert (set, stamp)
	    in
		setInfo (info, Copy set)
	    end
	  | scanBody ([ReraiseStm (info, Id (_, stamp, _))], _) =
	    let
		val set = StampSet.new ()
		val _ = StampSet.insert (set, stamp)
	    in
		setInfo (info, Copy set)
	    end
	  | scanBody ([TryStm (info, tryBody, idDef1, idDef2, handleBody)],
		      set) =
	    let
		val lset2 =
		    delDef (delDef (scanBody (handleBody, set), idDef1),
			    idDef2)
		val lset1 = scanBody (tryBody, lazyValOf lset2)
	    in
		setInfo (info, union (lset1, lset2))
	    end
	  | scanBody ([EndTryStm (info, body)], set) =
	    setInfo (info, scanBody (body, set))
	  | scanBody ([EndHandleStm (info, body)], set) =
	    setInfo (info, scanBody (body, set))
	  | scanBody ([TestStm (info, id, tests, body)], set) =
	    setInfo (info, ins (union (scanTests (tests, set),
				       scanBody (body, set)), id))
	  | scanBody ([SharedStm ({liveness = ref (Use set'), ...}, _, _)],
		      set) =
	    let
		val set'' = StampSet.clone set'
	    in
		StampSet.app (fn stamp => StampSet.insert (set'', stamp)) set;
		Copy set''
	    end
	  | scanBody ([SharedStm (info, body, _)], set) =
	    setInfo (info, scanBody (body, set))
	  | scanBody ([ReturnStm (info, exp)], set) =
	    setInfo (info, scanExp (exp, Copy (StampSet.clone set)))
	  | scanBody ([IndirectStm (info, ref bodyOpt)], set) =
	    setInfo (info, scanBody (valOf bodyOpt, set))
	  | scanBody ([ExportStm (info, exp)], set) =
	    setInfo (info, scanExp (exp, Copy (StampSet.clone set)))
	  | scanBody (_, _) =
	    raise Crash.Crash "LivenessAnalysisPhase1.scanStm"
	and scanTests (LitTests litBodyVec, set) =
	    (*--** this and the following folds can be improved *)
	    Vector.foldl (fn ((_, body), lset) =>
			     union (lset, scanBody (body, set)))
	    (Copy (StampSet.new ())) litBodyVec
	  | scanTests (TagTests tagBodyVec, set) =
	    Vector.foldl (fn ((_, _, args, body), lset) =>
			  let
			      val lset' = scanBody (body, set)
			      val lset' = processArgs (args, lset', delDef)
			  in
			      union (lset, lset')
			  end) (Copy (StampSet.new ())) tagBodyVec
	  | scanTests (ConTests conBodyVec, set) =
	    Vector.foldl (fn ((id, args, body), lset) =>
			  let
			      val lset' = scanBody (body, set)
			      val lset' = ins (lset', id)
			      val lset' = processArgs (args, lset', delDef)
			  in
			      union (lset, lset')
			  end) (Copy (StampSet.new ())) conBodyVec
	  | scanTests (VecTests vecBodyVec, set) =
	    Vector.foldl (fn ((idDefs, body), lset) =>
			  let
			      val lset' = scanBody (body, set)
			      val lset' = delDefVec (lset', idDefs)
			  in
			      union (lset, lset')
			  end) (Copy (StampSet.new ())) vecBodyVec
	and scanExp (LitExp (_, _), lset) = lset
	  | scanExp (PrimExp (_, _), lset) = lset
	  | scanExp (NewExp (_, _), lset) = lset
	  | scanExp (VarExp (_, id), lset) = ins (lset, id)
	  | scanExp (TagExp (_, _, _, args), lset) =
	    processArgs (args, lset, ins)
	  | scanExp (ConExp (_, id, args), lset) =
	    processArgs (args, ins (lset, id), ins)
	  | scanExp (RefExp (_, id), lset) = ins (lset, id)
	  | scanExp (TupExp (_, ids), lset) = insVec (lset, ids)
	  | scanExp (ProdExp (_, labIdVec), lset) =
	    Vector.foldl (fn ((_, id), lset) => ins (lset, id)) lset labIdVec
	  | scanExp (VecExp (_, ids), lset) = insVec (lset, ids)
	  | scanExp (FunExp (_, _, _, args, body), lset) =
	    processArgs (args, union (lset, scanBody (body, StampSet.new ())),
			 delDef)
	  | scanExp (PrimAppExp (_, _, ids), lset) = insVec (lset, ids)
	  | scanExp (VarAppExp (_, id, args), lset) =
	    processArgs (args, ins (lset, id), ins)
	  | scanExp (SelAppExp (_, _, _, _, id), lset) = ins (lset, id)
	  | scanExp (LazySelAppExp (_, _, _, _, id), lset) = ins (lset, id)
	  | scanExp (FunAppExp (_, id, _, args), lset) =
	    processArgs (args, ins (lset, id), ins)
	  | scanExp (FailExp _, lset) = lset

	fun translate () (_, component as (_, body, _, _)) =
	    (scanBody (body, StampSet.new ()); component)
    end

structure LivenessAnalysisPhase2 :>
    LIVENESS_ANALYSIS_PHASE where type C.t = unit =
    struct
	structure C = EmptyContext
	structure I = FlatGrammar
	structure O = FlatGrammar

	open I

	(* Annotate `kill' set at each statement *)

	fun processArgs (OneArg id, set, f) = f (set, id)
	  | processArgs (TupArgs ids, set, f) =
	    Vector.app (fn id => f (set, id)) ids
	  | processArgs (ProdArgs labIdVec, set, f) =
	    Vector.app (fn (_, id) => f (set, id)) labIdVec

	fun insDef (set, IdDef (Id (_, stamp, _))) =
	    StampSet.insert (set, stamp)
	  | insDef (set, Wildcard) = ()

	fun insDefVec (set, idDefs) =
	    Vector.app (fn idDef => insDef (set, idDef)) idDefs

	fun initStm (ValDec (_, idDef, exp), defSet) =
	    (insDef (defSet, idDef); initExp exp)
	  | initStm (RefDec (_, idDef, _), defSet) = insDef (defSet, idDef)
	  | initStm (TupDec (_, idDefs, _), defSet) =
	    Vector.app (fn idDef => insDef (defSet, idDef)) idDefs
	  | initStm (ProdDec (_, labelIdDefVec, _), defSet) =
	    Vector.app (fn (_, idDef) => insDef (defSet, idDef)) labelIdDefVec
	  | initStm (RaiseStm (_, _), _) = ()
	  | initStm (ReraiseStm (_, _), _) = ()
	  | initStm (TryStm (_, tryBody, idDef1, idDef2, handleBody), defSet) =
	    (initBody (tryBody, StampSet.clone defSet);
	     insDef (defSet, idDef1); insDef (defSet, idDef2);
	     initBody (handleBody, defSet))
	  | initStm (EndTryStm (_, body), defSet) = initBody (body, defSet)
	  | initStm (EndHandleStm (_, body), defSet) = initBody (body, defSet)
	  | initStm (TestStm (_, _, tests, body), defSet) =
	    (initTests (tests, defSet); initBody (body, defSet))
	  | initStm (SharedStm ({liveness = ref (Kill _), ...}, _, _), _) = ()
	  | initStm (SharedStm (_, body, _), defSet) = initBody (body, defSet)
	  | initStm (ReturnStm (_, exp), _) = initExp exp
	  | initStm (IndirectStm (_, ref bodyOpt), defSet) =
	    initBody (valOf bodyOpt, defSet)
	  | initStm (ExportStm (_, _), _) = ()
	and initTests (LitTests litBodyVec, defSet) =
	    Vector.app (fn (_, body) => initBody (body, StampSet.clone defSet))
	    litBodyVec
	  | initTests (TagTests tagBodyVec, defSet) =
	    Vector.app (fn (_, _, args, body) =>
			let
			    val defSet' = StampSet.clone defSet
			in
			    processArgs (args, defSet', insDef);
			    initBody (body, defSet')
			end) tagBodyVec
	  | initTests (ConTests conBodyVec, defSet) =
	    Vector.app (fn (_, args, body) =>
			let
			    val defSet' = StampSet.clone defSet
			in
			    processArgs (args, defSet', insDef);
			    initBody (body, defSet')
			end) conBodyVec
	  | initTests (VecTests vecBodyVec, defSet) =
	    Vector.app (fn (idDefs, body) =>
			let
			    val defSet' = StampSet.clone defSet
			in
			    insDefVec (defSet', idDefs);
			    initBody (body, defSet')
			end) vecBodyVec
	and initExp (FunExp (_, _, _, args, body)) =
	    let
		val defSet = StampSet.new ()
	    in
		processArgs (args, defSet, insDef); initBody (body, defSet)
	    end
	  | initExp _ = ()
	and initBody (stm::stms, defSet) =
	    (case #liveness (infoStm stm) of
		 ref Unknown =>
		     raise Crash.Crash "LivenessAnalysisPhase2.initBody"
	       | r as ref (Use useSet) =>
		     let
			 val killSet = StampSet.new ()
		     in
			 (* killSet = difference (defSet, useSet) *)
			 StampSet.app
			 (fn stamp =>
			  if StampSet.member (useSet, stamp) then ()
			  else StampSet.insert (killSet, stamp)) defSet;
			 StampSet.app
			 (fn stamp => StampSet.delete (defSet, stamp)) killSet;
			 initStm (stm, defSet);
			 r := Kill killSet;
			 initBody (stms, defSet)
		     end
	       | ref (Kill _) => ())
	  | initBody (nil, _) = ()

	fun translate () (_, component as (importDesc, body, _, _)) =
	    let
		val defSet = StampSet.new ()
	    in
		Vector.app (fn (idDef, _, _) =>
			       case idDef of
				   IdDef (Id (_, stamp, _)) =>
				       StampSet.insert (defSet, stamp)
				 | Wildcard => ()) importDesc;
		initBody (body, StampSet.clone defSet);
		component
	    end
    end

functor MkLivenessAnalysisPhase(Switches: SWITCHES) =
    let
	structure Phase1 =
	    MkTracingPhase(structure Phase = LivenessAnalysisPhase1
			   structure Switches = Switches
			   val name = "Liveness Analysis - Pass 1")
	structure Phase1 =
	    MkResultDumpingPhase(
		structure Phase = Phase1
		structure Switches = Switches
		val header = "Live Syntax with `use' sets"
		val pp = PrettyPrint.text o OutputFlatGrammar.componentToString
		val switch = Switches.Debug.dumpLivenessAnalysisIntermediate)

	structure Phase2 =
	    MkTracingPhase(structure Phase = LivenessAnalysisPhase2
			   structure Switches = Switches
			   val name = "Liveness Analysis - Pass 2")
	structure Phase2 =
	    MkResultDumpingPhase(
		structure Phase = Phase2
		structure Switches = Switches
		val header = "Live Syntax with `kill' sets"
		val pp = PrettyPrint.text o OutputFlatGrammar.componentToString
		val switch = Switches.Debug.dumpLivenessAnalysisResult)
    in
	ComposePhases(structure Phase1 = Phase1
		      structure Phase2 = Phase2)
    end
