(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 1999-2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Url                 from "../../lib/system/Url"
import structure Name                from "../../lib/rtt/Name"
import structure Label               from "../../lib/rtt/Label"
import structure Type                from "../../lib/rtt/Type"
import structure Crash               from "../infrastructure/Crash"
import structure Source              from "../infrastructure/Source"
import structure Stamp               from "../common/Stamp"
import structure StampSet            from "../common/StampSet"
import structure IntermediateGrammar from "../common/IntermediateGrammar"
import signature FLAT_GRAMMAR        from "FLAT_GRAMMAR-sig"

structure FlatGrammar :> FLAT_GRAMMAR =
    struct
	(* Annotations *)

	type id_info = Source.region
	type stm_info = Source.region
	type exp_info = Source.region

	(* Statements and Expressions *)

	datatype lit = datatype IntermediateGrammar.lit

	type stamp = Stamp.t
	type name = Name.t
	type label = Label.t

	datatype id = Id of id_info * Stamp.t * Name.t

	datatype idDef =
	    IdDef of id
	  | Wildcard

	datatype idRef =
	    IdRef of id
	  | LastIdRef of id
	  | Lit of lit
	  | Prim of string

	datatype funFlag =
	    PrintName of string
	  | AuxiliaryOf of stamp
	  | IsToplevel

	datatype 'a args =
	    OneArg of 'a
	  | TupArgs of 'a vector
	  | ProdArgs of (label * 'a) vector
	    (* sorted, all labels distinct, no tuple *)

	datatype prod =
	    Tuple of int
	  | Product of label vector

	datatype stm =
	  (* the following may never be last *)
	    LastUse of stm_info * id vector
	  | ValDec of stm_info * idDef * exp
	  | RefDec of stm_info * idDef * idRef
	  | TupDec of stm_info * idDef vector * idRef
	  | ProdDec of stm_info * (label * idDef) vector * idRef
	    (* sorted, all labels distinct, no tuple *)
	  (* the following must always be last *)
	  | RaiseStm of stm_info * idRef
	  | ReraiseStm of stm_info * idRef
	  | TryStm of stm_info * body * idDef * idDef * body
	  | EndTryStm of stm_info * body
	  | EndHandleStm of stm_info * body
	    (* all bodies of EndTryStm/EndHandleStm corresponding to an
	     * exception handler are identical (and - if necessary - are
	     * marked by a SharedStm node) *)
	  | TestStm of stm_info * idRef * tests * body
	  | SharedStm of stm_info * body * stamp
	  | ReturnStm of stm_info * exp
	  | IndirectStm of stm_info * body option ref
	  | ExportStm of stm_info * exp
	and tests =
	    LitTests of (lit * body) vector
	  | TagTests of (label * int * idDef args * body) vector
	  | ConTests of (idRef * idDef args * body) vector
	  | VecTests of (idDef vector * body) vector
	and exp =
	    NewExp of exp_info * Name.t
	  | VarExp of exp_info * idRef
	  | TagExp of exp_info * label * int * idRef args
	  | ConExp of exp_info * idRef * idRef args
	  | RefExp of exp_info * idRef
	  | TupExp of exp_info * idRef vector
	  | ProdExp of exp_info * (label * idRef) vector
	    (* sorted, all labels distinct, no tuple *)
	  | PolyProdExp of exp_info * (label * idRef) vector
	    (* sorted, all labels distinct *)
	  | VecExp of exp_info * idRef vector
	  | FunExp of exp_info * stamp * funFlag list * idDef args * body
	  | PrimAppExp of exp_info * string * idRef vector       (* exact *)
	  | VarAppExp of exp_info * idRef * idRef args
	  | SelExp of exp_info * prod * label * int * idRef
	  | LazyPolySelExp of exp_info * label * idRef
	  | FunAppExp of exp_info * idRef * stamp * idRef args   (* exact *)
	  | FailExp of exp_info
	withtype body = stm list

	type sign = IntermediateGrammar.sign
	type component =
	     {imports: (id * sign * Url.t * bool) vector,
	      body: body,
	      exports: (label * id) vector,
	      sign: sign}
	type t = component

	fun freshId info = Id (info, Stamp.new (), Name.InId)

	fun infoStm (LastUse (info, _)) = info
	  | infoStm (ValDec (info, _, _)) = info
	  | infoStm (RefDec (info, _, _)) = info
	  | infoStm (TupDec (info, _, _)) = info
	  | infoStm (ProdDec (info, _, _)) = info
	  | infoStm (RaiseStm (info, _)) = info
	  | infoStm (ReraiseStm (info, _)) = info
	  | infoStm (TryStm (info, _, _, _, _)) = info
	  | infoStm (EndTryStm (info, _)) = info
	  | infoStm (EndHandleStm (info, _)) = info
	  | infoStm (TestStm (info, _, _, _)) = info
	  | infoStm (SharedStm (info, _, _)) = info
	  | infoStm (ReturnStm (info, _)) = info
	  | infoStm (IndirectStm (info, _)) = info
	  | infoStm (ExportStm (info, _)) = info

	fun litEq (IntLit i1, IntLit i2) = i1 = i2
	  | litEq (WordLit w1, WordLit w2) = w1 = w2
	  | litEq (CharLit c1, CharLit c2) = c1 = c2
	  | litEq (StringLit s1, StringLit s2) = s1 = s2
	  | litEq (RealLit r1, RealLit r2) = Real.== (r1, r2)
	  | litEq (_, _) = raise Crash.Crash "IntermediateAux.litEq"
    end
