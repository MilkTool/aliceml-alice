(*
 * Author:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Url               from "../../lib/utility/Url"
import structure Source            from "../infrastructure/Source"
import signature SWITCHES          from "../infrastructure/SWITCHES-sig"
import signature PHASE             from "../infrastructure/PHASE-sig"
import structure ComposePhases'    from "../infrastructure/ComposePhases"
import structure MkTracingPhase    from "../infrastructure/MkTracingPhase"
import structure MkResultDumpingPhase
				   from "../infrastructure/MkResultDumpingPhase"

import structure PPAbstractGrammar from "../frontend-common/AbstractGrammar"
import structure BindEnv           from "BindEnv"
import structure MkParsingPhase    from "MkParsingPhase"
import structure MkAbstractionPhase
       type sig_loader             from "MkAbstractionPhase"


functor MkFrontendSML(
		val loadSig :        sig_loader
		structure Switches : SWITCHES
	) : PHASE =
    let
	structure Phase1 =
		  MkTracingPhase(
			structure Phase    = MkParsingPhase(Switches)
			structure Switches = Switches
			val name = "Parsing"
		  )
	structure Phase2 =
		  MkTracingPhase(
			structure Phase    =
			    MkAbstractionPhase(val loadSig = loadSig
					       structure Switches = Switches)
			structure Switches = Switches
			val name = "Abstraction"
		  )
	structure Phase2' =
		  MkResultDumpingPhase(
			structure Phase    = Phase2
			structure Switches = Switches
			val header = "Abstract Syntax"
			val pp     = PPAbstractGrammar.ppComp
			val switch = Switches.Debug.dumpAbstractionResult
		  )
    in
	ComposePhases'(
	    structure Phase1  = Phase1
	    structure Phase2  = Phase2'
	    structure Context = BindEnv
	    fun context1 E    = ()
	    fun context2 E    = E
	)
    end
