(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2000-2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure TextIO            from "../../lib/system/TextIO"
import signature COMPONENT_MANAGER from "../../lib/system/COMPONENT_MANAGER-sig"
import structure Component         from "../../lib/system/Component"
import structure Url               from "../../lib/system/Url"
import structure Source            from "../infrastructure/Source"
import signature SWITCHES          from "../infrastructure/SWITCHES-sig"
import signature PHASE             from "../infrastructure/PHASE-sig"
import structure EmptyContext      from "../infrastructure/EmptyContext"
import structure MkTracingPhase    from "../infrastructure/MkTracingPhase"
import structure Target            from "../infrastructure/Target"
import structure FlatGrammar       from "../backend-common/FlatGrammar"
import structure CodeGenPhase      from "CodeGenPhase"

functor MkBackendMozart(structure ComponentManager: COMPONENT_MANAGER
			    where type component = Component.t
			structure Switches: SWITCHES): PHASE =
    let
	fun parseUrl NONE = NONE   (*--** use OS.Path.fromUrl *)
	  | parseUrl (SOME url) =
	    case (Url.getScheme url, Url.getAuthority url) of
		(NONE, NONE) =>
		    SOME (Url.toStringRaw url)
	      | (SOME "file", NONE) =>
		    SOME (Url.toStringRaw (Url.setScheme (url, NONE)))
	      | _ => NONE

	fun eval x baseUrl =
	    let
		val component = CodeGenPhase.component x
		val str = ComponentManager.eval (baseUrl, component)
	    in
		CodeGenPhase.eval (x, str);
		str
	    end

	structure ThePhase =
	    struct
		structure C =
		    struct
			type t
			open CodeGenPhase.C
		    end
		structure I = FlatGrammar
		structure O = Target

		fun translate env (desc, component) =
		    let
			val x = CodeGenPhase.translate (env, desc, component)
		    in
			case parseUrl (Source.url desc) of
			    SOME filename =>
				if !Switches.Debug.dumpTarget then
				    let
					val q =
					    TextIO.openOut (filename ^ ".ozm")
				    in
					TextIO.output
					    (q, CodeGenPhase.dumpTarget x);
					    TextIO.closeOut q
				    end
				else ()
			  | NONE => ();   (*--** dump to stdout *)
			Target.COMPONENT
			    {component = fn () => CodeGenPhase.component x,
			     eval = eval x}
		    end
	    end
    in
	MkTracingPhase(structure Phase = ThePhase
		       structure Switches = Switches
		       val name = "Code Generation")
    end
