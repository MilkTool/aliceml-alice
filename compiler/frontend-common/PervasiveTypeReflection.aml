(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Name                      from "../../lib/rtt/Name"
import structure Label                     from "../../lib/rtt/Label"
import structure Type                      from "../../lib/rtt/Type"
import structure PervasiveType             from "../../lib/rtt/PervasiveType"
import signature PERVASIVE_TYPE_REFLECTION from "PERVASIVE_TYPE_REFLECTION-sig"

structure PervasiveTypeReflection :> PERVASIVE_TYPE_REFLECTION =
struct

  (* The module *)

    val modname_pervasiveType	= Name.ExId "PervasiveType"
    structure PervasiveType	= PervasiveType			(* verify *)


  (* Operations *)

    type typ = Type.t
    type con = Type.con

    val lab_typ_ref	= Label.fromString "typ_ref"
    val _		= PervasiveType.typ_ref : typ		(* verify *)
    val lab_lookup	= Label.fromString "lookup"
    val _		= PervasiveType.lookup : string -> con	(* verify *)
end
