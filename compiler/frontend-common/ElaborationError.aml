(*
 * Author:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Fixity            from "../../lib/rtt/Fixity"
import structure Name              from "../../lib/rtt/Name"
import structure Label             from "../../lib/rtt/Label"
import structure Stamp             from "../common/Stamp"
import structure Type              from "../../lib/rtt/Type"
import structure Inf               from "../../lib/rtt/Inf"
import structure AbstractGrammar   from "AbstractGrammar"

import structure PrettyPrint       from "../../lib/utility/PrettyPrint"
import structure PPMisc            from "../infrastructure/PPMisc"
import structure PPPath            from "../../lib/rtt/PPPath"
import structure PPType            from "../../lib/rtt/PPType"
import structure PPInf             from "../../lib/rtt/PPInf"

import structure Error             from "../infrastructure/Error"
import signature ELABORATION_ERROR from "ELABORATION_ERROR-sig"


structure ElaborationError :> ELABORATION_ERROR =
struct

  (* Pretty printer *)

    open PrettyPrint
    open PPMisc

    infixr ^^ ^/^

  (* Types *)

    type lab       = Label.t
    type typ       = Type.t
    type var       = Type.var
    type kind      = Type.kind
    type inf	   = Inf.t
    type fix       = Fixity.t
    type valid     = AbstractGrammar.valid
    type modlongid = AbstractGrammar.modlongid

    type unify_error  = typ * typ * typ * typ
    type inf_mismatch = Inf.mismatch

    datatype error =
	(* Expressions *)
	  NewExpTyp		of typ
	| NewExpResTyp		of typ
	| VecExpUnify		of unify_error
	| TagExpLab		of lab
	| TagExpArgUnify	of unify_error
	| TagExpRowUnify	of unify_error
	| ConExpConUnify	of unify_error
	| ConExpArgUnify	of unify_error
	| UpdExpUnify		of unify_error
	| SelExpUnify		of unify_error
	| AppExpFunUnify	of unify_error
	| AppExpArgUnify	of unify_error
	| AndExpUnify		of unify_error
	| OrExpUnify		of unify_error
	| IfExpCondUnify	of unify_error
	| IfExpBranchUnify	of unify_error
	| RaiseExpUnify		of unify_error
	| HandleExpUnify	of unify_error
	| AnnExpUnify		of unify_error
	| MatPatUnify		of unify_error
	| MatExpUnify		of unify_error
	(* Patterns *)
	| TagPatLab		of lab
	| TagPatArgUnify	of unify_error
	| TagPatRowUnify	of unify_error
	| ConPatConUnify	of unify_error
	| ConPatArgUnify	of unify_error
	| VecPatUnify		of unify_error
	| AsPatUnify		of unify_error
	| AltPatUnify		of unify_error
	| GuardPatUnify		of unify_error
	| AnnPatUnify		of unify_error
	(* Types *)
	| JokTyp
	| JokTypRow
	| StarTypKind		of kind
	| AppTypFunKind		of kind
	| AppTypArgKind		of kind * kind
	| RefTypKind		of kind
	| PervasiveTypUnknown	of string
	(* Declarations *)
	| ValDecUnify		of unify_error
	| ValDecLift		of valid * var
	(* Long ids *)
	| ModlongidInf		of modlongid * inf
	(* Modules *)
	| StrModUnclosed	of lab * typ
	| SelModInf		of inf
	| AppModFunMismatch	of inf
	| AppModArgMismatch	of inf_mismatch
	| AnnModMismatch	of inf_mismatch
	(* Interfaces *)
	| GroundInfKind		of Inf.kind
	| AppInfFunMismatch	of inf
	| AppInfArgMismatch	of inf_mismatch
	| InterInfMismatch	of inf_mismatch
	| SingInfPath
	| PervasiveInfUnknown	of string
	(* Imports *)
	| ImpMismatch		of inf_mismatch
	(* Components *)
	| CompUnclosed		of lab * typ

    datatype warning =
	(* Imports *)
	  ValImpUnused		of lab
	| TypImpUnused		of lab
	| ModImpUnused		of lab
	| InfImpUnused		of lab
	(* Imports *)
	| NotGeneralized	of valid * typ


  (* Pretty printing *)

    fun ppQuoted s	= "`" ^ s ^ "'"

    fun ppLab'(AbstractGrammar.Lab(_,l)) = Label.toString l

    fun ppId'(AbstractGrammar.Id(_,_,n)) = Name.toString n
    fun ppId x = ppQuoted(ppId' x)

    fun ppLongid'(AbstractGrammar.ShortId(_,x))  = ppId' x
      | ppLongid'(AbstractGrammar.LongId(_,y,l)) = ppLongid' y ^ "." ^ ppLab' l
    fun ppLongid y = ppQuoted(ppLongid' y)

    fun ppLab l = Label.toString l

    val ppPath = PPPath.ppPath
    val ppTyp  = PPType.ppTyp
    val ppInf  = PPInf.ppInf

    open Fixity

    fun ppFix NONFIX		= text "nonfix"
      | ppFix(PREFIX n)		= text "prefix" ^/^ text(Int.toString n)
      | ppFix(POSTFIX n)	= text "postfix"^/^ text(Int.toString n)
      | ppFix(INFIX(n,LEFT))	= text "infix"  ^/^ text(Int.toString n)
      | ppFix(INFIX(n,RIGHT))	= text "infixr" ^/^ text(Int.toString n)
      | ppFix(INFIX(n,NEITHER))	= text "infixn" ^/^ text(Int.toString n)


    fun ppUnify2(d1, d2, (t1,t2,t3,t4)) =
	vbox(
	    d1 ^^ indent(PPType.ppTyp t1) ^^
	    d2 ^^ indent(PPType.ppTyp t2)
	)

    fun ppUnify4(d1, d2, (t1,t2,t3,t4)) =
	let
	    val td1 = PPType.ppTyp t1
	    val td2 = PPType.ppTyp t2
	    val td3 = PPType.ppTyp t3
	    val td4 = PPType.ppTyp t4
	in
	    if td3 = td1 andalso td4 = td2 then
		vbox(
		    d1 ^^ indent td1 ^^
		    d2 ^^ indent td2
		)
	    else
		vbox(
		    d1 ^^ indent td1 ^^
		    d2 ^^ indent td2 ^^
		    textpar["because","type"] ^^ indent td3 ^^
		    textpar["does","not","unify","with"] ^^ indent td4
		)
	end

    fun ppMismatch(d, im) =
        vbox(
	    d ^^
	    ppMismatch' im
	)

    and ppMismatch'(Inf.MissingFix l) =
	    break ^^
	    textpar["fixity","of",ppQuoted(ppLab l),"is","unspecified"]
      | ppMismatch'(Inf.MissingVal l) =
	    indent(textpar["val",ppLab l]) ^^
	    textpar["is","missing"]
      | ppMismatch'(Inf.MissingTyp l) =
	    indent(textpar["type",ppLab l]) ^^
	    textpar["is","missing"]
      | ppMismatch'(Inf.MissingMod l) =
	    indent(textpar["structure",ppLab l]) ^^
	    textpar["is","missing"]
      | ppMismatch'(Inf.MissingInf l) =
	    indent(textpar["signature",ppLab l]) ^^
	    textpar["is","missing"]
      | ppMismatch'(Inf.MismatchFix(l,q1,q2)) =
	    indent(par[ppFix q1,text(ppLab l)]) ^^
	    textpar["does","not","match"] ^^
	    indent(par[ppFix q2,text(ppLab l)])
      | ppMismatch'(Inf.MismatchVal(l,t1,t2)) =
	    indent(par[text"val",text(ppLab l),text":",ppTyp t1]) ^^
	    textpar["does","not","match"] ^^
	    indent(par[text"val",text(ppLab l),text":",ppTyp t2])
      | ppMismatch'(Inf.MismatchTyp(l,k1,k2)) =
	if not(Type.isSingKind k2) then
	    indent(textpar["type",ppLab l]) ^^
	    textpar["has","incompatible","arity"]
	else
	    indent(if Type.isSingKind k1
		   then par[text"type",text(ppLab l),text"=",
			    ppTyp(Type.asSingKind k1)]
		   else textpar["type",ppLab l]) ^^
	    textpar["does","not","match","specification"] ^^
	    indent(par[text"type",text(ppLab l),text"=",
		       ppTyp(Type.asSingKind k2)])
      | ppMismatch'(Inf.MismatchMod(l,im)) =
	    indent(textpar["structure",ppLab l]) ^^
	    textpar["does","not","match,","because"] ^^
	    ppMismatch' im
      | ppMismatch'(Inf.MismatchInf(l,im)) =
	    indent(textpar["signature",ppLab l]) ^^
	    textpar["does","not","match,","because"] ^^
	    ppMismatch' im
      | ppMismatch'(Inf.MismatchDom im) =
	    break ^^
	    textpar["argument","signature","is","too","restrictive,",
		"because"] ^^
	    ppMismatch' im
      | ppMismatch'(Inf.MismatchRan im) =
	    break ^^
	    textpar["result","signature","is","too","permissive,","because"] ^^
	    ppMismatch' im
      | ppMismatch'(Inf.MismatchArg im) =
	    break ^^
	    textpar["signature","argument","does","not","match,","because"] ^^
	    ppMismatch' im
      | ppMismatch'(Inf.Incompatible(j1,j2)) =
	    break ^^
	    textpar["signature"] ^^
	    indent(ppInf j1) ^^
	    textpar["is","incompatible","to"] ^^
	    indent(ppInf j2)
      | ppMismatch'(Inf.IncompatibleMod(p1,p2)) =
	    break ^^
	    textpar["module"] ^^
	    indent(ppPath p1) ^^
	    textpar["is","not","equal","to"] ^^
	    indent(ppPath p2)
      | ppMismatch'(Inf.IncompatibleKind(k1,k2)) =
	    break ^^
	    textpar["arity","is","incompatible"]


    fun ppUnclosed(d, (l,t)) =
	vbox(
	    d ^^
	    indent(
		fbox(nest(
		    text(Label.toString l) ^/^
		    text ":" ^/^
		    below(PPType.ppTyp t)
		))
	    ) ^^
	    textpar["contains","free","type","variable",
		    "or","unresolved","record","type"]
	)


    fun ppError(NewExpTyp t) =
	vbox(
	    textpar["new","constructor","is","not","of","function","type:"] ^^
	    indent(PPType.ppTyp t)
	)
      | ppError(NewExpResTyp t) =
	vbox(
	    textpar["type","is","not","extensible:"] ^^
	    indent(PPType.ppTyp t)
	)
      | ppError(VecExpUnify ue) =
	ppUnify2(
	  textpar["inconsistent","types","in","vector","expression:"],
	  textpar["does","not","agree","with","previous","element","type"], ue)
      | ppError(TagExpLab l) =
	  textpar["label",ppLab l,"is","not","contained","in","type"]
      | ppError(TagExpRowUnify ue) =
	ppUnify4(
	  textpar["constructor","type","and","tag","inconsistent:"],
	  textpar["does","not","match","argument","type"], ue)
      | ppError(TagExpArgUnify ue | ConExpArgUnify ue) =
	ppUnify4(
	  textpar["constructor","argument","type","mismatch:"],
	  textpar["does","not","match","argument","type"], ue)
      | ppError(ConExpConUnify ue) =
	ppUnify2(
	  textpar["applied","value","is","not","a","constructor","function:"],
	  textpar["does","not","match","function","type"], ue)
      | ppError(UpdExpUnify ue) =
	ppUnify4(
	  textpar["mismatch","on","record","update:"],
	  textpar["does","not","match","type"], ue)
      | ppError(SelExpUnify ue) =
	ppUnify2(
	  textpar["selection","type","mismatch:"],
	  textpar["does","not","match","record","type"], ue)
      | ppError(AppExpFunUnify ue) =
	ppUnify2(
	  textpar["applied","value","is","not","a","function:"],
	  textpar["does","not","match","function","type"], ue)
      | ppError(AppExpArgUnify ue) =
	ppUnify4(
	  textpar["argument","type","mismatch:"],
	  textpar["does","not","match","argument","type"], ue)
      | ppError(AndExpUnify ue) =
	ppUnify2(
	  textpar["operand","of","`andalso'","is","not","a","boolean:"],
	  textpar["does","not","match","type"], ue)
      | ppError(OrExpUnify ue) =
	ppUnify2(
	  textpar["operand","of","`orelse'","is","not","a","boolean:"],
	  textpar["does","not","match","type"], ue)
      | ppError(IfExpCondUnify ue) =
	ppUnify2(
	  textpar["operand","of","`if'","is","not","a","boolean:"],
	  textpar["does","not","match","type"], ue)
      | ppError(IfExpBranchUnify ue) =
	ppUnify4(
	  textpar["inconsistent","types","in","branches","of","`if':"],
	  textpar["does","not","agree","with","type"], ue)
      | ppError(RaiseExpUnify ue) =
	ppUnify2(
	  textpar["operand","of","`raise'","is","not","an","exception:"],
	  textpar["does","not","match","type"], ue)
      | ppError(HandleExpUnify ue) =
	ppUnify4(
	  textpar["inconsistent","types","in","branches","of","`handle':"],
	  textpar["does","not","agree","with","type"], ue)
      | ppError(AnnExpUnify ue) =
	ppUnify4(
	  textpar["expression","does","not","match","annotation:"],
	  textpar["does","not","match","type"], ue)
      | ppError(MatPatUnify ue) =
	ppUnify4(
	  textpar["inconsistent","types","in","`case'","patterns:"],
	  textpar["does","not","agree","with","previous","type"], ue)
      | ppError(MatExpUnify ue) =
	ppUnify4(
	  textpar["inconsistent","types","in","branches","of","`case':"],
	  textpar["does","not","agree","with","previous","type"], ue)
      (* Patterns *)
      | ppError(TagPatRowUnify ue) =
	ppUnify4(
	  textpar["constructor","type","and","tag","inconsistent:"],
	  textpar["does","not","match","argument","type"], ue)
      | ppError(TagPatLab l) =
	  textpar["label",ppLab l,"is","not","contained","in","type"]
      | ppError(TagPatArgUnify ue | ConPatArgUnify ue) =
	ppUnify4(
	  textpar["ill-typed","constructor","argument:"],
	  textpar["does","not","match","argument","type"], ue)
      | ppError(ConPatConUnify ue) =
	ppUnify2(
	  textpar["applied","identifier","is","not","a","constructor",
		  "function:"],
	  textpar["does","not","match","function","type"], ue)
      | ppError(VecPatUnify ue) =
	ppUnify2(
	  textpar["inconsistent","types","in","vector","pattern:"],
	  textpar["does","not","agree","with","previous","element","type"], ue)
      | ppError(AsPatUnify ue) =
	ppUnify4(
	  textpar["inconsistent","types","in","`as'","pattern:"],
	  textpar["does","not","agree","with","type"], ue)
      | ppError(AltPatUnify ue) =
	ppUnify4(
	  textpar["inconsistent","types","in","pattern","alternatives:"],
	  textpar["does","not","agree","with","previous","type"], ue)
      | ppError(GuardPatUnify ue) =
	ppUnify2(
	  textpar["pattern","guard","is","not","a","boolean:"],
	  textpar["does","not","match","type"], ue)
      | ppError(AnnPatUnify ue) =
	ppUnify4(
	  textpar["pattern","does","not","match","annotation:"],
	  textpar["does","not","match","type"], ue)
      (* Types *)
      | ppError(JokTyp) =
	  textpar["misplaced","type","wildcard"]
      | ppError(JokTypRow) =
	  textpar["misplaced","type","row","wildcard"]
      | ppError(StarTypKind k) =
	  textpar["missing","arguments","in","type","expression"]
      | ppError(AppTypFunKind k) =
	  textpar["type","expression","is","not","a","type","function"]
      | ppError(AppTypArgKind(k1,k2)) =
	  textpar["missing","arguments","in","type","expression"]
      | ppError(RefTypKind k) =
	  textpar["missing","arguments","in","type","expression"]
      | ppError(PervasiveTypUnknown s) =
	  textpar["unknown","pervasive","type","\""^s^"\""]
      (* Declarations *)
      | ppError(ValDecUnify ue) =
	ppUnify4(
	  textpar["expression","does","not","match","pattern","type:"],
	  textpar["does","not","match","type"], ue)
      | ppError(ValDecLift(x,l)) =
	  textpar["could not generalize","type","of",ppId x,
	      "due","to","value","restriction",
	      "although","it","contains","explicit","type","variables"]
      (* Modules *)
      | ppError(ModlongidInf(y,j)) =
	vbox(
	    textpar["module",ppLongid y,"is","not","a","structure,",
		    "it","has","signature"] ^^
	    indent(PPInf.ppInf j)
	)
      | ppError(StrModUnclosed lt) =
	ppUnclosed(
	  textpar["structure","is","not","closed:"], lt)
      | ppError(SelModInf j) =
	  textpar["module","expression","is","not","a","structure"]
      | ppError(AppModFunMismatch j) =
	  textpar["applied","module","is","not","a","functor"]
      | ppError(AppModArgMismatch im) =
	ppMismatch(
	  textpar["module","expression","does","not","match",
	      "functor","parameter","signature:"], im)
      | ppError(AnnModMismatch im) =
	ppMismatch(
	  textpar["module","expression","does","not","match","signature:"], im)
      (* Interfaces *)
      | ppError(GroundInfKind k) =
	  textpar["missing","arguments","in","signature","expression"]
      | ppError(AppInfFunMismatch j) =
	  textpar["applied","signature","is","not","parameterised"]
      | ppError(AppInfArgMismatch im) =
	ppMismatch(
	  textpar["module","expression","does","not","match",
		  "signature","parameter:"], im)
      | ppError(InterInfMismatch im) =
	ppMismatch(
	  textpar["inconsistency","at","signature","specialization:"], im)
      | ppError(SingInfPath) =
	  textpar["module","expression","is","not","a","path"]
      | ppError(PervasiveInfUnknown s) =
	  textpar["unknown","pervasive","signature","\""^s^"\""]
      (* Imports *)
      | ppError(ImpMismatch im) =
	ppMismatch(
	  textpar["component","does","not","match","import,","because"], im)
      (* Components *)
      | ppError(CompUnclosed lt) =
	ppUnclosed(
	  textpar["component","is","not","closed:"], lt)

    fun ppWarning(ValImpUnused l) =
	  textpar["imported","value",ppLab l,"is","not","used"]
      | ppWarning(TypImpUnused l) =
	  textpar["imported","type",ppLab l,"is","not","used"]
      | ppWarning(ModImpUnused l) =
	  textpar["imported","structure",ppLab l,"is","not","used"]
      | ppWarning(InfImpUnused l) =
	  textpar["imported","signature",ppLab l,"is","not","used"]
      | ppWarning(NotGeneralized(x,t)) =
	vbox(
	    textpar["type","of",ppId x,"cannot","be","generalized","due","to",
		"value","restriction:"] ^^
	    nest(break ^^ PPType.ppTyp t)
	)

  (* Export *)

    fun errorToString e   = PrettyPrint.toString(ppError e, 75)
    fun warningToString w = PrettyPrint.toString(ppWarning w, 75)

    fun error(region, e)  = Error.error(region, errorToString e)
    fun warn(region, w)   = Error.warn(region, warningToString w)

end
