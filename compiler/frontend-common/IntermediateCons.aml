(*
 * Author:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001-2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Stamp			from "../common/Stamp"
import structure Fixity			from "../../lib/rtt/Fixity"
import structure Name			from "../../lib/rtt/Name"
import structure Label			from "../../lib/rtt/Label"
import structure Path			from "../../lib/rtt/Path"
import structure Type			from "../../lib/rtt/Type"
import structure Inf			from "../../lib/rtt/Inf"
import structure PervasiveType		from "../../lib/rtt/PervasiveType"

import structure LabelLib               from "LabelLib"
import structure PathLib                from "PathLib"
import structure TypeLib                from "TypeLib"
import structure InfLib                 from "InfLib"
import structure FixityLib              from "FixityLib"
import structure PervasiveTypeLib       from "PervasiveTypeLib"
import structure LabelTranslation       from "LabelTranslation"
import structure TypeTranslation        from "TypeTranslation"
import structure TranslationEnv		from "TranslationEnv"

import structure TypedInfo		from "TypedGrammar"
import structure IntermediateInfo
       structure IntermediateGrammar	from "../common/IntermediateGrammar"
import signature INTERMEDIATE_CONS	from "INTERMEDIATE_CONS-sig"

structure IntermediateCons : INTERMEDIATE_CONS =
struct
    open PervasiveType
    open InfLib
    open TypeLib
    open PervasiveTypeLib
    open PathLib
    open LabelLib
    open FixityLib
    open TypeTranslation

    open IntermediateGrammar
    open IntermediateInfo
    open TypedInfo
    nonfix mod

  (* Accessors *)

    fun regionOfId id         = #region(infoId id)
    fun regionOfLongid longid = #region(infoLongid longid)
    fun regionOfExp exp       = #region(infoExp exp)
    fun regionOfPat pat       = #region(infoPat pat)

    fun typOfId id            = #typ(infoId id)
    fun typOfLongid longid    = #typ(infoLongid longid)
    fun typOfExp exp          = #typ(infoExp exp)
    fun typOfPat pat          = #typ(infoPat pat)

  (* General expressions *)

    fun auxId i    = Id(i, Stamp.stamp(), Name.InId)
    fun shortId id = ShortId(infoId id, id)

    fun lazyExp exp        = LazyExp(infoExp exp, exp)
    fun seqExp(exp1, exp2) = SeqExp(infoExp exp2, exp1, exp2)
    fun letExp(decs, exp)  = LetExp(infoExp exp, decs, exp)
    fun strictExp exp =
	StrictExp(typInfo(regionOfExp exp, Type.apply(typ_strict, typOfExp exp)),
		  exp)
    fun strictPat pat =
	StrictPat(typInfo(regionOfPat pat, Type.apply(typ_strict, typOfPat pat)),
		  pat)

    fun stringExp(r, s) =
	LitExp(typInfo(r, typ_string), StringLit(String.toWide s))
    fun intExp(r, n) =
	LitExp(typInfo(r, typ_int), IntLit(Int.toLarge n))
    fun unitExp r =
	TupExp(typInfo(r, typ_unit), #[])
    fun tupExp(r, exps) =
	TupExp(typInfo(r, Type.tuple(Vector.map typOfExp exps)), exps)
    fun vecExp(r, t, exps) =
	VecExp(typInfo(r, Type.apply(typ_vec, t)), exps)
    fun unitPat r =
	TupPat(typInfo(r, typ_unit), #[])
    fun tupPat(r, pats) =
	TupPat(typInfo(r, Type.tuple(Vector.map typOfPat pats)), pats)

    fun fld(r, l, xxx) = Fld(nonInfo r, Lab(nonInfo r, l), xxx)
    fun selExp(r, n, exp) =
	SelExp(typInfo(r, Vector.sub(Type.asTuple(typOfExp exp), n-1)),
	       Lab(nonInfo r, Label.fromInt n), exp)

    fun idLab(Id(i, _, n)) =
	Lab(nonInfo(#region i), Label.fromName n)
    fun idFld idXxx id =
	Fld(nonInfo(regionOfId id), idLab id, idXxx id)
    fun idExp id =
	let
	    val i = infoId id
	in
	    VarExp(i, ShortId(i, id))
	end
    fun idPat id = VarPat(infoId id, id)
    fun longidExp longid = VarExp(infoLongid longid, longid)

    fun auxDec(id, exp) =
	ValDec(origInfo(regionOfId id, Aux), idPat id, exp)
    fun expDec exp =
	ValDec(origInfo(regionOfExp exp, Aux), JokPat(infoExp exp), exp)
    fun idDec(longid, id) =
	auxDec(id, VarExp(infoId id, LongId(infoId id, longid, idLab id)))


  (* RTT expressions *)

    fun pathId(env, r) = Id(typInfo(r, typ_path env), Stamp.stamp(), Name.InId)
    fun typId(env, r)  = Id(typInfo(r, typ_typ env), Stamp.stamp(), Name.InId)
    fun infId(env, r)  = Id(typInfo(r, typ_inf env), Stamp.stamp(), Name.InId)

    (* __pervasive.modlab.lab *)
    fun pervasiveExp(env, r, modlab, lab) =
	let
	    val modlab' = LabelTranslation.trModLabel modlab
	    val lab'    = LabelTranslation.trValLabel lab
	    val longid0 = TranslationEnv.lookupPervasive' env
	    val t0      = typOfLongid longid0
	    val t1      = Type.lookupRow(Type.asProd t0, modlab')
	    val t2      = Type.lookupRow(Type.asProd t1, lab')
	    val longid1 = LongId(typInfo(r,t1), longid0, Lab(nonInfo r,modlab'))
	    val longid2 = LongId(typInfo(r,t2), longid1, Lab(nonInfo r,lab'))
	in
	    VarExp(typInfo(r,t2), longid2)
	end

    (* __pervasive.modlab.lab exp *)
    fun pervasiveAppExp(env, r, modlab, lab, exp) =
	let
	    val exp1    = pervasiveExp(env, r, modlab, lab)
	    val t1      = typOfExp exp1
	    val (t2,t3) = Type.asArrow t1
	in
	    (*assert (Type.equal(t2, typOfExp exp));*)
	    AppExp(typInfo(r,t3), exp1, exp)
	end

    fun assocExp(env, r, Fixity.LEFT) =
	pervasiveExp(env, r, modlab_fixity, lab_left)
      | assocExp(env, r, Fixity.RIGHT) =
	pervasiveExp(env, r, modlab_fixity, lab_right)
      | assocExp(env, r, Fixity.NEITHER) =
	pervasiveExp(env, r, modlab_fixity, lab_neither)

    fun fixExp(env, r, Fixity.NONFIX) =
	pervasiveExp(env, r, modlab_fixity, lab_nonfix)
      | fixExp(env, r, Fixity.PREFIX n) =
	pervasiveAppExp(env, r, modlab_fixity, lab_prefix, intExp(r, n))
      | fixExp(env, r, Fixity.POSTFIX n) =
	pervasiveAppExp(env, r, modlab_fixity, lab_postfix, intExp(r, n))
      | fixExp(env, r, Fixity.INFIX(n,a)) =
	pervasiveAppExp(env, r, modlab_fixity, lab_infix,
			tupExp(r, #[intExp(r, n), assocExp(env, r, a)]))

    fun unconstrainedExp(env, r) =
	pervasiveExp(env, r, modlab_type, lab_unconstrained)

    fun labExp(env, r, l) =
	pervasiveAppExp(env, r, modlab_label, lab_fromString,
			stringExp(r, Label.toString l))
    fun pathExp(env, r, n) =
	pervasiveAppExp(env, r, modlab_path, lab_fromString,
			stringExp(r, Name.toString n))
    fun pathInventExp(env, r) =
	pervasiveAppExp(env, r, modlab_path, lab_invent, unitExp r)

    fun kindExp(env, r, k) =
	case Type.inspectKind k
	 of Type.StarKind =>
	    pervasiveAppExp(env, r, modlab_type, lab_starKind, unitExp r)
	  | Type.ExtKind =>
	    pervasiveAppExp(env, r, modlab_type, lab_extKind, unitExp r)
	  | Type.ArrowKind(kind1, kind2) =>
	    let
		val exp1 = kindExp(env, r, kind1)
		val exp2 = kindExp(env, r, kind2)
	    in
		pervasiveAppExp(env, r, modlab_type, lab_arrowKind,
				tupExp(r, #[exp1,exp2]))
	    end
	  | Type.SingKind _ => raise Domain		(*TODO*)

    fun pervTypExp(env, r, s) =
	pervasiveAppExp(env, r, modlab_pervasiveType, lab_lookup,
			stringExp(r, s))
    fun pervInfExp(env, r, s) =
	raise Fail "TranslationPhase.pervInfExp: primitive interface"

    fun typExp(env, lab, exp) =
	pervasiveAppExp(env, regionOfExp exp, modlab_type, lab, exp)
    fun infExp(env, lab, exp) =
	pervasiveAppExp(env, regionOfExp exp, modlab_inf, lab, exp)
end
