(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Name                from "../../lib/rtt/Name"
import structure Label               from "../../lib/rtt/Label"
import structure Path                from "../../lib/rtt/Path"
import structure Type                from "../../lib/rtt/Type"
import signature TYPE_TRANSLATION from "TYPE_TRANSLATION-sig"

structure TypeTranslation :> TYPE_TRANSLATION =
struct
    fun vallab s	= Label.fromString s
    fun typlab s	= Label.fromString s
    fun modlab s	= Label.fromString s

  (* Module and types *)

    val modlab_type	= modlab "Type"
    structure Type	= Type				(* verify *)

    val typlab_con	= typlab "con"
    type con		= Type.con			(* verify *)
    val typlab_typ	= typlab "t"
    type typ		= Type.t			(* verify *)
    val typlab_var	= typlab "var"
    type var		= Type.var			(* verify *)
    val typlab_row	= typlab "row"
    type row		= Type.row			(* verify *)
    val typlab_kind	= typlab "kind"
    datatype kind	= datatype Type.kind		(* verify *)
    val typlab_sort	= typlab "sort"
    datatype sort	= datatype Type.sort		(* verify *)

    val lab_star	= vallab "STAR"
    val _		= STAR : kind			(* verify *)
    val lab_arrow	= vallab "ARROW"
    val _		= ARROW : kind * kind -> kind	(* verify *)

    val lab_open	= vallab "OPEN"
    val _		= OPEN : sort			(* verify *)
    val lab_closed	= vallab "CLOSED"
    val _		= CLOSED : sort			(* verify *)


  (* Operations *)

    type lab		= Label.t
    type path		= Path.t

    val lab_unknown	= vallab "unknown"
    val _		= Type.unknown : kind -> typ		(* verify *)
    val lab_inArrow	= vallab "inArrow"
    val _		= Type.inArrow : typ * typ -> typ	(* verify *)
    val lab_inTuple	= vallab "inTuple"
    val _		= Type.inTuple : typ vector -> typ	(* verify *)
    val lab_inProd	= vallab "inProd"
    val _		= Type.inProd : row -> typ		(* verify *)
    val lab_inSum	= vallab "inSum"
    val _		= Type.inSum : row -> typ		(* verify *)
    val lab_inVar	= vallab "inVar"
    val _		= Type.inVar : var -> typ		(* verify *)
    val lab_inCon	= vallab "inCon"
    val _		= Type.inCon : con -> typ		(* verify *)
    val lab_inAll	= vallab "inAll"
    val _		= Type.inAll : var * typ -> typ		(* verify *)
    val lab_inExist	= vallab "inExist"
    val _		= Type.inExist : var * typ -> typ	(* verify *)
    val lab_inApply	= vallab "inApply"
    val _		= Type.inApply : typ * typ -> typ	(* verify *)
    val lab_inLambda	= vallab "inLambda"
    val _		= Type.inLambda : var * typ -> typ	(* verify *)
    val lab_inMu	= vallab "inMu"
    val _		= Type.inMu : typ -> typ		(* verify *)

    val lab_var		= vallab "var"
    val _		= Type.var : kind -> var		(* verify *)
    val lab_kind	= vallab "kind"
    val _		= Type.kind : typ -> kind		(* verify *)

    val lab_unknownRow	= vallab "unknownRow"
    val _		= Type.unknownRow : unit -> row		(* verify *)
    val lab_emptyRow	= vallab "emptyRow"
    val _		= Type.emptyRow : unit -> row		(* verify *)
    val lab_extendRow	= vallab "extendRow"
    val _		= Type.extendRow : lab * typ * row -> row (* verify *)

    val lab_fill	= vallab "fill"
    val _		= Type.fill : typ * typ -> unit		(* verify *)

    val lab_equals	= vallab "equals"
    val _		= Type.equals : typ * typ -> bool	(* verify *)
end
