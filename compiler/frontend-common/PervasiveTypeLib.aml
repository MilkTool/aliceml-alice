(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Name                       from "../../lib/rtt/Name"
import structure Label                      from "../../lib/rtt/Label"
import structure Type                       from "../../lib/rtt/Type"
import structure PervasiveType              from "../../lib/rtt/PervasiveType"
import signature PERVASIVE_TYPE_TRANSLATION from "PERVASIVE_TYPE_TRANSLATION-sig"

structure PervasiveTypeTranslation :> PERVASIVE_TYPE_TRANSLATION =
struct
    fun vallab s	= Label.fromString s
    fun modlab s	= Label.fromString s

  (* Module *)

    val modlab_pervasiveType	= modlab "PervasiveType"
    structure PervasiveType	= PervasiveType			(* verify *)

  (* Operations *)

    type con = Type.con

    val lab_lookup	= vallab "lookup"
    val _		= PervasiveType.lookup : string -> con	(* verify *)
end
