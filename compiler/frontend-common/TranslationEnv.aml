(*
 * Author:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001-2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Stamp               from "../common/Stamp"
import structure StampSet            from "../common/StampSet"
import structure TypedGrammar        from "TypedGrammar"
import structure IntermediateGrammar from "../common/IntermediateGrammar"
import signature TRANSLATION_ENV     from "TRANSLATION_ENV-sig"

structure TranslationEnv :> TRANSLATION_ENV =
struct
    type stamp			= Stamp.t
    type modid			= TypedGrammar.modid
    type longid'		= IntermediateGrammar.longid

    type env			= StampSet.t * modid option ref
					     * longid' option ref
    type t			= env

    exception Unknown		= StampSet.Unknown
    exception Collision		= StampSet.Collision
    exception Pervasive

    fun env()			= (StampSet.set(), ref NONE, ref NONE) : env
    val empty			= env()
    fun clone(s,xr,yr)		= (StampSet.clone s, ref(!xr), ref(!yr))

    fun insertMod((E,_,_), x)	= StampSet.insertDisjoint(E,x)
    fun removeMod((E,_,_), x)	= StampSet.removeExistent(E,x)
    fun memberMod((E,_,_), x)	= StampSet.member(E,x)

    fun insertPervasive((_,xr,_), x)		= xr := SOME x
    fun lookupPervasive(_, ref(SOME x), _)	= x
      | lookupPervasive(_, ref NONE, _)		= raise Pervasive

    fun insertPervasive'((_,_,yr), y')		= yr := SOME y'
    fun lookupPervasive'(_, _, ref(SOME y'))	= y'
      | lookupPervasive'(_, _, ref NONE)	= raise Pervasive
end
