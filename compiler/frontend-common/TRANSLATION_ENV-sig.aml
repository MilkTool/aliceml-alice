(*
 * Author:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Stamp               from "../common/Stamp"
import structure TypedGrammar        from "TypedGrammar"
import structure IntermediateGrammar from "../common/IntermediateGrammar"

signature TRANSLATION_ENV =
sig
    type stamp   = Stamp.t
    type modid   = TypedGrammar.modid
    type longid' = IntermediateGrammar.longid

    type env
    type t = env

    exception Delete    of stamp
    exception Collision of stamp
    exception Pervasive

    val new :			unit -> env
    val clone :			env -> env

    val insertMod :		env * stamp -> unit	(* Collision *)
    val deleteMod :		env * stamp -> unit	(* Delete *)
    val memberMod :		env * stamp -> bool

    val insertPervasive :	env * modid   -> unit
    val insertPervasive' :	env * longid' -> unit
    val lookupPervasive :	env -> modid		(* Pervasive *)
    val lookupPervasive' :	env -> longid'		(* Pervasive *)
end
