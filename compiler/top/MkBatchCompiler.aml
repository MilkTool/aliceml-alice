(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 1999-2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure TextIO             from "../../lib/system/TextIO"
import structure OS                 from "../../lib/system/OS"
import structure Config             from "../../lib/system/Config"
import structure Url                from "../../lib/system/Url"
import structure MkOptionParser     from "MkOptionParser"
import signature BATCH_COMPILER     from "BATCH_COMPILER-sig"
import signature RECURSIVE_COMPILER from "RECURSIVE_COMPILER-sig"

functor MkBatchCompiler(structure RecursiveCompiler: RECURSIVE_COMPILER
			val executableHeader: string
			val extension: string): BATCH_COMPILER =
    struct
	fun basename filename =
	    let
		fun cutPath ((#"/" | #"\\")::rest) = nil
		  | cutPath (c::rest) = c::cutPath rest
		  | cutPath nil = nil
		val cs = cutPath (List.rev (String.explode filename))
		fun cutExtension (#"."::rest) =
		    (case rest of
			 (#"/" | #"\\")::_ => cs
		       | _::_ => rest
		       | nil => cs)
		  | cutExtension ((#"/" | #"\\")::_) = cs
		  | cutExtension (_::rest) = cutExtension rest
		  | cutExtension nil = cs
	    in
		String.implode (List.rev (case cs of
					      #"."::_ => cs
					    | _ => cutExtension cs))
	    end

	fun main_c (infile, outfile) =
	    (RecursiveCompiler.compileFileToFile (infile, outfile);
	     OS.Process.success)
(*--** handle IO.Io {...} => *)

	fun main_x (infile, outfile) =
	    (*--** respect executableHeader *)
	    (RecursiveCompiler.compileFileToFile (infile, outfile);
	     case Config.platform of
		 Config.WIN32 => OS.Process.success
	       | Config.UNIX => OS.Process.system ("chmod +x " ^ outfile))
(*--** handle IO.Io {...} => *)

	structure OptionParser = MkOptionParser(RecursiveCompiler.Switches)

	fun usage () =
	    TextIO.output
	    (TextIO.stdErr,
	     "Usage:\n\
	      \\talicec [<option> ...] [-c|-x] <input file> \
	      \[-o <output file>]\n" ^ OptionParser.helpText)

	fun main' ["--dryrun"] =
	    let
		val s = TextIO.inputAll TextIO.stdIn
	    in
		RecursiveCompiler.compileString RecursiveCompiler.empty s;
		OS.Process.success
	    end
	  | main' ([infile] | ["-c", infile]) =
	    main_c (infile, basename infile ^ "." ^ extension)
	  | main' ["-x", infile] =
	    main_x (infile, basename infile)
	  | main' ([infile, "-o", outfile] | ["-c", infile, "-o", outfile]) =
	    main_c (infile, outfile)
	  | main' ["-x", infile, "-o", outfile] =
	    main_x (infile, outfile)
	  | main' _ = (usage (); OS.Process.failure)

	fun defaults () = (* override defaults from MkSwitches here *)
	    RecursiveCompiler.Switches.Language.implicitImportFile :=
		SOME "x-alice:/alicec.import"

	fun main arguments =
	    (defaults (); main' (OptionParser.parse arguments))
	    handle RecursiveCompiler.Error => OS.Process.failure
    end
