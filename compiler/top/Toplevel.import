(* -*- sml -*- *)

(*
 * Author:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

(* This file is executed on startup of interactive toplevel. *)

import signature ORDERED from "x-alice:/lib/data/ORDERED-sig"
import signature HASHABLE from "x-alice:/lib/data/HASHABLE-sig"
import signature STAMP from "x-alice:/lib/data/STAMP-sig"
import functor MkStamp from "x-alice:/lib/data/MkStamp"
import signature GLOBAL_STAMP from "x-alice:/lib/data/GLOBAL_STAMP-sig"
import structure GlobalStamp from "x-alice:/lib/data/GlobalStamp"
import signature STACK from "x-alice:/lib/data/STACK-sig"
import structure Stack from "x-alice:/lib/data/Stack"
import signature STREAM from "x-alice:/lib/data/STREAM-sig"
import structure Stream from "x-alice:/lib/data/Stream"
import signature SET from "x-alice:/lib/data/SET-sig"
import signature MAP from "x-alice:/lib/data/MAP-sig"
import functor MkRedBlackSet from "x-alice:/lib/data/MkRedBlackSet"
import functor MkRedBlackMap from "x-alice:/lib/data/MkRedBlackMap"
import signature IMP_SET from "x-alice:/lib/data/IMP_SET-sig"
import signature IMP_MAP from "x-alice:/lib/data/IMP_MAP-sig"
import functor MkRedBlackImpSet from "x-alice:/lib/data/MkRedBlackImpSet"
import functor MkRedBlackImpMap from "x-alice:/lib/data/MkRedBlackImpMap"
import functor MkHashImpSet from "x-alice:/lib/data/MkHashImpSet"
import functor MkHashImpMap from "x-alice:/lib/data/MkHashImpMap"

import signature COMPONENT from "x-alice:/lib/system/COMPONENT-sig"
import signature COMPONENT_MANAGER from "x-alice:/lib/system/COMPONENT_MANAGER-sig"
import signature CONFIG from "x-alice:/lib/system/CONFIG-sig"
import signature HTTP from "x-alice:/lib/system/HTTP-sig"
import signature HTTP_CLIENT from "x-alice:/lib/system/HTTP_CLIENT-sig"
import signature HTTP_SERVER from "x-alice:/lib/system/HTTP_SERVER-sig"
import signature RESOLVER from "x-alice:/lib/system/RESOLVER-sig"
import signature RESOLVER_HANDLER from "x-alice:/lib/system/RESOLVER_HANDLER-sig"
import signature SOCKET from "x-alice:/lib/system/SOCKET-sig"
import signature URL from "x-alice:/lib/system/URL-sig"
import structure Component from "x-alice:/lib/system/Component"
import structure ComponentManager from "x-alice:/lib/system/ComponentManager"
import structure Config from "x-alice:/lib/system/Config"
import structure Http from "x-alice:/lib/system/Http"
import structure HttpClient from "x-alice:/lib/system/HttpClient"
import structure HttpServer from "x-alice:/lib/system/HttpServer"
import structure Resolver from "x-alice:/lib/system/Resolver"
import structure Socket from "x-alice:/lib/system/Socket"
import structure Url from "x-alice:/lib/system/Url"

import signature REMOTE from "x-alice:/lib/distribution/REMOTE-sig"
import structure Remote from "x-alice:/lib/distribution/Remote"

import signature FD from "x-alice:/lib/constraints/FD-sig"
import signature FS from "x-alice:/lib/constraints/FS-sig"
import signature LINEAR from "x-alice:/lib/constraints/LINEAR-sig"
import signature SEARCH from "x-alice:/lib/constraints/SEARCH-sig"
import signature SPACE from "x-alice:/lib/constraints/SPACE-sig"
import structure FD from "x-alice:/lib/constraints/FD"
import structure FS from "x-alice:/lib/constraints/FS"
import structure Linear from "x-alice:/lib/constraints/Linear"
import structure Search from "x-alice:/lib/constraints/Search"
import structure Space from "x-alice:/lib/constraints/Space"

import signature INSPECTOR from "x-alice:/lib/tools/INSPECTOR-sig"
import signature EXPLORER from "x-alice:/lib/tools/EXPLORER-sig"
import structure Inspector val inspect from "x-alice:/lib/tools/Inspector"
import structure Explorer from "x-alice:/lib/tools/Explorer"

import "x-alice:/compiler/ToplevelMain"

(* We need to repeat overloading declarations here,
   because mere reliance on reexport-import will default the types! *)
__overload (int, word, Word8.t, real) as 'num
    op ~ : 'num -> 'num = (Int.~, Word.~, Word8.~, Real.~)
__overload (int, real) as 'realint
    op abs : 'realint -> 'realint = (Int.abs, Real.abs)
__overload (int, word, Word8.t, real) as 'num
    op + : 'num * 'num -> 'num = (Int.+, Word.+, Word8.+, Real.+)
__overload (int, word, Word8.t, real) as 'num
    op - : 'num * 'num -> 'num = (Int.-, Word.-, Word8.-, Real.-)
__overload (int, word, Word8.t, real) as 'num
    op * : 'num * 'num -> 'num = (Int.*, Word.*, Word8.*, Real.*)
__overload (int, word, Word8.t) as 'wordint
    op div : 'wordint * 'wordint -> 'wordint = (Int.div, Word.div, Word8.div)
__overload (int, word, Word8.t) as 'wordint
    op mod : 'wordint * 'wordint -> 'wordint = (Int.mod, Word.mod, Word8.mod)
__overload (real) as 'real
    op / : 'real * 'real -> 'real = (Real./)

__overload (int, word, Word8.t, real, char, string) as 'numtxt
    op < : 'numtxt * 'numtxt -> bool =
    (Int.<, Word.<, Word8.<, Real.<, Char.<, String.<)
__overload (int, word, Word8.t, real, char, string) as 'numtxt
    op > : 'numtxt * 'numtxt -> bool =
    (Int.>, Word.>, Word8.>, Real.>, Char.>, String.>)
__overload (int, word, Word8.t, real, char, string) as 'numtxt
    op <= : 'numtxt * 'numtxt -> bool =
    (Int.<=, Word.<=, Word8.<=, Real.<=, Char.<=, String.<=)
__overload (int, word, Word8.t, real, char, string) as 'numtxt
    op >= : 'numtxt * 'numtxt -> bool =
    (Int.>=, Word.>=, Word8.>=, Real.>=, Char.>=, String.>=)
