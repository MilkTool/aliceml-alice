(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2001-2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure TextIO        from "../../lib/system/TextIO"
import signature SWITCHES      from "../infrastructure/SWITCHES-sig"
import signature OPTION_PARSER from "OPTION_PARSER-sig"

functor MkOptionParser(Switches: SWITCHES) :> OPTION_PARSER =
    struct
	val version = "Build " ^
			(*TODO Date.toString(Date.fromTimeLocal(Time.now()))*)
			"2001/??/??"

	val helpText =
	    "Gobal options:\n\
	    \\t--(no-)recursive-compilation\n\
	    \\t\tCompile imported components recursively if necessary.\n\
	    \\t--(no-)trace-component-access\n\
	    \\t\tTrace component loads and saves by the compiler.\n\
	    \Warning options:\n\
	    \\t--(no-)warn-conventions\n\
	    \\t\tWhether to warn about naming convention violations.\n\
	    \\t--(no-)warn-shadowing\n\
	    \\t\tWhether to warn about shadowing of identifiers.\n\
	    \\t--(no-)warn-unused-import\n\
	    \\t\tWhether to warn about unused imports.\n\
	    \Language options:\n\
	    \\t--(no-)retain-full-import\n\
	    \\t\tWhether to reduce import signatures to the entities used.\n\
	    \\t--(no-)reexport-import\n\
	    \\t\tMake imported entities part of the component.\n\
	    \\t--implicit-import-file <import file>|-\n\
	    \\t\tSpecify file containing implicit import annotations.\n\
	    \\t--(no-)rtt\n\
	    \\t\tWhether to generate code for runtime types.\n\
	    \\t--(no-)silent-fail\n\
	    \\t\tWhether FailExp's should be translated to failed futures.\n\
	    \Debug options:\n\
	    \\t--version\n\
	    \\t\tPrint compiler version.\n\
	    \\t--(no-)dryrun\n\
	    \\t\tCompile standard input, not writing any output.\n\
	    \\t--(no-)dump-phases\n\
	    \\t\tTrace the running phases.\n\
	    \\t--(no-)dump-abstraction-result\n\
	    \\t\tDump abstract representation.\n\
	    \\t--(no-)dump-elaboration-result\n\
	    \\t\tDump abstract representation after elaboration.\n\
	    \\t--(no-)dump-elaboration-sig\n\
	    \\t\tDump component signatures after elaboration.\n\
	    \\t--(no-)dump-intermediate\n\
	    \\t\tDump intermediate representation.\n\
	    \\t--(no-)check-intermediate\n\
	    \\t\tType-check intermediate representation.\n\
	    \\t--(no-)dump-flattening-result\n\
	    \\t\tDump flat representation after flattening.\n\
	    \\t--(no-)dump-value-propagation-context\n\
	    \\t\tDump environment after value propagation.\n\
	    \\t--(no-)dump-value-propagation-result\n\
	    \\t\tDump flat representation after value propagation.\n\
	    \\t--(no-)dump-liveness-analysis-result\n\
	    \\t\tDump flat representation after liveness analysis.\n\
	    \\t--(no-)dump-target\n\
	    \\t\tDump target code representation.\n"

	open Switches

	val booleanSwitches =
	    [("recursive-compilation", Global.recursiveCompilation),
	     ("trace-component-access", Global.traceComponentAccess),
	     ("warn-conventions", Warn.conventions),
	     ("warn-shadowing", Warn.shadowing),
	     ("warn-unused-import", Warn.unusedImport),
	     ("rtt", Language.supportRtt),
	     ("reexport-import", Language.reexportImport),
	     ("retain-full-import", Language.retainFullImport),
	     ("silent-fail", Language.silentFailExp),
	     ("dump-phases", Debug.dumpPhases),
	     ("dump-abstraction-result", Debug.dumpAbstractionResult),
	     ("dump-elaboration-result", Debug.dumpElaborationResult),
	     ("dump-elaboration-sig", Debug.dumpElaborationSig),
	     ("dump-intermediate", Debug.dumpIntermediate),
	     ("check-intermediate", Debug.checkIntermediate),
	     ("dump-flattening-result", Debug.dumpFlatteningResult),
	     ("dump-value-propagation-context",
	      Debug.dumpValuePropagationContext),
	     ("dump-value-propagation-result",
	      Debug.dumpValuePropagationResult),
	     ("dump-liveness-analysis-result",
	      Debug.dumpLivenessAnalysisResult),
	     ("dump-target", Debug.dumpTarget),
	     ("generate-debug-code", CodeGen.debugMode)]

	fun checkBooleanSwitches (s, (name, switch)::rest) =
	    if "--" ^ name = s then (switch := true; true)
	    else if "--no-" ^ name = s then (switch := false; true)
	    else checkBooleanSwitches (s, rest)
	  | checkBooleanSwitches (_, nil) = false

	fun parse ("--version"::rest) =
	    (TextIO.output (TextIO.stdOut, version ^ "\n");
	     parse rest)
	  | parse ("--implicit-import-file"::file::rest) =
	    (Language.implicitImportFile :=
		(if file = "-" then NONE else SOME file);
	     parse rest)
	  | parse (s::rest) =
	    if checkBooleanSwitches (s, booleanSwitches) then parse rest
	    else s::rest
	  | parse nil = nil
    end
