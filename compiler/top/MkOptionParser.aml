(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import
    structure TextIO
from "../../lib/system/TextIO"

import
    signature SWITCHES
from "../infrastructure/SWITCHES-sig"

import
    signature OPTION_PARSER
from "OPTION_PARSER-sig"

functor MkOptionParser(Switches: SWITCHES) :> OPTION_PARSER =
    struct
	val version = "Build " ^
			(*TODO Date.toString(Date.fromTimeLocal(Time.now()))*)
			"2001/??/??"

	val helpText =
	    "Warning options:\n\
	    \\t--(no-)warn-shadowing\n\
	    \\t\tWhether to warn about shadowing of identifiers.\n\
	    \Language options:\n\
	    \\t--(no-)reexport-import\n\
	    \\t\tMake imported entities part of the component.\n\
	    \\t--(no-)implicit-import\n\
	    \\t\tWhether the SML Standard Basis is made available.\n\
	    \\t--implicit-import-file <import file>\n\
	    \\t\tSpecify file containing implicit import annotations.\n\
	    \\t--rtt-level=no\n\
	    \\t\tDo not generate code for runtime types.\n\
	    \\t--rtt-level=core\n\
	    \\t\tDo only generate code for core runtime types.\n\
	    \\t--rtt-level=full\n\
	    \\t\tFull support for runtime types.\n\
	    \\t--(no-)silent-fail\n\
	    \\t\tWhether FailExp's should be translated to failed futures.\n\
	    \Debug options:\n\
	    \\t--version\n\
	    \\t\tPrint compiler version.\n\
	    \\t--(no-)dryrun\n\
	    \\t\tCompile standard input, not writing any output.\n\
	    \\t--(no-)dump-phases\n\
	    \\t\tTrace the running phases.\n\
	    \\t--(no-)dump-abstraction-result\n\
	    \\t\tDump abstract representation.\n\
	    \\t--(no-)dump-elaboration-result\n\
	    \\t\tDump abstract representation after elaboration.\n\
	    \\t--(no-)dump-elaboration-sig\n\
	    \\t\tDump component signatures after elaboration.\n\
	    \\t--(no-)dump-intermediate\n\
	    \\t\tDump intermediate representation.\n\
	    \\t--(no-)check-intermediate\n\
	    \\t\tType-check intermediate representation.\n\
	    \\t--(no-)dump-flattening-result\n\
	    \\t\tDump flat representation after flattening.\n\
	    \\t--(no-)dump-value-propagation-context\n\
	    \\t\tDump environment after value propagation.\n\
	    \\t--(no-)dump-value-propagation-result\n\
	    \\t\tDump flat representation after value propagation.\n\
	    \\t--(no-)dump-liveness-analysis-intermediate\n\
	    \\t\tDump flat representation with liveness annotations.\n\
	    \\t--(no-)dump-liveness-analysis-context\n\
	    \\t\t.Dump set of defined stamps after liveness analysis.\n\
	    \\t--(no-)dump-liveness-analysis-result\n\
	    \\t\tDump flat representation after liveness analysis.\n\
	    \\t--(no-)dump-dead-code-elimination-result\n\
	    \\t\tDump flat representation after dead code elimination.\n\
	    \\t--(no-)dump-target\n\
	    \\t\tDump target code representation.\n"

	open Switches

	val booleanSwitches =
	    [("warn-shadowing", Warn.shadowing),
	     ("reexport-import", Language.reexportImport),
	     ("implicit-import", Language.implicitImport),
	     ("silent-fail", Language.silentFailExp),
	     ("dump-phases", Debug.dumpPhases),
	     ("dump-abstraction-result", Debug.dumpAbstractionResult),
	     ("dump-elaboration-result", Debug.dumpElaborationResult),
	     ("dump-elaboration-sig", Debug.dumpElaborationSig),
	     ("dump-intermediate", Debug.dumpIntermediate),
	     ("check-intermediate", Debug.checkIntermediate),
	     ("dump-flattening-result", Debug.dumpFlatteningResult),
	     ("dump-value-propagation-context",
	      Debug.dumpValuePropagationContext),
	     ("dump-value-propagation-result",
	      Debug.dumpValuePropagationResult),
	     ("dump-liveness-analysis-intermediate",
	      Debug.dumpLivenessAnalysisIntermediate),
	     ("dump-liveness-analysis-context",
	      Debug.dumpLivenessAnalysisContext),
	     ("dump-liveness-analysis-result",
	      Debug.dumpLivenessAnalysisResult),
	     ("dump-dead-code-elimination-result",
	      Debug.dumpDeadCodeEliminationResult),
	     ("dump-target",
	      Debug.dumpTarget)]

	fun checkBooleanSwitches (s, (name, switch)::rest) =
	    if "--" ^ name = s then (switch := true; true)
	    else if "--no-" ^ name = s then (switch := false; true)
	    else checkBooleanSwitches (s, rest)
	  | checkBooleanSwitches (_, nil) = false

	fun parse ("--version"::rest) =
	    (TextIO.output (TextIO.stdOut, version ^ "\n");
	     parse rest)
	  | parse ("--rtt-level=no"::rest) =
	    (Language.rttLevel := Language.NO_RTT;
	     parse rest)
	  | parse ("--rtt-level=core"::rest) =
	    (Language.rttLevel := Language.CORE_RTT;
	     parse rest)
	  | parse ("--rtt-level=full"::rest) =
	    (Language.rttLevel := Language.FULL_RTT;
	     parse rest)
	  | parse ("--implicit-import-file"::file::rest) =
	    (Language.implicitImportFile := SOME file;
	     parse rest)
	  | parse (s::rest) =
	    if checkBooleanSwitches (s, booleanSwitches) then parse rest
	    else s::rest
	  | parse nil = nil
    end
