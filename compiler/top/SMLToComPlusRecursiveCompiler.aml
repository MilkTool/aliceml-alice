(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2000-2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import
    structure TextIO
from "../../lib/TextIO"

import
    structure Url
from "../misc/Url"

import
    structure Crash
from "../infrastructure/Crash"

import
    structure Source
from "../infrastructure/Source"

import
    structure MkSwitches
from "../infrastructure/MkSwitches"

import
    structure MkFrontendCommon
from "../frontend-common/MkFrontendCommon"

import
    structure MkFrontendSML
from "../frontend-sml/MkFrontendSML"

import
    structure MkBackendCommon
from "../backend-common/MkBackendCommon"

import
    structure MkComPlusTarget
    structure MkBackendComPlus
from "../backend-mozart/MkBackendComPlus"

import
    structure Signature
from "Signature"

import
    structure Composer
from "Composer"

import
    structure MkCompiler
from "MkCompiler"

import
    structure MkRecursiveCompiler
from "MkRecursiveCompiler"

structure SMLToComPlusRecursiveCompiler =
    let
	structure Switches = MkSwitches(val logOut = TextIO.stdOut)

	val f: (Source.desc * Url.t -> Composer.Sig.t) ref =
	    ref (fn _ => raise Crash.Crash "SMLToComPlusMain.f")

	structure ComPlusTarget = MkComPlusTarget(Signature)

	structure FrontendSML =
	    MkFrontendSML(fun loadSign (desc, url) = !f (desc, url)
			  structure Switches = Switches)

	structure FrontendCommon =
	    MkFrontendCommon(fun loadSign (desc, url) = !f (desc, url)
			     structure Switches = Switches)

	structure BackendCommon = MkBackendCommon(Switches)

	structure BackendComPlus = MkBackendComPlus(ComPlusTarget)

	structure Compiler =
	    MkCompiler(structure Switches         = Switches
		       structure Target           = ComPlusTarget
		       structure FrontendSpecific = FrontendSML
		       structure FrontendCommon   = FrontendCommon
		       structure BackendCommon    = BackendCommon
		       structure BackendSpecific  = BackendComPlus)

	structure RecursiveCompiler =
	    MkRecursiveCompiler(structure Composer = Composer
				structure Compiler = Compiler
				val extension = "dll")

	val _ = f := RecursiveCompiler.acquireSign
    in
	RecursiveCompiler
    end
