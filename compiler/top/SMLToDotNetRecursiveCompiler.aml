(*
 * Authors:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Andreas Rossberg, 1999-2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure TextIO              from "../../lib/system/TextIO"
import structure Signature           from "../../lib/system/Signature"
import structure ComponentManager    from "../../lib/system/ComponentManager"
import structure Url                 from "../../lib/utility/Url"
import structure Crash               from "../infrastructure/Crash"
import structure Source              from "../infrastructure/Source"
import structure MkSwitches          from "../infrastructure/MkSwitches"
import structure MkFrontendCommon    from "../frontend-common/MkFrontendCommon"
import structure MkFrontendSML       from "../frontend-sml/MkFrontendSML"
import structure MkBackendCommon     from "../backend-common/MkBackendCommon"
import structure MkBackendDotNet     from "../backend-dotnet/MkBackendDotNet"
import structure Error               from "../infrastructure/Error"
import structure MkCompiler          from "MkCompiler"
import structure MkRecursiveCompiler from "MkRecursiveCompiler"

structure SMLToDotNetRecursiveCompiler =
    let
	structure Switches = MkSwitches(val logOut = TextIO.stdOut)

	val acquireSignRef: (Source.desc * Url.t -> Signature.t) ref =
	    ref (fn _ => raise Crash.Crash
				"SMLToDotNetRecursiveCompiler.acquireSignRef")

	fun loadSign(desc, url) = !acquireSignRef(desc, url)
	fun loadPlainSign(desc, url) = Signature.toSig(loadSign(desc, url))

	structure FrontendSML =
	    MkFrontendSML(val loadSign = loadPlainSign
			  structure Switches = Switches)

	structure FrontendCommon =
	    MkFrontendCommon(val loadSign = loadPlainSign
			     structure Switches = Switches)

	structure BackendCommon =
	    MkBackendCommon(val loadSign = loadSign
			    structure Switches = Switches)

	structure BackendDotNet =
	    MkBackendDotNet(structure Switches = Switches)

	structure Compiler =
	    MkCompiler(structure Switches         = Switches
		       structure FrontendSpecific = FrontendSML
		       structure FrontendCommon   = FrontendCommon
		       structure BackendCommon    = BackendCommon
		       structure BackendSpecific  = BackendDotNet)

	structure RecursiveCompiler =
	    MkRecursiveCompiler(structure ComponentManager = ComponentManager
				structure Compiler = Compiler
				val extension = "dll")

	val _ = acquireSignRef := RecursiveCompiler.acquireSign
    in
	RecursiveCompiler
    end
