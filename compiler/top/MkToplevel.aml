(*
 * Authors:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Andreas Rossberg, 2001-2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Foreign              from "../../lib/system/Foreign"
import structure TextIO               from "../../lib/system/TextIO"
import structure OS                   from "../../lib/system/OS"
import structure IO                   from "../../lib/system/IO"
import structure Url                  from "../../lib/system/Url"
import structure Signal               from "../../lib/system/Signal"
import structure Config               from "../../lib/system/Config"

import structure Component            from "../../lib/system/Component"
import structure PPComponent          from "../../lib/system/PPComponent"
import structure PrettyPrint          from "../../lib/utility/PrettyPrint"

import structure Target               from "../infrastructure/Target"
import structure MkOptionParser       from "MkOptionParser"
import signature RECURSIVE_COMPILER   from "RECURSIVE_COMPILER-sig"
import signature INTERACTIVE_TOPLEVEL from "INTERACTIVE_TOPLEVEL-sig"

functor MkToplevel(RecursiveCompiler: RECURSIVE_COMPILER) :
    INTERACTIVE_TOPLEVEL =
struct
    structure OptionParser = MkOptionParser(RecursiveCompiler.Switches)

    fun usage fail = TextIO.output(if fail then
                                       TextIO.stdErr
                                   else TextIO.stdOut,
                                   "Usage: alice [options]\n" ^
				   OptionParser.helpText)

    val banner     = "Alice 0.9.3+ (" ^
		     (case Config.vm
		       of "mozart" => "Stockhausen Operette 3 Remix 3 Extended"
		        | "seam" => "Kraftwerk Album 1 Demo Tape"
			| _ => "Alien Invaderz Breakbeats"
		     ) ^ ")\n"
    val prompt     = "- "
    val contPrompt = "  "

    val useFiles: string list ref = ref nil
    val interruptThread: Thread.t option ref = ref NONE

    fun interruptHandler s =
	(case Ref.exchange (interruptThread, NONE)
	  of NONE => ()
	   | SOME thread => Thread.terminate thread;
	 Signal.register (s, interruptHandler))  (*--** currently auto-removed *)
    val _ = Signal.register (Signal.SIGINT, interruptHandler)

    fun interruptable f = (* only one interruptable thread at a time! *)
	(interruptThread := SOME (Thread.current ());
	 SOME (f ()) before
	 interruptThread := NONE
	) handle ( Thread.Terminate
		 | IO.Io {cause=Thread.Terminate, ...}
		 | Component.Failure (_, Component.Eval Thread.Terminate)) =>
			NONE

    fun use filename =
	let
	    val new = Hole.hole ()
	    val old = Ref.exchange (useFiles, new)
	in
	    Hole.fill (new, old @ [filename])
	end

    fun readInput () =
	case readInput' prompt of [] => NONE
				| ss => SOME(String.concat ss)

    and readInput' prompt =
	(TextIO.print prompt;
	 case TextIO.inputLine(TextIO.stdIn)
	  of NONE      => []
	   | SOME "\n" => "\n" :: readInput' contPrompt
	   | SOME line => if String.sub(line, String.size line - 2) = #";"
			  then [line]
			  else line :: readInput' contPrompt
	)

    fun baseUrl () =
	Url.setScheme (Url.fromString (OS.FileSys.getDir () ^ "/"),
		       SOME "file")

    fun eval compile (printSig, source, context) =
	Foreign.catch (fn _ => eval' compile (printSig, source, context),
		       fn e =>
			  (TextIO.output (TextIO.stdErr, Foreign.exnMessage e);
			   SOME context))
    and eval' compile (printSig, source, context) =
	(case interruptable (fn _ => compile (context, source)) of
	     SOME (context', Target.COMPONENT {eval, component, ...}) =>
		 (case interruptable (eval o baseUrl) of
		      NONE => NONE
		    | SOME str =>
		      if not printSig then SOME context' else
		      case Component.inf (component ())
		        of NONE =>
			       (TextIO.print "[no result signature]\n";
			        SOME context')
		         | SOME inf =>
			       interruptable
			       (fn _ =>
				let
				    val doc = PPComponent.ppComp (str, inf)
				in
				    PrettyPrint.output(TextIO.stdOut, doc, 79);
				    TextIO.print "\n";
				    context'
				end))
	   | SOME (_, Target.FOREIGN _) =>
		 raise RecursiveCompiler.Crash
		     "Toplevel.eval: cross-compilation not supported"
	   | NONE => NONE)
	handle RecursiveCompiler.Error => SOME context
	     | RecursiveCompiler.Crash s =>
		   (TextIO.output (TextIO.stdErr,
				   "internal failure at " ^ s ^ "\n");
		    SOME context)   (*--** is this cool or what? *)
	     | Component.Failure (_, Component.Eval exn) =>
		   (TextIO.output (TextIO.stdErr,
				   "uncaught exception " ^
				   General.exnName exn ^ "\n");
		    SOME context)
	     | exn =>
		   (TextIO.output (TextIO.stdErr,
				   "internal exception " ^
				   General.exnName exn ^ "\n");
		    SOME context)   (*--** is this cool or what? *)

    val evalString = eval RecursiveCompiler.compileString
    val evalFile   = eval RecursiveCompiler.compileFile

    fun loop context =
	case interruptable readInput
	 of NONE => (TextIO.print "\ninterrupted\n"; loop context)
	  | SOME NONE => TextIO.print "\nSee you later!\n"
	  | SOME (SOME source) =>
	case evalString (true, source, context)
	 of NONE => (TextIO.print "interrupted\n"; loop context)
	  | SOME context => loopUses context

    and loopUses context =
	let
	    val new = Hole.hole ()
	    val old = Ref.exchange (useFiles, new)
	in
	    case old of
		filename::rest =>
		    (Hole.fill (new, rest);
		     case evalFile (true, filename, context)
		       of SOME context' => loopUses context'
		        | NONE => (TextIO.print "\ninterrupted\n";
				   useFiles := nil;
				   loop context))
	      | nil =>
		    (Hole.fill (new, nil);
		     loop context)
	end

    fun main'(("--help"|"-h"|"-?")::_) = (usage false; OS.Process.success)
      | main'("--version"::_) =
	(TextIO.output (TextIO.stdOut, "alice "^OptionParser.version ^ "\n\n");
         TextIO.output (TextIO.stdOut, OptionParser.copyright ^ "\n");
         OS.Process.success)
      | main'(_::_) = (usage true; OS.Process.failure)
      | main' nil =
	let
            val _ = TextIO.print banner;
	    open RecursiveCompiler.Switches
	in
	    case evalString (false, "", RecursiveCompiler.Context.empty) of
	         NONE => 
		    (TextIO.output (TextIO.stdErr,
				    "alice: could not initialise environment\n");
		     OS.Process.failure)
	       | SOME context =>
		    (Language.implicitImportFile := NONE;
		     loop context;
		     OS.Process.success)
	end

    fun defaults () = (* override defaults from MkSwitches here *)
	RecursiveCompiler.Switches.Language.implicitImportFile :=
	    SOME "x-alice:/alice.import"

    fun main arguments =
	if RecursiveCompiler.isCrossCompiler then
	    (TextIO.output (TextIO.stdErr,
			    "alice: cross-compilation not supported by \
			    \interactive toplevel\n");
	     OS.Process.failure)
	else
	    let
		open RecursiveCompiler.Switches
	    in
		defaults ();
		Debug.dumpPhases := false;
		Language.allowUnclosedComponents := true;
		Language.reexportImport := true;
		Language.retainFullImport := true;
		Global.traceComponentAccess := true;
                main' (OptionParser.parse arguments)
	    end
	    handle exn =>
		(TextIO.output(TextIO.stdErr,
			       "alice: uncaught internal exception " ^
			       General.exnName exn ^ "\n");
		 OS.Process.failure)
end
