(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2000-2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure TextIO              from "../../lib/system/TextIO"
import structure Url                 from "../../lib/system/Url"
import structure ComponentManager    from "../../lib/system/ComponentManager"
import structure Assert              from "../../lib/utility/Assert"
import structure Source              from "../infrastructure/Source"
import structure MkSwitches          from "../infrastructure/MkSwitches"
import structure MkFrontendCommon    from "../frontend-common/MkFrontendCommon"
import structure MkFrontendSML       from "../frontend-sml/MkFrontendSML"
import structure MkBackendCommon     from "../backend-common/MkBackendCommon"
import structure MkBackendStockwerk  from "../backend-stockwerk/MkBackendStockwerk"
import structure Error               from "../infrastructure/Error"
import structure MkCompiler          from "MkCompiler"
import structure MkRecursiveCompiler
       type sig_loader
       type mod_loader               from "MkRecursiveCompiler"

structure SMLToStockwerkRecursiveCompiler =
    let
	structure Switches = MkSwitches(val logOut = TextIO.stdOut)

	val acquireSigRef: sig_loader ref =
	    ref (fn _ => raise Assert.failure)
	val acquireModRef: mod_loader ref =
	    ref (fn _ => raise Assert.failure)

	fun loadSig (desc, url) = !acquireSigRef (desc, url)
	fun loadMod (desc, url) = !acquireModRef (desc, url)

	structure FrontendSML =
	    MkFrontendSML(val loadSig = loadSig
			  structure Switches = Switches)

	structure FrontendCommon =
	    MkFrontendCommon(val loadSig = loadSig
			     structure Switches = Switches)

	structure BackendCommon =
	    MkBackendCommon(val loadMod = loadMod
			    structure Switches = Switches)

	structure BackendStockwerk =
	    MkBackendStockwerk(structure ComponentManager = ComponentManager
			       structure Switches = Switches)
	structure Compiler =
	    MkCompiler(structure Switches         = Switches
		       structure FrontendSpecific = FrontendSML
		       structure FrontendCommon   = FrontendCommon
		       structure BackendCommon    = BackendCommon
		       structure BackendSpecific  = BackendStockwerk)

	structure RecursiveCompiler =
	    MkRecursiveCompiler(structure ComponentManager = ComponentManager
				structure Compiler = Compiler
				val extension = "stc")

	val _ = acquireSigRef := RecursiveCompiler.acquireSig
	val _ = acquireModRef := RecursiveCompiler.acquireMod
    in
	RecursiveCompiler
    end
