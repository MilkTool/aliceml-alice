(*
 * Author:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt, 2002
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import signature IMP_MAP     from "../lib/utility/IMP_MAP-sig"
import structure Url         from "../lib/system/Url"
import structure MyComponent from "MyComponent"

signature LINK =
    sig
	structure UrlMap: IMP_MAP

	datatype boundary =
	    INCLUDE of string
	  | EXCLUDE of string

	exception Empty
	exception Mismatch of Url.t * Url.t
	exception Conflict of Url.t
	exception Io of Url.t * exn

	val collect: boundary vector * bool -> Url.t ->
		     {componentMap: MyComponent.t UrlMap.t,
		      includeMap: Url.t vector UrlMap.t,
		      excludeMap: MyComponent.inf UrlMap.t}
		     (* Empty, Mismatch, Conflict, Io *)

	val sort: Url.t vector UrlMap.t * 'a UrlMap.t -> Url.t list list

	val rewrite: (string * string) vector -> string -> string

	val link: {root: Url.t,
		   verbose: bool,
		   typeCheck: bool,
		   boundary: boundary vector,
		   rewrite: (string * string) vector} -> MyComponent.t
		     (* Empty, Mismatch, Conflict, Io *)
    end
