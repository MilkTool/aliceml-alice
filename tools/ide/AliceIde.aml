import structure Stream from "x-alice:/lib/data/Stream"
import structure AliceIdeGUI from "AliceIdeGUI"
import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"
import structure Key from "x-alice:/lib/gtk/Key"
import structure OutputWriters from "OutputWriters"
import structure Evaluator from "Evaluator"
import structure Buffer from "Buffer"
import structure FileDialog from "FileDialog"
import structure SearchDialog from "SearchDialog"
import structure Core from "x-alice:/lib/gtk/Core"
(*import structure Inspector from "x-alice:/lib/tools/Inspector"*)
import structure Highlight from "Highlight"

structure AliceIde =
    struct
	(* Stream redirection *)

	val (stdin, stdInText) = Stream.stream ()
	val reader = TextPrimIO.openVectorListRd stdInText
	val progStdIn = TextIO.StreamIO.mkInstream (reader, "")
	val _ = TextIO.setInstream (TextIO.stdIn, progStdIn)

	val (stdOutText, writer) = TextPrimIO.openVectorListWr ()
	val progStdOut = TextIO.StreamIO.mkOutstream (writer, IO.LINE_BUF)
	val _ = TextIO.setOutstream (TextIO.stdOut, progStdOut)

	val (stdErrText, writer) = TextPrimIO.openVectorListWr ()
	val progStdErr = TextIO.StreamIO.mkOutstream (writer, IO.NO_BUF)
	val _ = TextIO.setOutstream (TextIO.stdErr, progStdErr)

	val (outText, writer) = TextPrimIO.openVectorListWr ()
	val compilerOut = TextIO.StreamIO.mkOutstream (writer, IO.LINE_BUF)
	val _ = Evaluator.setOutStream compilerOut

	val (inText, writer) = TextPrimIO.openVectorListWr ()
	val compilerIn = TextIO.StreamIO.mkOutstream (writer, IO.LINE_BUF)

	val (errText, writer) = TextPrimIO.openVectorListWr ()
	val compilerErr = TextIO.StreamIO.mkOutstream (writer, IO.LINE_BUF)
	val _ = Evaluator.setErrStream compilerErr

	val (traceText, writer) = TextPrimIO.openVectorListWr ()
	val compilerTrace = TextIO.StreamIO.mkOutstream (writer, IO.LINE_BUF)
	val _ = Evaluator.setTraceStream compilerTrace

        val (rowCol, rowColStream) = Stream.stream ()

        (* Buffers *)

        val curtextview = ref AliceIdeGUI.scratchpad
        val clipboard = Gtk.clipboardGet(Gdk.atomIntern("CLIPBOARD", false))

        val numberOfPages = ref 0
        val currentPage = ref 0

        val pages = ref nil
        fun removePage i =
            let
                val (pre,post) = List.split(!pages, i)
                val (pre,[p]) = List.split(pre,i-1)
            in
                (pages := (List.take(pre,i-1)@post));
                p
            end
        fun addPage p = pages := (!pages)@[p]
        fun getPage i = List.nth (!pages, i-1)
        fun getCurrentPage () = getPage (!currentPage)

        (* Evaluation *)

        val evalSignal = ref NONE

        fun eval "" = ()
	  | eval text =
            case (!evalSignal) of NONE =>
	    let
                val signalP = Promise.promise()
		val signal = Promise.future signalP
		val text = if String.sub (text, String.size text - 1) = #"\n"
			   then text else text ^ "\n"
                fun find(i ,str) =
                    if i=String.size str then ""
                    else if Char.isSpace (String.sub(str,i)) then
                        find(i+1, str)
                    else String.extract(str, i, NONE)
	    in
                evalSignal := SOME signalP;
		TextIO.StreamIO.output (compilerIn, find(0,text));
		spawn (Evaluator.eval (text, signal);
                       evalSignal := NONE)
	    end
                                | SOME _ =>
                                  FileDialog.message "Still evaluating."

        fun feedFile() =
            let
                val buf = Gtk.textViewGetBuffer (!curtextview)
                val startiter = Gtk.textIterNew()
                val _ = Gtk.textBufferGetStartIter(buf,startiter)
                val enditer = Gtk.textIterNew()
                val _ = Gtk.textBufferGetEndIter(buf,enditer)
                val str = Gtk.textBufferGetText(buf, startiter, enditer, false)
                val str = Core.utf8ToLatin1 str
            in
                eval str
            end

        fun addNewlines(n, str) =
            (String.tabulate(n,fn _ => #"\n")) ^ str

        fun feedSelection() =
            let
                val buf = Gtk.textViewGetBuffer (!curtextview)
                val startiter = Gtk.textIterNew()
                val enditer = Gtk.textIterNew()
                val sel = Gtk.textBufferGetSelectionBounds(buf,
                                                           startiter,enditer)
                val startline = 1 + Gtk.textIterGetLine startiter
            in
                if sel
                then eval (addNewlines(startline,
                                       Core.utf8ToLatin1
                                           (Gtk.textBufferGetText(buf, startiter, enditer, false))))
                else ()
            end
                
        fun feedLine() =
            let
                val buf = Gtk.textViewGetBuffer (!curtextview)
                val startiter = Buffer.getCursorIter buf
                val startline = 1 + Gtk.textIterGetLine startiter
                val enditer = Gtk.textIterCopy(startiter)
                val _ = Gtk.textIterSetLineOffset(startiter, 0)
                val _ = Gtk.textIterForwardToLineEnd(enditer)
                val str = addNewlines(startline,
                                      Core.utf8ToLatin1
                                          (Gtk.textBufferGetText(buf, startiter, enditer, false)))
            in
                eval str
            end


        fun findNextEOL iter next =
            if next iter then
                let
                    val c = chr (Gtk.textIterGetChar iter)
                in
                    if c = #"\n" then ()
                    else if Char.isSpace c then findNextEOL iter next
                    else findEOP iter next
                end
            else ()
        and findEOP iter next =
            let
                val c = Gtk.textIterGetChar iter
            in
                if c=0 then ()
                else
                    if c=ord #"\n" then
                        findNextEOL iter next
                    else if next iter then
                        findEOP iter next
                    else ()
            end

        fun findNonWS iter next =
            let
                val c = Gtk.textIterGetChar iter
            in
                if c=0 then ()
                else if Char.isSpace (chr c) then
                    (next iter; findNonWS iter next)
                else ()
            end

        fun eolBeforeNonWS acc iter next =
            let
                val c = Gtk.textIterGetChar iter
            in
                if c=0 then acc
                else if Char.isSpace (chr c) then
                    (next iter;
                     eolBeforeNonWS (acc + (if c = ord #"\n" then 1 else 0)) iter next)
                else acc
            end

        fun paragraphIters(buf) =
            let
                val startiter = Buffer.getCursorIter buf
                val c = Gtk.textIterGetChar startiter
                val _ = if c = ord #"\n" orelse c=0 then
                            Gtk.textIterBackwardChar startiter else false
                val enditer = Gtk.textIterCopy(startiter)
                val _ = findEOP startiter Gtk.textIterBackwardChar
                val _ = findEOP enditer Gtk.textIterForwardChar
                val _ = findNonWS startiter Gtk.textIterForwardChar
                val _ = findNonWS enditer Gtk.textIterBackwardChar
                val _ = Gtk.textIterForwardChar enditer (* end is exclusive! *)
            in
                (startiter, enditer)
            end

        fun feedParagraph() =
            let
                val buf = Gtk.textViewGetBuffer (!curtextview)
                val (startiter, enditer) = paragraphIters(buf)
                val startline = 1 + Gtk.textIterGetLine startiter
                val str = addNewlines(startline,
                                      Core.utf8ToLatin1
                                          (Gtk.textBufferGetText(buf, startiter, enditer, false)))
            in
                eval (str^"\n")
            end

        fun feedParagraphNewline() =
            let
                val buf = Gtk.textViewGetBuffer (!curtextview)
                val (startiter, enditer) = paragraphIters(buf)
                val startline = 1 + Gtk.textIterGetLine startiter
                val str = addNewlines(startline,
                                      Core.utf8ToLatin1
                                          (Gtk.textBufferGetText(buf, startiter, enditer, false)))
                val _ = Gtk.textBufferPlaceCursor(buf, enditer)
            in
                case eolBeforeNonWS 0 enditer Gtk.textIterForwardChar of
                    0 => Gtk.textBufferInsertAtCursor(buf, "\n\n", 2)
                  | 2 => Gtk.textBufferInsertAtCursor(buf, "\n\n", 2)
                  | _ => Gtk.textBufferPlaceCursor(buf, enditer);
                eval (str^"\n")
            end
            
        fun copy() =
            let
                val buf = Gtk.textViewGetBuffer (!curtextview)
            in
                Gtk.textBufferCopyClipboard(buf, clipboard)
            end

        fun paste() =
            let
                val buf = Gtk.textViewGetBuffer (!curtextview)
            in
                Gtk.textBufferPasteClipboard(buf, clipboard,
                                             Gtk.NULL, true)
            end

        fun cut() =
            let
                val buf = Gtk.textViewGetBuffer (!curtextview)
            in
                Gtk.textBufferCutClipboard(buf, clipboard, true)
            end

        fun delete() =
            let
                val buf = Gtk.textViewGetBuffer (!curtextview)
            in
                ignore (Gtk.textBufferDeleteSelection(buf, true, true))
            end

        fun colorRegion buf (style, r,c,r',c') =
            let
                open Highlight
                val startiter = Gtk.textIterNew()
                val _ = Gtk.textBufferGetStartIter(buf,startiter)
                val _ = Gtk.textIterSetLine(startiter, r-1)
                val _ = Gtk.textIterSetLineOffset(startiter, c)
                val enditer = Gtk.textIterNew()
                val _ = Gtk.textBufferGetStartIter(buf,enditer)
                val _ = Gtk.textIterSetLine(enditer, r'-1)
                val _ = Gtk.textIterSetLineOffset(enditer, c')
                val tag = case style of
                              PLAIN => "plain"
                            | RESERVED => "reserved"
                            | STRING => "string"
                            | COMMENT => "comment"
                            | ERRONEOUS => "error"
            in
                Gtk.textBufferApplyTagByName(buf, tag,
                                             startiter, enditer)
            end

        fun insertText buf _ = ()
        fun deleteRange buf _ = ()

        fun breakLines str = map (fn s => s^"\n") (String.fields (fn #"\n" => true | _ => false) str)

        fun syntax() =
            let
                val buf = Gtk.textViewGetBuffer (!curtextview)
                val startiter = Gtk.textIterNew()
                val _ = Gtk.textBufferGetStartIter(buf,startiter)
                val enditer = Gtk.textIterNew()
                val _ = Gtk.textBufferGetEndIter(buf,enditer)
                val str = Gtk.textBufferGetText(buf, startiter, enditer, false)
                val str = Core.utf8ToLatin1 str
                val lines = breakLines str
                val regions = Highlight.scan lines
            in
                Gtk.textBufferRemoveAllTags(buf, startiter, enditer);
                app (colorRegion buf) regions
            end

        fun search() = SearchDialog.search (Gtk.textViewGetBuffer (!curtextview))

        fun markSet (buf,_) =
            let
                val cursor = Gtk.textBufferGetInsert buf
                val iter = Gtk.textIterNew()
                val _ = Gtk.textBufferGetIterAtMark(buf,iter,cursor)
            in
                Stream.send(rowCol,
                            (1 + Gtk.textIterGetLine iter,
                             Gtk.textIterGetLineOffset iter))
            end

        fun new() =
            let
                val {buf,view,...} = Buffer.buffer(AliceIdeGUI.notebook1,
                                           !numberOfPages, NONE)
            in
                curtextview := view;
                Gtk.widgetGrabFocus (!curtextview);
                Gtk.signalConnect(buf, "mark-set", markSet);
                markSet (buf, nil);
                addPage(!numberOfPages);
                numberOfPages := (!numberOfPages) + 1
            end

        fun openFile () =
            case FileDialog.openFile "Open file" of
                NONE => ()
              | SOME f =>
                let
                    val {buf,view,...} = Buffer.buffer(AliceIdeGUI.notebook1,
                                                       !numberOfPages, SOME f)
                in
                    curtextview := view;
                    Gtk.widgetGrabFocus (!curtextview);
                    Gtk.signalConnect(buf, "mark-set", markSet);
                    markSet (buf, nil);
                    addPage(!numberOfPages);
                    numberOfPages := (!numberOfPages) + 1
                end
                                  
        fun saveFileAs () =
            case FileDialog.openFile "Save file" of
                NONE => ()
              | SOME f => Buffer.saveAs (getCurrentPage(), f)

        fun saveFile () = if !currentPage = 0 then ()
                          else if Buffer.save (getCurrentPage()) then ()
                          else saveFileAs()

        fun switchPage(cur,view) =
            (currentPage := cur; curtextview := view;
             SearchDialog.reconnect (Gtk.textViewGetBuffer view))

        fun reallyClose p =
            (removePage p;
             Gtk.notebookRemovePage(AliceIdeGUI.notebook1, p);
             currentPage := Gtk.notebookGetCurrentPage AliceIdeGUI.notebook1)

        fun close () = if !currentPage=0 then ()
                       else (if Buffer.close (getPage(!currentPage)) then
                                 reallyClose (!currentPage)
                             else FileDialog.modifiedWarning
                                      "File modified. Discard changes and close anyway, or cancel?"
                                      reallyClose (!currentPage))

        fun breakEval() =
            case (!evalSignal) of
                NONE => ()
              | SOME s => Promise.fulfill(s,Evaluator.INTERRUPT)
        fun stopEval() =
            case (!evalSignal) of
                NONE => ()
              | SOME s => Promise.fulfill(s,Evaluator.STOP)

        fun jumpToError (row, col, row', col') _ =
            let
                val buf = Gtk.textViewGetBuffer(!curtextview)
                val startiter = Gtk.textIterNew()
                val _ = Gtk.textBufferGetStartIter(buf, startiter)
                val enditer = Gtk.textIterCopy startiter
            in
                Gtk.textIterSetLine(startiter, row-1);
                Gtk.textIterSetLine(enditer, row'-1);
                Gtk.textIterSetLineOffset(startiter, col);
                Gtk.textIterSetLineOffset(enditer, col');
                Gtk.textBufferSelectRange(buf, startiter, enditer);
                Gtk.widgetGrabFocus (!curtextview)
            end

        fun findErrorStart iter tag =
            if Gtk.textIterHasTag(iter, tag) then
                (Gtk.textIterBackwardChar iter; findErrorStart iter tag)
            else
                Gtk.textIterForwardChar iter

        fun parseErrorCoords s =
            let
                val (s11::s12::s21::s22::_) =
                    String.tokens (fn #":" => true
                                    | #"-" => true
                                    | #"." => true
                                    | _ => false) s
                val s11 = Int.fromString s11
                val s12 = Int.fromString s12
                val s21 = Int.fromString s21
                val s22 = Int.fromString s22
            in
                if isNone s11 orelse isNone s12 orelse
                   isNone s21 orelse isNone s22 then
                    NONE
                else
                    SOME (valOf s11, valOf s12, valOf s21, valOf s22)
            end handle Match => NONE

        fun populatePopup (view, [Gtk.OBJECT menu]) =
            let
                val separator= Gtk.menuItemNew()
                val showError = Gtk.menuItemNewWithMnemonic("Jump to error location")
                val buf = Gtk.textViewGetBuffer view
                val cursor = Gtk.textBufferGetInsert(buf)
                val iter = Gtk.textIterNew()
                val _ = Gtk.textBufferGetIterAtMark(buf,iter,cursor)
                val errorTag =
                    Gtk.textTagTableLookup(Gtk.textBufferGetTagTable buf,
                                           "error")
                val onErrorLine = Gtk.textIterHasTag(iter, errorTag)
            in
                Gtk.widgetSetSensitive(showError,
                                       onErrorLine);
                if onErrorLine then
                    let
                        val _ = findErrorStart iter errorTag
                        val iter2 = Gtk.textIterCopy iter
                        val _ = Gtk.textIterForwardLine iter2
                        val str = Core.utf8ToLatin1 (Gtk.textIterGetText(iter, iter2))
                        val coords = parseErrorCoords str
                    in
                        case coords of NONE => Gtk.widgetSetSensitive(showError,
                                                                      false)

                                     | SOME coords =>
                                       (Gtk.signalConnect(showError, "activate", jumpToError coords);
                                        ())
                    end
                else ();
                Gtk.widgetShow separator;
                Gtk.widgetShow showError;
                Gtk.containerAdd(menu, separator);
                Gtk.containerAdd(menu, showError)
            end
          | populatePopup _ = print "Gtk is crazy\n"

        fun init () =
            let
                val buf = Gtk.textViewGetBuffer AliceIdeGUI.scratchpad
                val tags = Buffer.makeTags buf
            in
                Gtk.widgetGrabFocus (!curtextview);
                Gtk.signalConnect(buf, "mark-set", markSet);
                Gtk.signalConnect(buf, "insert-text", insertText buf);
                Gtk.signalConnect(buf, "delete-range", deleteRange buf);
                Gtk.signalConnect(AliceIdeGUI.compilerout, "populate-popup", populatePopup);
	        OutputWriters.makeWriters {inStream = inText,
					   outStream = outText,
					   errStream = errText,
					   traceStream = traceText,
					   stdOutStream = stdOutText,
					   stdErrStream = stdErrText,
                                           stdInStream = stdin,
                                           rowColStream = rowColStream};
                Gtk.windowAddAccelGroup(AliceIdeGUI.mainwidget,
                                        AliceIdeGUI.Helpers.accelGroup);
                Gtk.widgetAddAccelerator(AliceIdeGUI.paragraphnewline, "activate",
                                         AliceIdeGUI.Helpers.accelGroup,
                                         Key.keyvalToInt Key.K_Return,
                                         Gdk.CONTROL_MASK, Gtk.ACCEL_LOCKED)
            end

        fun quit () = if List.all Buffer.close (!pages) then
                          OS.Process.exit OS.Process.success
                      else FileDialog.modifiedWarning
                               "There are modified files. Discard changes and quit anyway or cancel?"
                               OS.Process.exit OS.Process.success
    end
