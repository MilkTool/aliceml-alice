(*
 * This is a generated file, created by alice-glade.
 * Modifications may get lost.
 *)


import structure Gtk from "x-alice:/lib/gtk/Gtk"

structure AliceIdeGUI =
  struct
    structure Helpers = struct
      val accelGroup = Gtk.accelGroupNew()
      val tooltips = Gtk.tooltipsNew()
      fun containerAddList(cont, children) = 
        List.app (fn c => Gtk.containerAdd(cont,c)) children
    end

    val mainwidget = Gtk.windowNew(Gtk.WINDOW_TOPLEVEL)
    val _ = Gtk.widgetShow mainwidget
    val _ = Gtk.windowSetTitle(mainwidget,"Alice IDE")
    val vbox1 = Gtk.vboxNew(false,0)
    val _ = Gtk.widgetShow vbox1
    val vbox2 = Gtk.vboxNew(false,0)
    val _ = Gtk.widgetShow vbox2
    val menubar1 = Gtk.menuBarNew()
    val _ = Gtk.widgetSetSizeRequest(menubar1,188,28)
    val _ = Gtk.widgetShow menubar1
    val menuitem7 = Gtk.menuItemNewWithMnemonic("_File")
    val _ = Gtk.widgetShow menuitem7
    val menuitem7_menu = Gtk.menuNew()
    val new1 = Gtk.imageMenuItemNewFromStock("gtk-new",Helpers.accelGroup)
    val _ = Gtk.widgetShow new1
    val open1 = Gtk.imageMenuItemNewFromStock("gtk-open",Helpers.accelGroup)
    val _ = Gtk.widgetShow open1
    val save1 = Gtk.imageMenuItemNewFromStock("gtk-save",Helpers.accelGroup)
    val _ = Gtk.widgetShow save1
    val save_as1 = Gtk.imageMenuItemNewFromStock("gtk-save-as",Helpers.accelGroup)
    val _ = Gtk.widgetShow save_as1
    val close1 = Gtk.imageMenuItemNewFromStock("gtk-close",Helpers.accelGroup)
    val _ = Gtk.widgetShow close1
    val separatormenuitem1 = Gtk.menuItemNew()
    val _ = Gtk.widgetShow separatormenuitem1
    val compilefile = Gtk.menuItemNewWithMnemonic("Compile")
    val _ = Gtk.widgetShow compilefile
    val separator3 = Gtk.menuItemNew()
    val _ = Gtk.widgetShow separator3
    val quit1 = Gtk.imageMenuItemNewFromStock("gtk-quit",Helpers.accelGroup)
    val _ = Gtk.widgetShow quit1
    val _ = Helpers.containerAddList(menuitem7_menu,[new1,open1,save1,save_as1,close1,separatormenuitem1,compilefile,separator3,quit1])
    val _ = Gtk.menuItemSetSubmenu(menuitem7,menuitem7_menu)
    val menuitem8 = Gtk.menuItemNewWithMnemonic("_Edit")
    val _ = Gtk.widgetShow menuitem8
    val menuitem8_menu = Gtk.menuNew()
    val cut1 = Gtk.imageMenuItemNewFromStock("gtk-cut",Helpers.accelGroup)
    val _ = Gtk.widgetShow cut1
    val copy1 = Gtk.imageMenuItemNewFromStock("gtk-copy",Helpers.accelGroup)
    val _ = Gtk.widgetShow copy1
    val paste1 = Gtk.imageMenuItemNewFromStock("gtk-paste",Helpers.accelGroup)
    val _ = Gtk.widgetShow paste1
    val delete1 = Gtk.imageMenuItemNewFromStock("gtk-delete",Helpers.accelGroup)
    val _ = Gtk.widgetShow delete1
    val _ = Helpers.containerAddList(menuitem8_menu,[cut1,copy1,paste1,delete1])
    val _ = Gtk.menuItemSetSubmenu(menuitem8,menuitem8_menu)
    val feed1 = Gtk.menuItemNewWithMnemonic("Feed")
    val _ = Gtk.widgetShow feed1
    val feed1_menu = Gtk.menuNew()
    val feedline = Gtk.menuItemNewWithMnemonic("Line")
    val _ = Gtk.widgetShow feedline
    val feedparagraph = Gtk.menuItemNewWithMnemonic("Paragraph")
    val _ = Gtk.widgetShow feedparagraph
    val feedselection = Gtk.menuItemNewWithMnemonic("Selection")
    val _ = Gtk.widgetShow feedselection
    val feedfile = Gtk.menuItemNewWithMnemonic("File")
    val _ = Gtk.widgetShow feedfile
    val _ = Helpers.containerAddList(feed1_menu,[feedline,feedparagraph,feedselection,feedfile])
    val _ = Gtk.menuItemSetSubmenu(feed1,feed1_menu)
    val separator1 = Gtk.menuItemNew()
    val _ = Gtk.widgetShow separator1
    val menuitem10 = Gtk.menuItemNewWithMnemonic("_Help")
    val _ = Gtk.widgetShow menuitem10
    val menuitem10_menu = Gtk.menuNew()
    val about1 = Gtk.menuItemNewWithMnemonic("_About")
    val _ = Gtk.widgetShow about1
    val _ = Gtk.containerAdd(menuitem10_menu,about1)
    val _ = Gtk.menuItemSetSubmenu(menuitem10,menuitem10_menu)
    val _ = Helpers.containerAddList(menubar1,[menuitem7,menuitem8,feed1,separator1,menuitem10])
    val toolbar1 = Gtk.toolbarNew()
    val _ = Gtk.widgetShow toolbar1
    val _ = Gtk.boxPackStart(vbox2,menubar1,false,false,0)
    val _ = Gtk.boxPackStart(vbox2,toolbar1,false,false,0)
    val vpaned1 = Gtk.vpanedNew()
    val _ = Gtk.widgetShow vpaned1
    val _ = Gtk.panedSetPosition(vpaned1,0)
    val notebook1 = Gtk.notebookNew()
    val _ = Gtk.widgetSetSizeRequest(notebook1,91,102)
    val _ = Gtk.widgetShow notebook1
    val scrolledwindow2_xa = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow2_ya = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow2 = Gtk.scrolledWindowNew(scrolledwindow2_xa,scrolledwindow2_ya)
    val _ = Gtk.scrolledWindowSetShadowType(scrolledwindow2,Gtk.SHADOW_NONE)
    val _ = Gtk.widgetShow scrolledwindow2
    val scratchpad = Gtk.textViewNew()
    val _ = Gtk.widgetShow scratchpad
    val _ = Gtk.textViewSetEditable(scratchpad,true)
    val _ = Gtk.textViewSetJustification(scratchpad,Gtk.JUSTIFY_LEFT)
    val _ = Gtk.textViewSetWrapMode(scratchpad,Gtk.WRAP_NONE)
    val _ = Gtk.textViewSetCursorVisible(scratchpad,true)
    val _ = Gtk.textViewSetPixelsAboveLines(scratchpad,0)
    val _ = Gtk.textViewSetPixelsBelowLines(scratchpad,0)
    val _ = Gtk.textViewSetPixelsInsideWrap(scratchpad,0)
    val _ = Gtk.textViewSetLeftMargin(scratchpad,0)
    val _ = Gtk.textViewSetRightMargin(scratchpad,0)
    val _ = Gtk.textViewSetIndent(scratchpad,0)
    val _ = Gtk.textBufferSetText(Gtk.textViewGetBuffer scratchpad,"",~1)
    val _ = Gtk.containerAdd(scrolledwindow2,scratchpad)
    val label1 = Gtk.labelNew("Scratchpad")
    val _ = Gtk.widgetShow label1
    val _ = Gtk.containerAdd(notebook1,scrolledwindow2)
    val _ = Gtk.notebookSetTabLabel(notebook1,Gtk.notebookGetNthPage(notebook1,0),label1)
    val vpaned2 = Gtk.vpanedNew()
    val _ = Gtk.widgetShow vpaned2
    val _ = Gtk.panedSetPosition(vpaned2,0)
    val scrolledwindow3_xa = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow3_ya = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow3 = Gtk.scrolledWindowNew(scrolledwindow3_xa,scrolledwindow3_ya)
    val _ = Gtk.scrolledWindowSetShadowType(scrolledwindow3,Gtk.SHADOW_NONE)
    val _ = Gtk.widgetShow scrolledwindow3
    val progout = Gtk.textViewNew()
    val _ = Gtk.widgetSetSizeRequest(progout,0,18)
    val _ = Gtk.textBufferSetText(Gtk.textViewGetBuffer progout,"",~1)
    val _ = Gtk.textViewSetIndent(progout,0)
    val _ = Gtk.textViewSetRightMargin(progout,0)
    val _ = Gtk.textViewSetLeftMargin(progout,0)
    val _ = Gtk.textViewSetPixelsInsideWrap(progout,0)
    val _ = Gtk.textViewSetPixelsBelowLines(progout,0)
    val _ = Gtk.textViewSetPixelsAboveLines(progout,0)
    val _ = Gtk.textViewSetCursorVisible(progout,false)
    val _ = Gtk.textViewSetWrapMode(progout,Gtk.WRAP_NONE)
    val _ = Gtk.textViewSetJustification(progout,Gtk.JUSTIFY_LEFT)
    val _ = Gtk.textViewSetEditable(progout,false)
    val _ = Gtk.widgetShow progout
    val _ = Gtk.containerAdd(scrolledwindow3,progout)
    val scrolledwindow4_xa = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow4_ya = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow4 = Gtk.scrolledWindowNew(scrolledwindow4_xa,scrolledwindow4_ya)
    val _ = Gtk.scrolledWindowSetShadowType(scrolledwindow4,Gtk.SHADOW_NONE)
    val _ = Gtk.widgetShow scrolledwindow4
    val compilerout = Gtk.textViewNew()
    val _ = Gtk.widgetSetSizeRequest(compilerout,0,18)
    val _ = Gtk.textBufferSetText(Gtk.textViewGetBuffer compilerout,"",~1)
    val _ = Gtk.textViewSetIndent(compilerout,0)
    val _ = Gtk.textViewSetRightMargin(compilerout,0)
    val _ = Gtk.textViewSetLeftMargin(compilerout,0)
    val _ = Gtk.textViewSetPixelsInsideWrap(compilerout,0)
    val _ = Gtk.textViewSetPixelsBelowLines(compilerout,0)
    val _ = Gtk.textViewSetPixelsAboveLines(compilerout,0)
    val _ = Gtk.textViewSetCursorVisible(compilerout,false)
    val _ = Gtk.textViewSetWrapMode(compilerout,Gtk.WRAP_NONE)
    val _ = Gtk.textViewSetJustification(compilerout,Gtk.JUSTIFY_LEFT)
    val _ = Gtk.textViewSetEditable(compilerout,false)
    val _ = Gtk.widgetShow compilerout
    val _ = Gtk.containerAdd(scrolledwindow4,compilerout)
    val _ = Gtk.panedPack1(vpaned2,scrolledwindow3,false,true)
    val _ = Gtk.panedPack2(vpaned2,scrolledwindow4,true,true)
    val _ = Gtk.panedPack1(vpaned1,notebook1,false,true)
    val _ = Gtk.panedPack2(vpaned1,vpaned2,true,true)
    val statusbar1 = Gtk.statusbarNew()
    val _ = Gtk.widgetShow statusbar1
    val _ = Gtk.boxPackStart(vbox1,vbox2,false,false,0)
    val _ = Gtk.boxPackStart(vbox1,vpaned1,true,true,0)
    val _ = Gtk.boxPackStart(vbox1,statusbar1,false,false,0)
    val _ = Gtk.containerAdd(mainwidget,vbox1)
  end

(* Created by alice-glade *)
