import signature ALICEIDEGUISIGNALS_SIG from "AliceIdeGUISignals"
import structure AliceIde from "AliceIde"
import structure Gtk from "x-alice:/lib/gtk/Gtk"

structure EventHandler : ALICEIDEGUISIGNALS_SIG =
    struct
        fun on_new1_activate _ = AliceIde.new()
        fun on_open1_activate _ = AliceIde.openFile()
        fun on_save1_activate _ = AliceIde.saveFile()
        fun on_save_as1_activate _ = AliceIde.saveFileAs()
        fun on_close1_activate _ = AliceIde.close()
        val on_compilefile_activate = const ()
        fun on_quit1_activate _ = AliceIde.quit()
        fun on_cut1_activate _ = AliceIde.cut()
        fun on_copy1_activate _ = AliceIde.copy()
        fun on_paste1_activate _ = AliceIde.paste()
        fun on_delete1_activate _ = AliceIde.delete()
        fun on_feedline_activate _ = AliceIde.feedLine()
        fun on_feedparagraph_activate _ = AliceIde.feedParagraph()
        fun on_paragraphnewline_activate _ = AliceIde.feedParagraphNewline()
        fun on_feedselection_activate _ = AliceIde.feedSelection()
        fun on_feedfile_activate _ = AliceIde.feedFile()
        fun on_stop_activate _ = AliceIde.stopEval()
        fun on_break_activate _ = AliceIde.breakEval()
        val on_about1_activate = const()
        fun on_notebook1_switch_page (object,_) =
            let
                val curPage = Gtk.notebookGetCurrentPage(object)
                val scrWin = Gtk.notebookGetNthPage(object, curPage)
                val textView = Gtk.binGetChild scrWin
            in
                AliceIde.switchPage(curPage,textView)
            end
               
    end