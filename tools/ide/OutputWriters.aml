import structure Stream from "x-alice:/lib/data/Stream"
import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure AliceIdeGUI from "AliceIdeGUI"
import structure Gdk from "x-alice:/lib/gtk/Gdk"
import structure Core from "x-alice:/lib/gtk/Core"
import structure PangoEnums from "x-alice:/lib/gtk/PangoEnums"

structure OutputWriters =
   struct

      val stdFont = Gtk.pangoFontDescriptionFromString "Courier"

      fun fillBuf view buffer handler tags text =
          let
              val iter = Gtk.textIterNew()
              val _ = Gtk.textBufferGetEndIter(buffer,iter)
 	      val startOffset = Gtk.textIterGetOffset iter
	      val start = Gtk.textIterCopy iter
              val text = Core.latin1ToUtf8 text
          in
              Core.signalHandlerBlock(buffer, handler);
	      Gtk.textBufferInsert(buffer, iter, text, size text);
              Gtk.textBufferGetIterAtOffset (buffer, start, startOffset);
              app (fn t => Gtk.textBufferApplyTag(buffer, t, start, iter)) tags;
	      Gtk.textBufferGetIterAtOffset (buffer, start, startOffset) ;
              Gtk.textBufferPlaceCursor(buffer,iter);
              Gtk.textViewScrollToMark(view,
                                       Gtk.textBufferGetInsert buffer,
                                       0.0,false,0.0,0.0);
              Core.signalHandlerUnblock(buffer, handler)
          end
              
      val contextId = Gtk.statusbarGetContextId(AliceIdeGUI.statusbar,
                                                "Alice IDE")
      val _ = Gtk.statusbarPush(AliceIdeGUI.statusbar,contextId,
                                "Ready.");

      fun setStatus msg = 
          let
              val msg = if String.isPrefix "-- " msg then
                            String.extract(msg, 3, NONE)
                        else msg
              val msg = String.map (fn #"\n" => #" " | c => c) msg
          in
              (Gtk.statusbarPop(AliceIdeGUI.statusbar, contextId);
               Gtk.statusbarPush(AliceIdeGUI.statusbar, contextId, msg);
               ())
          end

      val rowColId = Gtk.statusbarGetContextId(AliceIdeGUI.statusbar1,
                                               "rowcol")
      val _ = Gtk.statusbarPush(AliceIdeGUI.statusbar1,rowColId,
                                "L 0       C 0");

      fun setRowCol (row, col) =
          let
              val r = Int.toString row
              val c = Int.toString col
              val msg = "L"^r^"      C"^c
          in
              (Gtk.statusbarPop(AliceIdeGUI.statusbar1, rowColId);
               Gtk.statusbarPush(AliceIdeGUI.statusbar1, rowColId, msg);
               ())
              
          end

	val cmap   = Gdk.colormapGetSystem ()
        val textColor = Gdk.colorNew(0xf0f0, 0x2020, 0xa0a0)
	val black = Gdk.colorNew(0, 0, 0)
	val white = Gdk.colorNew(65535, 65535, 65535)
	val _ = Gdk.colormapAllocColor(cmap, black, false, true)
	val _ = Gdk.colormapAllocColor(cmap, white, false, true)
	val _ = Gdk.colormapAllocColor(cmap, textColor, false, true)

        fun progInInsert (stdInStream,noedit) (buf, [Gtk.INT off,
                                            Gtk.STRING txt,
                                            Gtk.INT size]) =
            if String.sub(txt, String.size txt - 1) = #"\n" then
                let
                    val enditer = Gtk.textIterNew()
                    val cursor = Gtk.textBufferGetInsert buf
                    val _ = Gtk.textBufferGetIterAtMark(buf,enditer,cursor)
                    val startiter = Gtk.textIterCopy enditer
                    val _ = Gtk.textIterBackwardToTagToggle(startiter,noedit)
                    val str = Gtk.textBufferGetText(buf, startiter, enditer, false)
                    val str = Core.utf8ToLatin1 str
                    val _ = Stream.send(stdInStream, str)
                in
                    Gtk.textBufferApplyTag(buf, noedit, startiter, enditer)
                end
            else ()
          | progInInsert _ _ = () (* Gtk is crazy *)

        fun lastChar' iter =
            if Gtk.textIterBackwardChar iter then
                let
                    val c = Gtk.textIterGetChar iter
                in
                    if c <= Char.maxOrd andalso Char.isSpace(chr c)
                    then lastChar' iter
                    else SOME c
                end
            else NONE
        fun lastChar(buf, off) =
            let
                val iter = Gtk.textIterNew()
            in
                Gtk.textBufferGetIterAtOffset(buf, iter, off);
                lastChar' iter
            end

        fun compilerInsert (eval,noedit) (buf, [Gtk.INT off,
                                            Gtk.STRING txt,
                                            Gtk.INT size]) =
            if String.sub(txt, String.size txt - 1) = #"\n" andalso
               lastChar(buf, off+size-1) = SOME (ord #";")
            then
                let
                    val enditer = Gtk.textIterNew()
                    val cursor = Gtk.textBufferGetInsert buf
                    val _ = Gtk.textBufferGetIterAtMark(buf,enditer,cursor)
                    val startiter = Gtk.textIterCopy enditer
                    val _ = Gtk.textIterBackwardToTagToggle(startiter, noedit)
                    val str = Gtk.textBufferGetText(buf, startiter, enditer, false)
                    val str = Core.utf8ToLatin1 str
                    val _ = eval str
                in
                    Gtk.textBufferApplyTag(buf, noedit, startiter, enditer)
                end
            else ()
          | compilerInsert _ _ = () (* Gtk is crazy *)

      fun makeTags buf =
          {errorTag = Gtk.textBufferCreateTag(buf, "error", "foreground-gdk", Gtk.OBJECT textColor),
           noeditTag = Gtk.textBufferCreateTag(buf, "noedit", "editable", Gtk.BOOL false),
           logTag = Gtk.textBufferCreateTag(buf, "log", "style", Gtk.INT (PangoEnums.PangoStyleToInt PangoEnums.STYLE_ITALIC)),
           stdTag = Gtk.textBufferCreateTag(buf, "std", "foreground-gdk", Gtk.OBJECT black)}
          
      fun makeWriters {inStream,
                       outStream,
		       errStream,
		       traceStream,
                       stdOutStream,
		       stdErrStream,
                       stdInStream,
                       rowColStream,
                       eval} =
          let
              val progBuf = Gtk.textBufferNew Gtk.NULL
              val compilerBuf = Gtk.textBufferNew Gtk.NULL
              val {errorTag=pErr,logTag=pLog,stdTag=pStd,noeditTag=pNoEd,...} = makeTags progBuf
              val {errorTag=cErr,logTag=cLog,stdTag=cStd,noeditTag=cNoEd,...} = makeTags compilerBuf
              val pSig = Gtk.signalConnect(progBuf, "insert-text",
                                           progInInsert (stdInStream, pNoEd))
              val cSig = Gtk.signalConnect(compilerBuf, "insert-text",
                                           compilerInsert (eval, cNoEd));
          in
              Gtk.widgetModifyFont(AliceIdeGUI.compilerout, stdFont);
              Gtk.textViewSetBuffer(AliceIdeGUI.progout, progBuf);
              Gtk.textViewSetBuffer(AliceIdeGUI.compilerout, compilerBuf);
              spawn app (fillBuf AliceIdeGUI.compilerout compilerBuf cSig [cStd,cNoEd]) inStream;
              spawn app (fillBuf AliceIdeGUI.compilerout compilerBuf cSig [cLog,cNoEd]) outStream;
              spawn app (fillBuf AliceIdeGUI.compilerout compilerBuf cSig [cErr,cNoEd]) errStream;
              spawn app setStatus traceStream;
              spawn app (fillBuf AliceIdeGUI.progout progBuf pSig [pStd,pNoEd]) stdOutStream;
              spawn app (fillBuf AliceIdeGUI.progout progBuf pSig [pErr,pNoEd]) stdErrStream;
              spawn app setRowCol rowColStream
          end
   end
