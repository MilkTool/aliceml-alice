(*
 * Authors:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2005
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"
import structure Key from "x-alice:/lib/gtk/Key"
import structure Buffer from "Buffer"

structure SearchDialog =
    struct

        val searchDialog = Gtk.dialogNew()
        val _ = Gtk.windowSetTitle(searchDialog,"Search")
        val _ = Gtk.dialogSetHasSeparator(searchDialog,true)
        val dialog_vbox1 = Gtk.vboxNew(false,0)
        val _ = Gtk.widgetShow dialog_vbox1
        val dialog_action_area1 = Gtk.hbuttonBoxNew()
        val _ = Gtk.widgetShow dialog_action_area1
        val _ = Gtk.buttonBoxSetLayout(dialog_action_area1,Gtk.BUTTONBOX_END)
        val cancelbutton1 = Gtk.dialogAddButton(searchDialog,"Cancel",Gtk.GtkResponseTypeToInt Gtk.RESPONSE_CANCEL)
        val _ = Gtk.widgetShow cancelbutton1
        val okbutton1 = Gtk.dialogAddButton(searchDialog,"Ok",Gtk.GtkResponseTypeToInt Gtk.RESPONSE_OK)
        val _ = Gtk.widgetShow okbutton1
        val _ = Gtk.dialogSetDefaultResponse(searchDialog, Gtk.GtkResponseTypeToInt Gtk.RESPONSE_OK)
        val vbox4 = Gtk.vboxNew(false,0)
        val _ = Gtk.widgetShow vbox4
        val hbox1 = Gtk.hboxNew(false,0)
        val _ = Gtk.widgetShow hbox1
        val label2 = Gtk.labelNew("Search for:")
        val _ = Gtk.widgetShow label2
        val searchString = Gtk.entryNew()
        val _ = Gtk.widgetShow searchString
        val _ = Gtk.entrySetActivatesDefault(searchString,true)
        val _ = Gtk.boxPackStart(hbox1,label2,false,false,0)
        val _ = Gtk.boxPackStart(hbox1,searchString,true,true,5)
        val table1 = Gtk.tableNew(2,2,false)
        val _ = Gtk.widgetShow table1
        val _ = Gtk.tableSetRowSpacings(table1,0)
        val _ = Gtk.tableSetColSpacings(table1,20)
        val checkbutton1 = Gtk.checkButtonNewWithMnemonic("Case sensitive")
        val _ = Gtk.toggleButtonSetActive(checkbutton1,true)
        val _ = Gtk.widgetShow checkbutton1
        val checkbutton2 = Gtk.checkButtonNewWithMnemonic("Backwards")
        val _ = Gtk.widgetShow checkbutton2
        val checkbutton3 = Gtk.checkButtonNewWithMnemonic("From cursor position")
        val _ = Gtk.toggleButtonSetActive(checkbutton3,true)
        val _ = Gtk.widgetShow checkbutton3
        val checkbutton4 = Gtk.checkButtonNewWithMnemonic("Whole words")
        val _ = Gtk.widgetSetSensitive(checkbutton4,false)
        val _ = Gtk.widgetSetSensitive(checkbutton3,false)
        val _ = Gtk.widgetSetSensitive(checkbutton2,false)
        val _ = Gtk.widgetShow checkbutton4
        val _ = Gtk.tableAttach(table1,checkbutton1,0,1,0,1,Gtk.FILL,Gtk.FILL,0,0)
        val _ = Gtk.tableAttach(table1,checkbutton2,1,2,0,1,Gtk.FILL,Gtk.FILL,0,0)
        val _ = Gtk.tableAttach(table1,checkbutton3,0,1,1,2,Gtk.FILL,Gtk.FILL,0,0)
        val _ = Gtk.tableAttach(table1,checkbutton4,1,2,1,2,Gtk.FILL,Gtk.FILL,0,0)
        val _ = Gtk.boxPackStart(vbox4,hbox1,true,true,0)
        val _ = Gtk.boxPackStart(vbox4,table1,true,true,0)
        val _ = Gtk.boxPackStart(dialog_vbox1,vbox4,true,true,0)
        val vbox = Gtk.dialogGetFieldVbox searchDialog
        val _ = Gtk.containerAdd(vbox,dialog_vbox1)
        val actionArea = Gtk.dialogGetFieldActionArea searchDialog
        val _ = Gtk.containerAdd(actionArea,dialog_action_area1)
        val accelGroup = Gtk.accelGroupNew()

        val _ = Gtk.windowSetPosition (searchDialog, Gtk.WIN_POS_MOUSE)
	(* val _ = Gtk.windowSetKeepAbove (searchDialog, true); Gtk 2.4 *)

        fun closeCallback _ = Gtk.widgetUnmap searchDialog
        val _ = Gtk.signalConnect(searchDialog, "delete-event", closeCallback)
        val _ = Gtk.signalConnect(cancelbutton1, "clicked", closeCallback)

        val _ = Gtk.widgetAddAccelerator(searchDialog, "close",
                                         accelGroup,
                                         Key.keyvalToInt Key.K_Escape,
                                         Gdk.CONTROL_MASK, Gtk.ACCEL_LOCKED)
        val _ = Gtk.windowAddAccelGroup(searchDialog,
                                        accelGroup);

        fun doSearch id _ =
            let
                val txt = Gtk.entryGetText searchString
                val caseSensitive = Gtk.toggleButtonGetActive checkbutton1
            in
                Buffer.find id txt caseSensitive
            end
                
        val searchSignal = ref NONE
        fun reconnect id =
            case !searchSignal of
                NONE => (searchSignal := SOME (Gtk.signalConnect(okbutton1, "clicked", doSearch id)))
              | SOME s => (searchSignal := SOME (Gtk.signalConnect(okbutton1, "clicked", doSearch id));
                           Gtk.signalDisconnect(okbutton1, s))

        fun search id =
            (reconnect id;
             case Buffer.getSelection id of
                 NONE => ()
               | SOME s => Gtk.entrySetText(searchString, s);
             Gtk.widgetShowAll searchDialog;
             Gtk.widgetMap searchDialog)
    end
