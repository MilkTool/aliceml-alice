(*
 * Authors:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2005
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure MkHashImpMap from "x-alice:/lib/data/MkHashImpMap"
import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure FileDialog from "FileDialog"
import structure Config from "Config"
import structure BufferHighlight from "BufferHighlight"

structure Buffer =
   struct
      open Config

      structure BufferMap = MkHashImpMap(Int)

      datatype undo = INSERT of (int * int)
                    | DELETE of (int * string)
                    | WAIT_INSERT of (int * int)
                    | WAIT_DELETE of (int * string)
	            | BEGIN_ACTION
	            | END_ACTION
	            | SAVE_MARKER

      type buffer = {id: int,
                     file: string option ref,
                     fileLabel: Gtk.object,
                     view: Gtk.object,
                     buf: Gtk.object,
                     tags: tags,
                     undo: undo list ref,
                     lastSearchPos: int ref,
		     highlightActive : bool ref,
		     highlight: int option Promise.promise ref}

      val bufferMap : buffer BufferMap.map = BufferMap.map()

      fun shortName s =
          let
              fun lastSlash i j = if j=size s then i
                                  else if String.sub(s,j) = #"/" orelse String.sub(s,j) = #"\\"
				  then lastSlash j (j+1)
                                  else lastSlash i (j+1)
          in
              String.extract(s,1 + lastSlash ~1 0, NONE)
          end

      (* Concurrent highlighting *)

      val delay = Time.fromMilliseconds(Int.toLarge 400)
      val never = Promise.future(Promise.promise())
      val infinity = Option.getOpt(Int.maxInt, 1073741823)

      fun highlightGuard'(buf, plaintag, promRef, signal, offset, active) =
	  case Future.awaitEither(Promise.future(!promRef), signal)
	   of FST NONE => () (* buffer closed *)
	    | FST(SOME offset') =>  (* wakeup by change before delay is over *)
	         (promRef := Promise.promise();
		  highlightGuard'(buf, plaintag, promRef, Future.alarm delay, Int.min(offset,offset'), active))
	    | SND _ => (* delay over *)
	      if !active then
	      let
		  val prom = Promise.promise()
		  val inter = Promise.future prom
		  val kill = ref false
	      in
                  promRef := prom;
		  spawn (await inter; kill := true);
		  BufferHighlight.highlightOffset(buf, offset, plaintag, kill);
		  highlightGuard'(buf, plaintag, promRef, never, infinity, active)
	      end
	      else
                  (promRef := Promise.promise();
		   highlightGuard'(buf, plaintag, promRef, never, infinity, active))

      fun highlightGuard(buf, plaintag, promRef, active) =
          highlightGuard'(buf, plaintag, promRef, never, infinity, active)

      (* Cursor *)
      fun getCursorIter buf =
          let
              val cursor = Gtk.textBufferGetInsert buf
              val iter = Gtk.textIterNew()
          in
              Gtk.textBufferGetIterAtMark(buf, iter, cursor);
              iter
          end

      fun scrollToCursor id =
          let
              val {view,buf,...} = BufferMap.lookupExistent(bufferMap, id)
	  in
              Gtk.textViewScrollToMark(view, Gtk.textBufferGetInsert buf,
                                       0.1, false, 0.0, 0.0)
	  end

      fun selectRange(buf, startiter, enditer) =
	  (Gtk.textBufferPlaceCursor(buf, enditer);
	   Gtk.textBufferMoveMarkByName(buf, "selection_bound", startiter))

      fun modifiedChanged id _ =
          let
              val {fileLabel,file,buf,...} = BufferMap.lookupExistent(bufferMap, id)
              val fileName = shortName (Option.getOpt(!file, "New file "^Int.toString id))
          in
              if Gtk.textBufferGetModified buf then
                  Gtk.labelSetText(fileLabel, fileName^"*")
              else
                  Gtk.labelSetText(fileLabel, fileName)
          end

      fun deleteText id (buf,[Gtk.INT off, Gtk.INT _, Gtk.STRING txt]) =
          let
              val {undo,highlight,...} = BufferMap.lookupExistent(bufferMap, id)
          in
              case (!undo) of
                  ((WAIT_INSERT _ | WAIT_DELETE _)::ur) =>
                  undo := ur
                | _ =>
                  undo := DELETE(off, txt) :: (!undo);
	      Promise.fulfill (!highlight, SOME off) handle Promise.Promise => ()
          end
        | deleteText _ _ = TextIO.output(TextIO.stdErr, "** Gtk is crazy: delete\n")

      fun findStartOfLine iter =
	  if Gtk.textIterGetChar iter = Char.ord #"\n" then
	      ignore (Gtk.textIterForwardChar iter)
	  else if Gtk.textIterIsStart iter then
	      ()
	  else
	      (Gtk.textIterBackwardChar iter; findStartOfLine iter)

      fun findNonSpace iter =
	  let
	      val c = Char.chr (Gtk.textIterGetChar iter)
	  in
	      if c = #" " orelse c = #"\t" then
	          (Gtk.textIterForwardChar iter; findNonSpace iter)
	      else ()
	  end

      fun insertText' (id, (buf,[Gtk.INT off, Gtk.STRING txt, Gtk.INT length])) =
          let
              val {undo,highlight,...} = BufferMap.lookupExistent(bufferMap, id)
          in
              case (!undo) of
                  ((WAIT_INSERT _ | WAIT_DELETE _)::ur) =>
                  undo := ur
                | _ =>
                  undo := INSERT(off, off+length) :: (!undo);
	      Promise.fulfill (!highlight, SOME off) handle Promise.Promise => ();
	      if txt <> "\n" orelse off = 0 then () else
	      let
		  val startiter = Gtk.textIterNew()
		  val _ = Gtk.textBufferGetIterAtOffset(buf, startiter, off-1)
		  val _ = findStartOfLine startiter
		  val enditer = Gtk.textIterCopy startiter
		  val _ = findNonSpace enditer
		  val indent = Gtk.textBufferGetText(buf, startiter, enditer, false)
	      in
		  Gtk.textBufferGetIterAtOffset(buf, startiter, off+1);
		  Gtk.textBufferInsert(buf, startiter, indent, ~1)
	      end
          end
        | insertText' _ = TextIO.output(TextIO.stdErr, "** Gtk is crazy: insert\n")

      fun insertText id args = Lock.sync Gtk.lock insertText' (id,args)

      fun userAction (id,begin) _ =
          let
              val {undo,...} = BufferMap.lookupExistent(bufferMap, id)
	      val action = if begin then BEGIN_ACTION else END_ACTION
          in
	      undo := action::(!undo)
	  end

      fun getSelection id =
          let
              val {buf,...} = BufferMap.lookupExistent(bufferMap, id)
	      val (txt,equal) = Lock.sync Gtk.lock
		  (fn () =>
		   let
		       val startiter = Gtk.textIterNew()
		       val enditer = Gtk.textIterNew()
		   in
		       Gtk.textBufferGetSelectionBounds(buf, startiter, enditer);
		       (Gtk.textBufferGetText(buf,startiter,enditer,false),
			Gtk.textIterEqual(startiter, enditer))
		   end) ()
          in
              if equal then NONE else SOME txt
          end

      fun getColFromOffset(iter, 0, col) = col
	| getColFromOffset(iter, offset, col) =
	  let
	      val c = Gtk.textIterGetChar iter
	  in
	      if c = Char.ord #"\t" then
		  let
		      val tabjump = 8 - col mod 8
		  in
		      Gtk.textIterForwardChar iter;
		      getColFromOffset(iter, offset-1, col+tabjump)
		  end
	      else
		  (Gtk.textIterForwardChar iter;
		   getColFromOffset(iter, offset-1, col+1))
	  end
      fun getColumn iter =
	  let
	      val line = Gtk.textIterGetLine iter
	      val offset = Gtk.textIterGetLineOffset iter
	      val iter' = Gtk.textIterCopy iter
	  in
	      Gtk.textIterSetLineOffset(iter', 0);
	      getColFromOffset(iter', offset, 0)
	  end
      fun getLine iter = Gtk.textIterGetLine iter + 1

      fun indentString n =
	  if !Config.useTabs
	  then String.tabulate(n div 8, const #"\t") ^
	       String.tabulate(n mod 8, const #" ")
	  else String.tabulate(n, const #" ")

      fun findNonSpace iter =
          let
              val c = Gtk.textIterGetChar iter
          in
              if c = ord #" " orelse c = ord #"\t"
              then (Gtk.textIterForwardChar iter; findNonSpace iter)
              else ()
          end

      fun doIndent(buf, line, endline, indent) =
	  if line = endline then ()
	  else
	      let
		  val startiter = Gtk.textIterNew()
		  val _ = Gtk.textBufferGetIterAtLine(buf, startiter, line)
		  val enditer = Gtk.textIterCopy startiter
		  val _ = findNonSpace enditer
		  val col = getColumn enditer
		  val col' = if indent then col+1 else Int.max(0, col-1)
	      in
		  Gtk.textBufferDelete(buf, startiter, enditer);
		  Gtk.textBufferGetIterAtLine(buf, startiter, line);
		  Gtk.textBufferInsert(buf, startiter, indentString col', ~1);
		  doIndent(buf, line+1, endline, indent)
	      end
	  
      fun selectWholeLines buf =
	  let
              val startiter = Gtk.textIterNew()
              val enditer = Gtk.textIterNew()
	  in
	      Gtk.textBufferGetSelectionBounds(buf, startiter, enditer);
	      Gtk.textIterSetLineOffset(startiter, 0);
	      Gtk.textIterGetLineOffset enditer = 0
	      orelse Gtk.textIterForwardLine enditer;
	      selectRange(buf, startiter, enditer)
	  end

      fun indentSelection(id, indent) =
	  Lock.sync Gtk.lock
	  (fn () =>
	  let
              val {buf,...} = BufferMap.lookupExistent(bufferMap, id)
	      val _ = selectWholeLines buf
              val startiter = Gtk.textIterNew()
              val enditer = Gtk.textIterNew()
	      val _ = Gtk.textBufferGetSelectionBounds(buf, startiter, enditer)
	      val startline = Gtk.textIterGetLine startiter
	      val endline = Gtk.textIterGetLine enditer
	      val endline = if Gtk.textIterGetLineOffset enditer = 0
			    then endline else endline+1
	  in
	      Gtk.textBufferBeginUserAction buf;
	      doIndent(buf, startline, endline, indent);
	      selectWholeLines buf;
	      Gtk.textBufferEndUserAction buf
	  end) ()

      fun setUndoSaveMarker undo =
	  undo := SAVE_MARKER::List.filter (fn x => x<>SAVE_MARKER) (!undo)

      fun undo' (undoBuf, buf, rollBack) =
          let
              fun checkUnmodified (SAVE_MARKER::_) =
                  Gtk.textBufferSetModified(buf, false)
                | checkUnmodified _ = ()
          in
              case (!undoBuf) of nil => ()
                            | (DELETE(off,txt)::ur) =>
                              let
                                  val startiter = Gtk.textIterNew()
				  val enditer = Gtk.textIterNew()
				  val len = String.size txt
                              in
                                  Gtk.textBufferGetIterAtOffset(buf,
                                                                startiter,
                                                                off);
                                  Gtk.textBufferInsert(buf, startiter, txt, len);
                                  Gtk.textBufferGetIterAtOffset(buf,
                                                                startiter,
                                                                off);
                                  Gtk.textBufferGetIterAtOffset(buf,
                                                                enditer,
                                                                off + len);
                                  selectRange(buf, startiter, enditer);
				  checkUnmodified ur;
				  undoBuf := ur;
				  if rollBack then undo'(undoBuf, buf, true) else ();
                                  undoBuf := WAIT_DELETE(off,txt) :: (!undoBuf)
                              end
                            | (INSERT(off1,off2)::ur) =>
                              let
                                  val startiter = Gtk.textIterNew()
                                  val enditer = Gtk.textIterNew()
                              in
                                  Gtk.textBufferGetIterAtOffset(buf,
                                                                startiter,
                                                                off1);
                                  Gtk.textBufferGetIterAtOffset(buf,
                                                                enditer,
                                                                off2);
                                  Gtk.textBufferPlaceCursor(buf, startiter);
                                  Gtk.textBufferDelete(buf, startiter,
                                                       enditer);
				  checkUnmodified ur;
				  undoBuf := ur;
				  if rollBack then undo'(undoBuf, buf, true) else ();
                                  undoBuf := WAIT_INSERT(off1,off2) :: (!undoBuf)
                              end
		            | (END_ACTION::usr) =>
			      (undoBuf := usr;
			       undo' (undoBuf, buf, true))
		            | (BEGIN_ACTION::usr) =>
			      (checkUnmodified usr;
			       undoBuf := usr)
		            | (SAVE_MARKER::usr) =>
			      (undoBuf := usr;
			       undo' (undoBuf, buf, rollBack))
                            | _ =>
			      if rollBack then undo'(undoBuf, buf, true) else ()

          end

      fun undo id =
	  let
              val {undo=undoBuf,buf,...} = BufferMap.lookupExistent(bufferMap, id)
	  in
	      Lock.sync Gtk.lock undo' (undoBuf, buf, false);
	      scrollToCursor id
	  end

      fun getFileName id =
          !(#file (BufferMap.lookupExistent(bufferMap, id)))

      fun getBuffer id =
          #buf (BufferMap.lookupExistent(bufferMap, id))

      fun getSyntaxHighlighting id =
          !(#highlightActive (BufferMap.lookupExistent(bufferMap, id)))

      fun forallBuffers f =
	  BufferMap.all f bufferMap

      fun setSyntaxHighlighting(id, active) =
	  let
	      val {buf,highlightActive,highlight,...} =
		  BufferMap.lookupExistent(bufferMap, id)
	  in
	      highlightActive := active;
	      if active then
		  (Promise.fulfill (!highlight, SOME 0)
		   handle Promise.Promise => ())
	      else
		  Lock.sync Gtk.lock
		  (fn () =>
		   let
		       val startiter = Gtk.textIterNew()
		       val enditer = Gtk.textIterNew()
		   in
		       Gtk.textBufferGetStartIter(buf, startiter);
		       Gtk.textBufferGetEndIter(buf, enditer);
		       Gtk.textBufferRemoveAllTags(buf, startiter, enditer)
		   end) ();
		  Promise.fulfill(!highlight, SOME 0)
		  handle Promise.Promise => ()
	  end

      fun getBufferByName f =
	  case BufferMap.find
	      (fn {file,...} => case !file of SOME f' => f' = f | _ => false) bufferMap of
	      NONE => (NONE, ~1)
	    | SOME {buf,id,...} => (SOME buf, id)

      fun getView id =
          #view (BufferMap.lookupExistent(bufferMap, id))

      fun getFileNames () =
	  BufferMap.fold (fn ({file,...},fs) => 
			  case !file of NONE => fs
			   | SOME f => f::fs) nil bufferMap

      fun haveModified () =
	  BufferMap.exists (fn {buf,...} => Gtk.textBufferGetModified buf)
	  bufferMap

      fun buffer {notebook,id,file,loadFile} =
          let
              val fileName = Option.getOpt(file, "New file "^Int.toString id)
              val scrolledwindow2_xa = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
              val scrolledwindow2_ya = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
              val scrolledwindow2 = Gtk.scrolledWindowNew(scrolledwindow2_xa,scrolledwindow2_ya)
              val _ = Gtk.scrolledWindowSetShadowType(scrolledwindow2,Gtk.SHADOW_NONE)
              val _ = Gtk.widgetShow scrolledwindow2
                      
              val newSource = Gtk.textViewNew()
              val _ = Gtk.widgetShow newSource
              val _ = Gtk.textViewSetEditable(newSource,true)
              val _ = Gtk.textViewSetJustification(newSource,Gtk.JUSTIFY_LEFT)
              val _ = Gtk.textViewSetWrapMode(newSource,Gtk.WRAP_NONE)
              val _ = Gtk.textViewSetCursorVisible(newSource,true)
              val _ = Gtk.textViewSetPixelsAboveLines(newSource,0)
              val _ = Gtk.textViewSetPixelsBelowLines(newSource,0)
              val _ = Gtk.textViewSetPixelsInsideWrap(newSource,0)
              val _ = Gtk.textViewSetLeftMargin(newSource,0)
              val _ = Gtk.textViewSetRightMargin(newSource,0)
              val _ = Gtk.textViewSetIndent(newSource,0)
              val buf = Gtk.textViewGetBuffer newSource
              val _ = Gtk.containerAdd(scrolledwindow2,newSource)
              val label1 = Gtk.labelNew (shortName fileName)
              val _ = Gtk.widgetShow label1
	      val _ = Gtk.notebookAppendPage(notebook, scrolledwindow2, label1)
              val page = Gtk.notebookPageNum(notebook, scrolledwindow2)
              val _ = Gtk.notebookSetCurrentPage(notebook, page)
              val _ = Gtk.widgetModifyFont(newSource, !stdFont)

	      val file = Option.map
		  (fn f => OS.Path.mkAbsolute {path=f, relativeTo=OS.FileSys.getDir()})
		  file

	      val highlightActive =
		  case file of
		      NONE => true
		    | SOME f =>
			  String.isSuffix ".aml" f orelse
			  String.isSuffix ".sml" f orelse
			  String.isSuffix ".asig" f

              val ret = {id=id,file=ref file,
                         fileLabel=label1,
                         view=newSource,buf=buf,
                         tags=makeTags buf,
                         undo=ref [SAVE_MARKER],
                         lastSearchPos=ref 0,
			 highlightActive = ref highlightActive,
			 highlight=ref(Promise.promise())}
          in
              if loadFile then
              case file of NONE => ()
                         | SOME f =>
		  let
		      val fileD = TextIO.openIn f
		      val text = TextIO.inputAll fileD
		      val text = Gtk.latin1ToUtf8 text
		      val _ = TextIO.closeIn fileD
		  in
		      Lock.sync Gtk.lock
		      (fn () =>
		       let
			   val iter = Gtk.textIterNew()
		       in
			   Gtk.textBufferSetText(buf, text, ~1);
			   Gtk.textBufferSetModified(buf, false);
			   Gtk.textBufferGetStartIter(buf, iter);
			   Gtk.textBufferPlaceCursor(buf, iter)
		       end) ()
		    end
		handle IO.Io _ => FileDialog.message ("I/O error: Could not open file " ^ f)
              else ();
              Gtk.signalConnect(buf, "modified-changed", modifiedChanged id);
              Gtk.textBufferConnectSpecialSignals buf;
              Gtk.signalConnect(buf, "delete-text", deleteText id);
              Gtk.signalConnect(buf, "insert-text", insertText id);
              Gtk.signalConnect(buf, "begin-user-action", userAction(id,true));
              Gtk.signalConnect(buf, "end-user-action", userAction(id,false));
              BufferMap.insertDisjoint(bufferMap, id, ret);
	      spawn highlightGuard (buf, #plain(#tags ret),
				    #highlight ret, #highlightActive ret);
              ret
          end

      fun canClose id =
          let
              val {buf,...} = BufferMap.lookupExistent(bufferMap, id)
	  in
              not (Gtk.textBufferGetModified buf)
          end

      fun close id =
          let
              val {file,buf,highlight,...} = BufferMap.lookupExistent(bufferMap, id)
	      val prom = Promise.promise()
          in
              (BufferMap.removeExistent(bufferMap, id);
               Promise.fulfill(prom, NONE);
	       highlight := prom)
          end

      fun save id =
          let
              val {id,file,buf,undo,...} = BufferMap.lookupExistent(bufferMap, id)
              val modified = Gtk.textBufferGetModified buf
          in
              case !file of NONE => false
                          | SOME f =>
                            (if modified then
                                 let
                                     val file = TextIO.openOut f
				     val str = Lock.sync Gtk.lock
					 (fn () =>
					  let
					      val startiter = Gtk.textIterNew()
					      val _ = Gtk.textBufferGetStartIter(buf,startiter)
					      val enditer = Gtk.textIterNew()
					      val _ = Gtk.textBufferGetEndIter(buf,enditer)
					  in
					      Gtk.textBufferGetText(buf, startiter, enditer, false)
					  end) ()
                                     val str = Gtk.utf8ToLatin1 str
                                 in 
                                     TextIO.output(file, str);
                                     TextIO.closeOut file;
                                     Gtk.textBufferSetModified(buf, false);
				     setUndoSaveMarker undo
                                 end handle IO.Io _ => FileDialog.message ("I/O error: Could not save file " ^ f)
                             else ();
                             true)
          end

      fun saveAs (id, fileName) =
          let
              val {id,file,fileLabel,buf,...} = BufferMap.lookupExistent(bufferMap, id)
          in
              file := SOME fileName;
              Gtk.labelSetText(fileLabel, shortName fileName);
              Gtk.textBufferSetModified(buf, true);
              save id;
              ()
          end

      fun match (iter, back, txt, i, caseSensitive) =
          if (if caseSensitive then
                  Gtk.textIterGetChar iter = ord (String.sub(txt,i))
              else
                  let
                      val c = Gtk.textIterGetChar iter
                      val c = if c<=Char.maxOrd then
                                  ord (Char.toLower (chr c))
                              else c
                  in
                      c = ord (Char.toLower (String.sub(txt,i)))
                  end)
          then if i=String.size txt - 1 then 
                   (Gtk.textIterSetOffset(iter,back);
                    true)
               else if Gtk.textIterForwardChar iter 
               then match (iter, back, txt, i+1, caseSensitive)
               else (Gtk.textIterSetOffset(iter,back);
                     false)
          else (Gtk.textIterSetOffset(iter,back);
                false)

      fun find' (iter, off, txt, caseSensitive, wrapAround) =
          match (iter, off, txt, 0, caseSensitive) orelse
	   (if Gtk.textIterForwardChar iter then
                find' (iter, off+1, txt, caseSensitive, wrapAround)
	    else
	        not wrapAround andalso
		(Gtk.textIterSetOffset(iter, 0);
		 find' (iter, 0, txt, caseSensitive, true)))

      fun find(id, txt, caseSensitive) =
	  Lock.sync Gtk.lock
	  (fn () =>
          let
              val {view,buf,lastSearchPos,...} = BufferMap.lookupExistent(bufferMap, id)
              val iter = getCursorIter buf
              val off = Gtk.textIterGetOffset iter
              val off = if (off = (!lastSearchPos)) andalso Gtk.textIterForwardChar iter
                        then off + 1
                        else off
          in
              if find' (iter, off, txt, caseSensitive, false) then
                  let
                      val iter' = Gtk.textIterCopy iter
                  in
                      Gtk.textIterForwardChars(iter',size txt);
                      lastSearchPos := Gtk.textIterGetOffset iter;
                      selectRange(buf,iter,iter');
		      scrollToCursor id;
		      true
                  end
              else false
          end) ()

      fun replace(id, replaceString) =
	  Lock.sync Gtk.lock
	  (fn () =>
          let
              val {buf,...} = BufferMap.lookupExistent(bufferMap, id)
              val startiter = Gtk.textIterNew()
              val enditer = Gtk.textIterNew()
          in
              Gtk.textBufferGetSelectionBounds(buf, startiter, enditer);
	      Gtk.textBufferBeginUserAction buf;
	      Gtk.textBufferDelete(buf, startiter, enditer);
	      Gtk.textBufferInsert(buf, startiter, replaceString, ~1);
	      Gtk.textBufferEndUserAction buf
          end) ()

      fun changeFonts() =
          BufferMap.app (fn {view,...} =>
                            Gtk.widgetModifyFont(view, !Config.stdFont))
                        bufferMap

      fun changeColors() =
	  BufferMap.app
	  (fn {buf,...} => Config.changeColors buf) bufferMap
   end
