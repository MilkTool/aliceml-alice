(*
 * Authors:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2005
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure MkHashImpMap from "x-alice:/lib/data/MkHashImpMap"
import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Core from "x-alice:/lib/gtk/Core"
import structure FileDialog from "FileDialog"
import structure Config from "Config"

structure Buffer =
   struct
      open Config

      structure BufferMap = MkHashImpMap(Int)

      datatype undo = INSERT of (int * int)
                    | DELETE of (int * string)
                    | WAIT_INSERT of (int * int)
                    | WAIT_DELETE of (int * string)

      type buffer = {id: int,
                     file: string option ref,
                     fileLabel: Gtk.object,
                     view: Gtk.object,
                     buf: Gtk.object,
                     tags: tags,
                     undo: undo list ref,
                     lastSearchPos: int ref}

      val bufferMap : buffer BufferMap.map = BufferMap.map()

      fun shortName s =
          let
              fun lastSlash i j = if j=size s then i
                                  else if String.sub(s,j)= #"/" then lastSlash j (j+1)
                                  else lastSlash i (j+1)
          in
              String.extract(s,1 + lastSlash ~1 0, NONE)
          end

      (* Cursor *)
      fun getCursorIter buf =
          let
              val cursor = Gtk.textBufferGetInsert buf
              val iter = Gtk.textIterNew()
          in
              Gtk.textBufferGetIterAtMark(buf, iter, cursor);
              iter
          end

      fun selectRange(buf, startiter, enditer) =
	  (Gtk.textBufferPlaceCursor(buf, enditer);
	   Gtk.textBufferMoveMarkByName(buf, "selection_bound", startiter))

      fun modifiedChanged id _ =
          let
              val {fileLabel,file,buf,...} = BufferMap.lookupExistent(bufferMap, id)
              val fileName = shortName (Option.getOpt(!file, "New file "^Int.toString id))
          in
              if Gtk.textBufferGetModified buf then
                  Gtk.labelSetText(fileLabel, fileName^"*")
              else
                  Gtk.labelSetText(fileLabel, fileName)
          end

      fun deleteText id (buf,[Gtk.INT off, Gtk.INT _, Gtk.STRING txt]) =
          let
              val {undo,...} = BufferMap.lookupExistent(bufferMap, id)
          in
              case (!undo) of
                  ((WAIT_INSERT _ | WAIT_DELETE _)::ur) =>
                  undo := ur
                | _ =>
                  undo := DELETE(off, txt) :: (!undo)
          end
        | deleteText _ _ = print "Gtk is crazy: delete"

      fun findStartOfLine iter =
	  if Gtk.textIterGetChar iter = Char.ord #"\n" then
	      ignore (Gtk.textIterForwardChar iter)
	  else if Gtk.textIterIsStart iter then
	      ()
	  else
	      (Gtk.textIterBackwardChar iter; findStartOfLine iter)

      fun findNonSpace iter =
	  let
	      val c = Char.chr (Gtk.textIterGetChar iter)
	  in
	      if c = #" " orelse c = #"\t" then
	          (Gtk.textIterForwardChar iter; findNonSpace iter)
	      else ()
	  end

      fun insertText id (buf,[Gtk.INT off, Gtk.STRING txt, Gtk.INT length]) =
          let
              val {undo,...} = BufferMap.lookupExistent(bufferMap, id)
          in
              case (!undo) of
                  ((WAIT_INSERT _ | WAIT_DELETE _)::ur) =>
                  undo := ur
                | _ =>
                  undo := INSERT(off, off+length) :: (!undo);
	      if txt <> "\n" orelse off = 0 then () else
	      let
		  val startiter = Gtk.textIterNew()
		  val _ = Gtk.textBufferGetIterAtOffset(buf, startiter, off-1)
		  val _ = findStartOfLine startiter
		  val enditer = Gtk.textIterCopy startiter
		  val _ = findNonSpace enditer
		  val indent = Gtk.textBufferGetText(buf, startiter, enditer, false)
	      in
		  Gtk.textBufferGetIterAtOffset(buf, startiter, off+1);
		  Gtk.textBufferInsert(buf, startiter, indent, ~1)
	      end
          end
        | insertText _ _ = print "Gtk is crazy: insert"

      fun getSelection id =
          let
              val {buf,...} = BufferMap.lookupExistent(bufferMap, id)
              val startiter = Gtk.textIterNew()
              val enditer = Gtk.textIterNew()
          in
              Gtk.textBufferGetSelectionBounds(buf, startiter, enditer);
              if Gtk.textIterEqual(startiter, enditer) then NONE
              else SOME (Gtk.textBufferGetText(buf,
                                               startiter,enditer,
                                               false))
          end

      fun doIndent(buf, line, endline, indent) =
	  if line > endline then ()
	  else
	      let
		  val iter = Gtk.textIterNew()
		  val _ = Gtk.textBufferGetIterAtLine(buf, iter, line)
	      in
		  if indent then
		      Gtk.textBufferInsert(buf,iter," ",~1)
		  else
		      let
			  val c = Gtk.textIterGetChar iter
		      in
			  if c = ord #"\t" then
			      let
				  val enditer = Gtk.textIterCopy iter
			      in
				  Gtk.textIterForwardChar enditer;
				  Gtk.textBufferDelete(buf,iter,enditer)
			      end
			  else if c = ord #" " then
			      let
				  val enditer = Gtk.textIterCopy iter
			      in
				  Gtk.textIterForwardChar enditer;
				  Gtk.textBufferDelete(buf,iter,enditer)
			      end
			       else ()
		      end;
		  doIndent(buf, line+1, endline, indent)
	      end
	  
      fun selectWholeLines buf =
	  let
              val startiter = Gtk.textIterNew()
              val enditer = Gtk.textIterNew()
	      val _ = Gtk.textBufferGetSelectionBounds(buf, startiter, enditer);
	      val _ = Gtk.textIterSetLine(startiter,
					  Gtk.textIterGetLine startiter)
	      val _ = if Gtk.textIterForwardLine enditer then
		  Gtk.textIterBackwardChar enditer else false
	  in
	      selectRange(buf, startiter, enditer)
	  end

      fun indentSelection(id, indent) =
	  let
              val {buf,...} = BufferMap.lookupExistent(bufferMap, id)
	      val _ = selectWholeLines buf
              val startiter = Gtk.textIterNew()
              val enditer = Gtk.textIterNew()
	      val _ = Gtk.textBufferGetSelectionBounds(buf, startiter, enditer);
	  in
	      doIndent(buf,
		       Gtk.textIterGetLine startiter,
		       Gtk.textIterGetLine enditer,
		       indent);
	      selectWholeLines buf
	  end

      fun undo id =
          let
              val {undo,buf,...} = BufferMap.lookupExistent(bufferMap, id)
              fun checkUnmodified nil =
                  Gtk.textBufferSetModified(buf, false)
                | checkUnmodified ur = ()
          in
              case (!undo) of nil => ()
                            | (DELETE(off,txt)::ur) =>
                              let
                                  val iter = Gtk.textIterNew()
                              in
                                  Gtk.textBufferGetIterAtOffset(buf,
                                                                iter,
                                                                off);
                                  undo := WAIT_DELETE(off,txt) :: ur;
                                  Gtk.textBufferInsert(buf, iter, txt,
                                                       String.size txt);
                                  checkUnmodified ur
                              end
                            | (INSERT(off1,off2)::ur) =>
                              let
                                  val startiter = Gtk.textIterNew()
                                  val enditer = Gtk.textIterNew()
                              in
                                  Gtk.textBufferGetIterAtOffset(buf,
                                                                startiter,
                                                                off1);
                                  Gtk.textBufferGetIterAtOffset(buf,
                                                                enditer,
                                                                off2);
                                  undo := WAIT_INSERT(off1,off2) :: ur;
                                  Gtk.textBufferDelete(buf, startiter,
                                                       enditer);
                                  checkUnmodified ur
                              end
                            | _ => ()
          end

      fun getFileName id =
          !(#file (BufferMap.lookupExistent(bufferMap, id)))

      fun getBuffer id =
          #buf (BufferMap.lookupExistent(bufferMap, id))

      fun getBufferByName f =
	  case BufferMap.find
	      (fn {file,...} => case !file of SOME f' => shortName f' = f | _ => false) bufferMap of
	      NONE => (NONE, ~1)
	    | SOME {buf,id,...} => (SOME buf, id)

      fun getView id =
          #view (BufferMap.lookupExistent(bufferMap, id))

      fun buffer {notebook,id,file,loadFile} =
          let
              val fileName = Option.getOpt(file, "New file "^Int.toString id)
              val scrolledwindow2_xa = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
              val scrolledwindow2_ya = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
              val scrolledwindow2 = Gtk.scrolledWindowNew(scrolledwindow2_xa,scrolledwindow2_ya)
              val _ = Gtk.scrolledWindowSetShadowType(scrolledwindow2,Gtk.SHADOW_NONE)
              val _ = Gtk.widgetShow scrolledwindow2
                      
              val newSource = Gtk.textViewNew()
              val _ = Gtk.widgetShow newSource
              val _ = Gtk.textViewSetEditable(newSource,true)
              val _ = Gtk.textViewSetJustification(newSource,Gtk.JUSTIFY_LEFT)
              val _ = Gtk.textViewSetWrapMode(newSource,Gtk.WRAP_NONE)
              val _ = Gtk.textViewSetCursorVisible(newSource,true)
              val _ = Gtk.textViewSetPixelsAboveLines(newSource,0)
              val _ = Gtk.textViewSetPixelsBelowLines(newSource,0)
              val _ = Gtk.textViewSetPixelsInsideWrap(newSource,0)
              val _ = Gtk.textViewSetLeftMargin(newSource,0)
              val _ = Gtk.textViewSetRightMargin(newSource,0)
              val _ = Gtk.textViewSetIndent(newSource,0)
              val buf = Gtk.textViewGetBuffer newSource
              val _ = Gtk.containerAdd(scrolledwindow2,newSource)
              val label1 = Gtk.labelNew (shortName fileName)
              val _ = Gtk.widgetShow label1
	      val _ = Gtk.notebookAppendPage(notebook, scrolledwindow2, label1)
              val page = Gtk.notebookPageNum(notebook, scrolledwindow2)
              val _ = Gtk.notebookSetCurrentPage(notebook, page)
              val _ = Gtk.widgetModifyFont(newSource, stdFont)

              val ret = {id=id,file=ref file,
                         fileLabel=label1,
                         view=newSource,buf=buf,
                         tags=makeTags buf,
                         undo=ref nil,
                         lastSearchPos=ref 0}
          in
              if loadFile then
              case file of NONE => ()
                         | SOME f =>
                           let
                               val fileD = TextIO.openIn f
                               val text = TextIO.inputAll fileD
                               val text = Core.latin1ToUtf8 text
                               val iter = Gtk.textIterNew()
                           in
                               Gtk.textBufferSetText(buf, text, ~1);
                               Gtk.textBufferSetModified(buf, false);
                               Gtk.textBufferGetStartIter(buf, iter);
                               Gtk.textBufferPlaceCursor(buf, iter)
                           end handle IO.Io _ => FileDialog.message "IO error. Could not open file."
              else ();
              Gtk.signalConnect(buf, "modified-changed", modifiedChanged id);
              Gtk.textBufferConnectSpecialSignals buf;
              Gtk.signalConnect(buf, "delete-text", deleteText id);
              Gtk.signalConnect(buf, "insert-text", insertText id);
              BufferMap.insertDisjoint(bufferMap, id, ret);
              ret
          end

      fun close id =
          let
              val {file,buf,...} = BufferMap.lookupExistent(bufferMap, id)
              val modified = Gtk.textBufferGetModified buf
          in
              if modified then
                  false
              else
                  (BufferMap.removeExistent(bufferMap, id);
                   true)
          end

      fun save id =
          let
              val {id,file,buf,...} = BufferMap.lookupExistent(bufferMap, id)
              val modified = Gtk.textBufferGetModified buf
          in
              case !file of NONE => false
                          | SOME f =>
                            (if modified then
                                 let
                                     val file = TextIO.openOut f
                                     val startiter = Gtk.textIterNew()
                                     val _ = Gtk.textBufferGetStartIter(buf,startiter)
                                     val enditer = Gtk.textIterNew()
                                     val _ = Gtk.textBufferGetEndIter(buf,enditer)
                                     val str = Gtk.textBufferGetText(buf, startiter, enditer, false)
                                     val str = Core.utf8ToLatin1 str
                                 in 
                                     TextIO.output(file, str);
                                     TextIO.closeOut file;
                                     Gtk.textBufferSetModified(buf, false)
                                 end handle IO.Io _ => FileDialog.message "IO Error. Could not save file."
                             else ();
                             true)
          end

      fun saveAs (id, fileName) =
          let
              val {id,file,fileLabel,buf,...} = BufferMap.lookupExistent(bufferMap, id)
          in
              file := SOME fileName;
              Gtk.labelSetText(fileLabel, shortName fileName);
              Gtk.textBufferSetModified(buf, true);
              save id;
              ()
          end

      fun match (iter, back, txt, i, caseSensitive) =
          if (if caseSensitive then
                  Gtk.textIterGetChar iter = ord (String.sub(txt,i))
              else
                  let
                      val c = Gtk.textIterGetChar iter
                      val c = if c<=Char.maxOrd then
                                  ord (Char.toLower (chr c))
                              else c
                  in
                      c = ord (Char.toLower (String.sub(txt,i)))
                  end)
          then if i=String.size txt - 1 then 
                   (Gtk.textIterSetOffset(iter,back);
                    true)
               else if Gtk.textIterForwardChar iter 
               then match (iter, back, txt, i+1, caseSensitive)
               else (Gtk.textIterSetOffset(iter,back);
                     false)
          else (Gtk.textIterSetOffset(iter,back);
                false)

      fun find' (iter, off, txt, caseSensitive, wrapAround) =
          match (iter, off, txt, 0, caseSensitive) orelse
	   (if Gtk.textIterForwardChar iter then
                find' (iter, off+1, txt, caseSensitive, wrapAround)
	    else
	        not wrapAround andalso
		(Gtk.textIterSetOffset(iter, 0);
		 find' (iter, 0, txt, caseSensitive, true)))

      fun find id txt caseSensitive =
          let
              val {view,buf,lastSearchPos,...} = BufferMap.lookupExistent(bufferMap, id)
              val iter = getCursorIter buf
              val off = Gtk.textIterGetOffset iter
              val off = if (off = (!lastSearchPos)) andalso Gtk.textIterForwardChar iter
                        then off + 1
                        else off
          in
              if find' (iter, off, txt, caseSensitive, false) then
                  let
                      val iter' = Gtk.textIterCopy iter
                  in
                      Gtk.textIterForwardChars(iter',size txt);
                      lastSearchPos := Gtk.textIterGetOffset iter;
                      selectRange(buf,iter,iter');
                      Gtk.textViewScrollToMark(view,
                                               Gtk.textBufferGetInsert buf,
                                               0.0,false,0.0,0.0);
		      true
                  end
              else false
          end

      fun replace(id, replaceString) =
          let
              val {buf,...} = BufferMap.lookupExistent(bufferMap, id)
              val startiter = Gtk.textIterNew()
              val enditer = Gtk.textIterNew()
          in
              Gtk.textBufferGetSelectionBounds(buf, startiter, enditer);
	      Gtk.textBufferDelete(buf, startiter, enditer);
	      Gtk.textBufferInsert(buf, startiter, replaceString, ~1)
          end

   end
