(*
 * Authors:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2005
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Core from "x-alice:/lib/gtk/Core"
import structure Gui from "Gui"

structure FileDialog =
    struct
        fun openFile(msg,fileName) =
            let
	        val fileSel = Gtk.fileSelectionNew msg
		val _ = if fileName <> "" then
		         Gtk.fileSelectionSetFilename(fileSel, fileName)
			else ()
                val _ = Gtk.windowSetPosition (fileSel, Gtk.WIN_POS_MOUSE)
                val _ = Gtk.widgetShowAll fileSel
                val response = Gtk.dialogRun fileSel
                val ret =
                    case Gtk.IntToGtkResponseType response of
                        Gtk.RESPONSE_OK =>
                        SOME (Gtk.fileSelectionGetFilename fileSel)
                      | _ => NONE
            in
                Gtk.widgetDestroy fileSel;
                ret
            end

        fun modifiedWarning(msg1,msg2,close,arg) =
            let
                val modifiedDia = Gui.modified_dialog
            in
		Gtk.labelSetText(Gui.modified_msg1, msg1);
		Gtk.labelSetText(Gui.modified_msg2, msg2);
		Gtk.dialogSetDefaultResponse(modifiedDia,
					     Gtk.GtkResponseTypeToInt
					     Gtk.RESPONSE_CANCEL);
                (*Gtk.windowSetKeepAbove (modifiedDia, true); Gtk 2.4 *)
                Gtk.widgetShowAll modifiedDia;
		Gtk.widgetMap modifiedDia;
		Gtk.windowSetModal(modifiedDia, true);
		case Gtk.IntToGtkResponseType (Gtk.dialogRun modifiedDia) of
		    Gtk.RESPONSE_CLOSE => close arg
		  | _ => ();
                Gtk.widgetUnmap modifiedDia;
		Gtk.windowSetModal(modifiedDia, false)
            end

        fun quitWarning (interactive,filename) =
            let
                val dia = Gui.save_on_quit_dialog
            in
		Gtk.widgetSetSensitive(Gui.save_on_quit_cancel_button,
				       interactive);
		Gtk.labelSetText(Gui.save_on_quit_label,
				 "File '"^filename^"' was modified.");
		Gtk.dialogSetDefaultResponse(dia,
					     Gtk.GtkResponseTypeToInt
					     Gtk.RESPONSE_OK);
                (*Gtk.windowSetKeepAbove (modifiedDia, true); Gtk 2.4 *)
                Gtk.widgetShowAll dia;
		Gtk.widgetMap dia;
		Gtk.windowSetModal(dia, true);
		Gtk.IntToGtkResponseType (Gtk.dialogRun dia)
		before (Gtk.widgetUnmap dia;
			Gtk.windowSetModal(dia, false))
            end

        fun message msg =
            let
                val msgDia =
                    Gtk.messageDialogNew(Gui.mainwidget,
                                         Gtk.DIALOG_MODAL,
                                         Gtk.MESSAGE_WARNING,
                                         Gtk.BUTTONS_CLOSE,
                                         msg,
                                         Core.LIST nil)
            in
                Gtk.dialogRun msgDia;
                Gtk.widgetDestroy msgDia
            end
    end
