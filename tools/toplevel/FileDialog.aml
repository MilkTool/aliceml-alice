(*
 * Authors:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2005
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Core from "x-alice:/lib/gtk/Core"
import structure Gui from "Gui"

structure FileDialog =
    struct
        fun openFile(msg,fileName) =
            let
	        val fileSel = Gtk.fileSelectionNew msg
		val _ = if fileName <> "" then
		         Gtk.fileSelectionSetFilename(fileSel, fileName)
			else ()
                val _ = Gtk.windowSetPosition (fileSel, Gtk.WIN_POS_MOUSE)
                val _ = Gtk.widgetShowAll fileSel
                val response = Gtk.dialogRun fileSel
                val ret =
                    case Gtk.IntToGtkResponseType response of
                        Gtk.RESPONSE_OK =>
                        SOME (Gtk.fileSelectionGetFilename fileSel)
                      | _ => NONE
            in
                Gtk.widgetDestroy fileSel;
                ret
            end

        fun modifiedWarning(msg1,msg2,close,arg) =
            let
                val modifiedDia = Gtk.dialogNew()
                val discard = Gtk.dialogAddButton(modifiedDia, "Discard",0)
                val cancel = Gtk.dialogAddButton(modifiedDia, "Cancel",1)
                val vbox = Gtk.dialogGetFieldVbox modifiedDia

		val hbox1 = Gtk.hboxNew(false,0)
		val image123 = Gtk.imageNewFromStock("gtk-dialog-warning",Gtk.IntToGtkIconSize(6))
		val vbox4 = Gtk.vboxNew(true,0)
		val label1 = Gtk.labelNew msg1
		val label2 = Gtk.labelNew msg2
		val _ = Gtk.boxPackStart(vbox4,label1,false,false,0)
		val _ = Gtk.boxPackStart(vbox4,label2,false,false,0)
		val _ = Gtk.boxPackStart(hbox1,image123,true,true,0)
		val _ = Gtk.boxPackStart(hbox1,vbox4,true,true,0)
                val _ = Gtk.containerAdd(vbox, hbox1)
            in
                Gtk.windowSetTitle(modifiedDia, "Modifications Not Saved");
		Gtk.dialogSetDefaultResponse(modifiedDia, 1);
                (*Gtk.windowSetKeepAbove (modifiedDia, true); Gtk 2.4 *)
                Gtk.windowSetPosition (modifiedDia, Gtk.WIN_POS_MOUSE);
                Gtk.widgetShowAll modifiedDia;
                if Gtk.dialogRun modifiedDia = 0 then
                    close arg
                else ();
                Gtk.widgetDestroy modifiedDia
            end
        fun message msg =
            let
                val msgDia =
                    Gtk.messageDialogNew(Gui.mainwidget,
                                         Gtk.DIALOG_MODAL,
                                         Gtk.MESSAGE_WARNING,
                                         Gtk.BUTTONS_CLOSE,
                                         msg,
                                         Core.LIST nil)
            in
                Gtk.dialogRun msgDia;
                Gtk.widgetDestroy msgDia
            end
    end
