(*
 * This is a generated file, created by alice-glade.
 * Modifications may get lost.
 *)


import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"

import structure Key from "x-alice:/lib/gtk/Key"

structure Gui =
  struct
    structure Helpers = struct
      val accelGroup = Gtk.accelGroupNew()
      val tooltips = Gtk.tooltipsNew()
      fun containerAddList(cont, children) = 
        List.app (fn c => Gtk.containerAdd(cont,c)) children
    end

    val mainwidget = Gtk.windowNew(Gtk.WINDOW_TOPLEVEL)
    val _ = Gtk.windowSetTitle(mainwidget,"Alice")
    val _ = Gtk.windowAddAccelGroup(mainwidget,Helpers.accelGroup)
    val vbox1 = Gtk.vboxNew(false,0)
    val menubar1 = Gtk.menuBarNew()
    val _ = Gtk.widgetSetSizeRequest(menubar1,188,28)
    val menuitem7 = Gtk.menuItemNewWithMnemonic("_File")
    val menuitem7_menu = Gtk.menuNew()
    val new1 = Gtk.imageMenuItemNewWithMnemonic("_New")
    val _ = Gtk.widgetAddAccelerator(new1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_N,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image490 = Gtk.imageNewFromStock("gtk-new",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(new1,image490)
    val open1 = Gtk.imageMenuItemNewWithMnemonic("_Open...")
    val _ = Gtk.widgetAddAccelerator(open1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_O,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image491 = Gtk.imageNewFromStock("gtk-open",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(open1,image491)
    val save1 = Gtk.imageMenuItemNewWithMnemonic("_Save")
    val _ = Gtk.widgetAddAccelerator(save1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_S,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image492 = Gtk.imageNewFromStock("gtk-save",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(save1,image492)
    val save_as1 = Gtk.imageMenuItemNewWithMnemonic("Save _As...")
    val _ = Gtk.widgetAddAccelerator(save_as1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_S,(Gdk.GdkModifierTypeToInt Gdk.SHIFT_MASK)+(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image493 = Gtk.imageNewFromStock("gtk-save-as",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(save_as1,image493)
    val close1 = Gtk.imageMenuItemNewWithMnemonic("_Close")
    val _ = Gtk.widgetAddAccelerator(close1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_W,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image494 = Gtk.imageNewFromStock("gtk-close",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(close1,image494)
    val separatormenuitem1 = Gtk.menuItemNew()
    val compilefile = Gtk.imageMenuItemNewWithMnemonic("Co_mpile")
    val _ = Gtk.tooltipsSetTip(Helpers.tooltips,compilefile,"Compile the current file to a component","")
    val _ = Gtk.widgetSetSensitive(compilefile,false)
    val _ = Gtk.widgetAddAccelerator(compilefile,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_K,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image495 = Gtk.imageNewFromStock("gtk-convert",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(compilefile,image495)
    val separator3 = Gtk.menuItemNew()
    val quit1 = Gtk.imageMenuItemNewWithMnemonic("_Quit")
    val _ = Gtk.widgetAddAccelerator(quit1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Q,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image496 = Gtk.imageNewFromStock("gtk-quit",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(quit1,image496)
    val _ = Helpers.containerAddList(menuitem7_menu,[new1,open1,save1,save_as1,close1,separatormenuitem1,compilefile,separator3,quit1])
    val _ = Gtk.menuItemSetSubmenu(menuitem7,menuitem7_menu)
    val menuitem8 = Gtk.menuItemNewWithMnemonic("_Edit")
    val menuitem8_menu = Gtk.menuNew()
    val undo = Gtk.imageMenuItemNewWithMnemonic("_Undo")
    val _ = Gtk.widgetAddAccelerator(undo,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Z,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image497 = Gtk.imageNewFromStock("gtk-undo",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(undo,image497)
    val cut1 = Gtk.imageMenuItemNewWithMnemonic("Cu_t")
    val _ = Gtk.widgetAddAccelerator(cut1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_X,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image498 = Gtk.imageNewFromStock("gtk-cut",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(cut1,image498)
    val copy1 = Gtk.imageMenuItemNewWithMnemonic("_Copy")
    val _ = Gtk.widgetAddAccelerator(copy1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_C,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image499 = Gtk.imageNewFromStock("gtk-copy",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(copy1,image499)
    val paste1 = Gtk.imageMenuItemNewWithMnemonic("_Paste")
    val _ = Gtk.widgetAddAccelerator(paste1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_V,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image500 = Gtk.imageNewFromStock("gtk-paste",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(paste1,image500)
    val delete1 = Gtk.imageMenuItemNewWithMnemonic("_Delete")
    val image501 = Gtk.imageNewFromStock("gtk-delete",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(delete1,image501)
    val separator9 = Gtk.menuItemNew()
    val indent_region = Gtk.imageMenuItemNewWithMnemonic("_Indent Region")
    val _ = Gtk.widgetAddAccelerator(indent_region,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_greater,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image502 = Gtk.imageNewFromStock("gtk-goto-last",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(indent_region,image502)
    val outdent_region = Gtk.imageMenuItemNewWithMnemonic("_Outdent Region")
    val _ = Gtk.widgetAddAccelerator(outdent_region,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_less,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image503 = Gtk.imageNewFromStock("gtk-goto-first",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(outdent_region,image503)
    val separator6 = Gtk.menuItemNew()
    val find = Gtk.imageMenuItemNewWithMnemonic("_Find...")
    val _ = Gtk.widgetAddAccelerator(find,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_F,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image504 = Gtk.imageNewFromStock("gtk-find",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(find,image504)
    val find_again = Gtk.imageMenuItemNewWithMnemonic("Find A_gain")
    val _ = Gtk.widgetAddAccelerator(find_again,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_G,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image505 = Gtk.imageNewFromStock("gtk-find",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(find_again,image505)
    val replace = Gtk.imageMenuItemNewWithMnemonic("_Replace...")
    val _ = Gtk.widgetAddAccelerator(replace,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_R,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image506 = Gtk.imageNewFromStock("gtk-find-and-replace",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(replace,image506)
    val separator5 = Gtk.menuItemNew()
    val go_to_line = Gtk.imageMenuItemNewWithMnemonic("Go to _Line...")
    val _ = Gtk.widgetAddAccelerator(go_to_line,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_L,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image507 = Gtk.imageNewFromStock("gtk-jump-to",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(go_to_line,image507)
    val jump_to_last_error = Gtk.imageMenuItemNewWithMnemonic("Jump to _Error")
    val _ = Gtk.widgetAddAccelerator(jump_to_last_error,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_E,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image508 = Gtk.imageNewFromStock("gtk-dialog-warning",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(jump_to_last_error,image508)
    val separator14 = Gtk.menuItemNew()
    val preferencesM = Gtk.imageMenuItemNewWithMnemonic("_Preferences...")
    val image509 = Gtk.imageNewFromStock("gtk-preferences",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(preferencesM,image509)
    val _ = Helpers.containerAddList(menuitem8_menu,[undo,cut1,copy1,paste1,delete1,separator9,indent_region,outdent_region,separator6,find,find_again,replace,separator5,go_to_line,jump_to_last_error,separator14,preferencesM])
    val _ = Gtk.menuItemSetSubmenu(menuitem8,menuitem8_menu)
    val feed1 = Gtk.menuItemNewWithMnemonic("Ev_al")
    val _ = Gtk.widgetSetSensitive(feed1,false)
    val feed1_menu = Gtk.menuNew()
    val feedregion = Gtk.imageMenuItemNewWithMnemonic("Feed _Region")
    val _ = Gtk.widgetSetSensitive(feedregion,false)
    val _ = Gtk.widgetAddAccelerator(feedregion,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Return,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image510 = Gtk.imageNewFromStock("gtk-execute",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(feedregion,image510)
    val feedfile = Gtk.imageMenuItemNewWithMnemonic("Feed _File")
    val _ = Gtk.widgetSetSensitive(feedfile,false)
    val _ = Gtk.widgetAddAccelerator(feedfile,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Return,(Gdk.GdkModifierTypeToInt Gdk.SHIFT_MASK)+(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image511 = Gtk.imageNewFromStock("gtk-execute",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(feedfile,image511)
    val separator4 = Gtk.menuItemNew()
    val interrupt = Gtk.imageMenuItemNewWithMnemonic("_Interrupt")
    val _ = Gtk.tooltipsSetTip(Helpers.tooltips,interrupt,"Interrupt current evaluation","")
    val _ = Gtk.widgetAddAccelerator(interrupt,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_I,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image512 = Gtk.imageNewFromStock("gtk-stop",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(interrupt,image512)
    val background = Gtk.imageMenuItemNewWithMnemonic("_Background")
    val _ = Gtk.tooltipsSetTip(Helpers.tooltips,background,"Send current evaluation to background, spawning a new thread","")
    val _ = Gtk.widgetAddAccelerator(background,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_B,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image513 = Gtk.imageNewFromStock("gtk-goto-bottom",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(background,image513)
    val separator11 = Gtk.menuItemNew()
    val reset = Gtk.imageMenuItemNewWithMnemonic("Re_set Environment")
    val image514 = Gtk.imageNewFromStock("gtk-clear",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(reset,image514)
    val separator10 = Gtk.menuItemNew()
    val back_in_history = Gtk.imageMenuItemNewWithMnemonic("B_ack in History")
    val _ = Gtk.widgetAddAccelerator(back_in_history,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Up,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image515 = Gtk.imageNewFromStock("gtk-go-up",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(back_in_history,image515)
    val forward_in_history = Gtk.imageMenuItemNewWithMnemonic("For_ward in History")
    val _ = Gtk.widgetAddAccelerator(forward_in_history,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Down,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image516 = Gtk.imageNewFromStock("gtk-go-down",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(forward_in_history,image516)
    val _ = Helpers.containerAddList(feed1_menu,[feedregion,feedfile,separator4,interrupt,background,separator11,reset,separator10,back_in_history,forward_in_history])
    val _ = Gtk.menuItemSetSubmenu(feed1,feed1_menu)
    val view1 = Gtk.menuItemNewWithMnemonic("_View")
    val view1_menu = Gtk.menuNew()
    val previous_file = Gtk.imageMenuItemNewWithMnemonic("_Previous file")
    val _ = Gtk.widgetAddAccelerator(previous_file,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_1,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image517 = Gtk.imageNewFromStock("gtk-go-back",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(previous_file,image517)
    val next_file = Gtk.imageMenuItemNewWithMnemonic("_Next file")
    val _ = Gtk.widgetAddAccelerator(next_file,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_2,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image518 = Gtk.imageNewFromStock("gtk-go-forward",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(next_file,image518)
    val switch_to_editor = Gtk.imageMenuItemNewWithMnemonic("Switch to _Editor")
    val _ = Gtk.widgetSetSensitive(switch_to_editor,false)
    val _ = Gtk.widgetAddAccelerator(switch_to_editor,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_3,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image519 = Gtk.imageNewFromStock("gtk-justify-left",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(switch_to_editor,image519)
    val switch_to_compiler = Gtk.imageMenuItemNewWithMnemonic("Switch to _Interpreter")
    val _ = Gtk.widgetAddAccelerator(switch_to_compiler,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_4,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image520 = Gtk.imageNewFromStock("gtk-execute",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(switch_to_compiler,image520)
    val switch_to_io = Gtk.imageMenuItemNewWithMnemonic("Switch to I/_O")
    val _ = Gtk.widgetAddAccelerator(switch_to_io,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_5,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image521 = Gtk.imageNewFromStock("gtk-dialog-question",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(switch_to_io,image521)
    val separator13 = Gtk.menuItemNew()
    val syntax_colouring = Gtk.checkMenuItemNewWithMnemonic("_Syntax Colouring")
    val _ = Gtk.checkMenuItemSetActive(syntax_colouring,false)
    val _ = Helpers.containerAddList(view1_menu,[previous_file,next_file,switch_to_editor,switch_to_compiler,switch_to_io,separator13,syntax_colouring])
    val _ = Gtk.menuItemSetSubmenu(view1,view1_menu)
    val separator1 = Gtk.menuItemNew()
    val menuitem10 = Gtk.menuItemNewWithMnemonic("_Help")
    val menuitem10_menu = Gtk.menuNew()
    val about1 = Gtk.imageMenuItemNewWithMnemonic("_About...")
    val image522 = Gtk.imageNewFromStock("gtk-dialog-info",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(about1,image522)
    val _ = Gtk.containerAdd(menuitem10_menu,about1)
    val _ = Gtk.menuItemSetSubmenu(menuitem10,menuitem10_menu)
    val _ = Helpers.containerAddList(menubar1,[menuitem7,menuitem8,feed1,view1,separator1,menuitem10])
    val vpaned1 = Gtk.vpanedNew()
    val _ = Gtk.panedSetPosition(vpaned1,1)
    val vbox3 = Gtk.vboxNew(false,0)
    val notebook1 = Gtk.notebookNew()
    val _ = Gtk.notebookSetScrollable(notebook1,true)
    val _ = Gtk.notebookPopupEnable(notebook1)
    val statusbar1 = Gtk.statusbarNew()
    val _ = Gtk.statusbarSetHasResizeGrip(statusbar1,false)
    val _ = Gtk.boxPackStart(vbox3,notebook1,true,true,0)
    val _ = Gtk.boxPackStart(vbox3,statusbar1,false,false,0)
    val vpaned2 = Gtk.vpanedNew()
    val _ = Gtk.panedSetPosition(vpaned2,600)
    val scrolledwindow3_xa = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow3_ya = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow3 = Gtk.scrolledWindowNew(scrolledwindow3_xa,scrolledwindow3_ya)
    val _ = Gtk.scrolledWindowSetPlacement(scrolledwindow3,Gtk.CORNER_TOP_LEFT)
    val _ = Gtk.scrolledWindowSetShadowType(scrolledwindow3,Gtk.SHADOW_NONE)
    val _ = Gtk.scrolledWindowSetPolicy(scrolledwindow3,Gtk.POLICY_ALWAYS,Gtk.POLICY_ALWAYS)
    val compilerout = Gtk.textViewNew()
    val _ = Gtk.widgetSetSizeRequest(compilerout,0,18)
    val _ = Gtk.textBufferSetText(Gtk.textViewGetBuffer compilerout,"",~1)
    val _ = Gtk.textViewSetIndent(compilerout,0)
    val _ = Gtk.textViewSetRightMargin(compilerout,0)
    val _ = Gtk.textViewSetLeftMargin(compilerout,0)
    val _ = Gtk.textViewSetPixelsInsideWrap(compilerout,0)
    val _ = Gtk.textViewSetPixelsBelowLines(compilerout,0)
    val _ = Gtk.textViewSetPixelsAboveLines(compilerout,0)
    val _ = Gtk.textViewSetCursorVisible(compilerout,true)
    val _ = Gtk.textViewSetWrapMode(compilerout,Gtk.WRAP_NONE)
    val _ = Gtk.textViewSetJustification(compilerout,Gtk.JUSTIFY_LEFT)
    val _ = Gtk.textViewSetEditable(compilerout,true)
    val _ = Gtk.containerAdd(scrolledwindow3,compilerout)
    val scrolledwindow4_xa = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow4_ya = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow4 = Gtk.scrolledWindowNew(scrolledwindow4_xa,scrolledwindow4_ya)
    val _ = Gtk.scrolledWindowSetPlacement(scrolledwindow4,Gtk.CORNER_TOP_LEFT)
    val _ = Gtk.scrolledWindowSetShadowType(scrolledwindow4,Gtk.SHADOW_NONE)
    val _ = Gtk.scrolledWindowSetPolicy(scrolledwindow4,Gtk.POLICY_ALWAYS,Gtk.POLICY_ALWAYS)
    val progout = Gtk.textViewNew()
    val _ = Gtk.widgetSetSizeRequest(progout,0,130)
    val _ = Gtk.textBufferSetText(Gtk.textViewGetBuffer progout,"",~1)
    val _ = Gtk.textViewSetIndent(progout,0)
    val _ = Gtk.textViewSetRightMargin(progout,0)
    val _ = Gtk.textViewSetLeftMargin(progout,0)
    val _ = Gtk.textViewSetPixelsInsideWrap(progout,0)
    val _ = Gtk.textViewSetPixelsBelowLines(progout,0)
    val _ = Gtk.textViewSetPixelsAboveLines(progout,0)
    val _ = Gtk.textViewSetCursorVisible(progout,true)
    val _ = Gtk.textViewSetWrapMode(progout,Gtk.WRAP_NONE)
    val _ = Gtk.textViewSetJustification(progout,Gtk.JUSTIFY_LEFT)
    val _ = Gtk.textViewSetEditable(progout,true)
    val _ = Gtk.containerAdd(scrolledwindow4,progout)
    val _ = Gtk.panedPack1(vpaned2,scrolledwindow3,false,true)
    val _ = Gtk.panedPack2(vpaned2,scrolledwindow4,true,true)
    val _ = Gtk.panedPack1(vpaned1,vbox3,false,true)
    val _ = Gtk.panedPack2(vpaned1,vpaned2,true,true)
    val statusbar = Gtk.statusbarNew()
    val _ = Gtk.boxPackStart(vbox1,menubar1,false,false,0)
    val _ = Gtk.boxPackStart(vbox1,vpaned1,true,true,0)
    val _ = Gtk.boxPackStart(vbox1,statusbar,false,false,0)
    val _ = Gtk.containerAdd(mainwidget,vbox1)
    val preferences = Gtk.windowNew(Gtk.WINDOW_TOPLEVEL)
    val _ = Gtk.windowSetTitle(preferences,"Preferences")
    val _ = Gtk.windowAddAccelGroup(preferences,Helpers.accelGroup)
    val vbox4 = Gtk.vboxNew(false,10)
    val _ = Gtk.containerSetBorderWidth(vbox4,15)
    val notebook2 = Gtk.notebookNew()
    val vbox5 = Gtk.vboxNew(false,10)
    val _ = Gtk.containerSetBorderWidth(vbox5,15)
    val frame1 = Gtk.frameNew("")
    val _ = Gtk.frameSetShadowType(frame1,Gtk.SHADOW_ETCHED_IN)
    val hbox2 = Gtk.hboxNew(false,10)
    val _ = Gtk.containerSetBorderWidth(hbox2,5)
    val label7 = Gtk.labelNew("Font name:")
    val font_button = Gtk.buttonNewWithMnemonic("button5")
    val _ = Gtk.boxPackStart(hbox2,label7,false,false,0)
    val _ = Gtk.boxPackStart(hbox2,font_button,true,true,0)
    val label5 = Gtk.labelNew("Font")
    val _ = Gtk.containerAdd(frame1,hbox2)
    val _ = Gtk.frameSetLabelWidget(frame1,label5)
    val frame2 = Gtk.frameNew("")
    val _ = Gtk.frameSetShadowType(frame2,Gtk.SHADOW_ETCHED_IN)
    val table1 = Gtk.tableNew(5,2,false)
    val _ = Gtk.containerSetBorderWidth(table1,5)
    val _ = Gtk.tableSetRowSpacings(table1,0)
    val _ = Gtk.tableSetColSpacings(table1,10)
    val label8 = Gtk.labelNew("Plain:")
    val _ = Gtk.miscSetAlignment(label8,0.0,0.5)
    val label9 = Gtk.labelNew("Error:")
    val _ = Gtk.miscSetAlignment(label9,0.0,0.5)
    val label10 = Gtk.labelNew("Keyword:")
    val _ = Gtk.miscSetAlignment(label10,0.0,0.5)
    val label11 = Gtk.labelNew("String:")
    val _ = Gtk.miscSetAlignment(label11,0.0,0.5)
    val label12 = Gtk.labelNew("Comment:")
    val _ = Gtk.miscSetAlignment(label12,0.0,0.5)
    val _ = Gtk.tableAttach(table1,label8,0,1,0,1,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table1,label9,0,1,1,2,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table1,label10,0,1,2,3,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table1,label11,0,1,3,4,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table1,label12,0,1,4,5,Gtk.FILL,Gtk.FILL,0,0)
    val label6 = Gtk.labelNew("Colours")
    val _ = Gtk.containerAdd(frame2,table1)
    val _ = Gtk.frameSetLabelWidget(frame2,label6)
    val _ = Gtk.boxPackStart(vbox5,frame1,true,true,0)
    val _ = Gtk.boxPackStart(vbox5,frame2,true,true,0)
    val label3 = Gtk.labelNew("Fonts")
    val table2 = Gtk.tableNew(2,2,false)
    val _ = Gtk.containerSetBorderWidth(table2,10)
    val _ = Gtk.tableSetRowSpacings(table2,10)
    val _ = Gtk.tableSetColSpacings(table2,10)
    val label14 = Gtk.labelNew("Size of saved history:")
    val _ = Gtk.miscSetAlignment(label14,0.0,0.5)
    val history_size_entry = Gtk.entryNew()
    val label15 = Gtk.labelNew("")
    val _ = Gtk.miscSetAlignment(label15,0.0,0.5)
    val clear_history_button = Gtk.buttonNewWithMnemonic("Clear history")
    val _ = Gtk.tableAttach(table2,label14,0,1,0,1,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table2,history_size_entry,1,2,0,1,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table2,label15,0,1,1,2,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table2,clear_history_button,1,2,1,2,Gtk.FILL,Gtk.FILL,0,0)
    val label4 = Gtk.labelNew("History")
    val _ = Gtk.containerAdd(notebook2,vbox5)
    val _ = Gtk.notebookSetTabLabel(notebook2,Gtk.notebookGetNthPage(notebook2,0),label3)
    val _ = Gtk.containerAdd(notebook2,table2)
    val _ = Gtk.notebookSetTabLabel(notebook2,Gtk.notebookGetNthPage(notebook2,1),label4)
    val hbox1 = Gtk.hboxNew(true,0)
    val pref_cancel_button = Gtk.buttonNew()
    val _ = Gtk.containerSetBorderWidth(pref_cancel_button,10)
    val alignment1 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox3 = Gtk.hboxNew(false,2)
    val image385 = Gtk.imageNewFromStock("gtk-cancel",Gtk.IntToGtkIconSize(4))
    val label16 = Gtk.labelNew("_Cancel")
    val _ = Gtk.labelSetUseUnderline(label16,true)
    val _ = Gtk.boxPackStart(hbox3,image385,false,false,0)
    val _ = Gtk.boxPackStart(hbox3,label16,false,false,0)
    val _ = Gtk.containerAdd(alignment1,hbox3)
    val _ = Gtk.containerAdd(pref_cancel_button,alignment1)
    val pref_revert_button = Gtk.buttonNew()
    val _ = Gtk.containerSetBorderWidth(pref_revert_button,10)
    val alignment2 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox4 = Gtk.hboxNew(false,2)
    val image386 = Gtk.imageNewFromStock("gtk-revert-to-saved",Gtk.IntToGtkIconSize(4))
    val label17 = Gtk.labelNew("_Revert")
    val _ = Gtk.labelSetUseUnderline(label17,true)
    val _ = Gtk.boxPackStart(hbox4,image386,false,false,0)
    val _ = Gtk.boxPackStart(hbox4,label17,false,false,0)
    val _ = Gtk.containerAdd(alignment2,hbox4)
    val _ = Gtk.containerAdd(pref_revert_button,alignment2)
    val pref_save_button = Gtk.buttonNew()
    val _ = Gtk.containerSetBorderWidth(pref_save_button,10)
    val alignment3 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox5 = Gtk.hboxNew(false,2)
    val image387 = Gtk.imageNewFromStock("gtk-save",Gtk.IntToGtkIconSize(4))
    val label18 = Gtk.labelNew("_Save")
    val _ = Gtk.labelSetUseUnderline(label18,true)
    val _ = Gtk.boxPackStart(hbox5,image387,false,false,0)
    val _ = Gtk.boxPackStart(hbox5,label18,false,false,0)
    val _ = Gtk.containerAdd(alignment3,hbox5)
    val _ = Gtk.containerAdd(pref_save_button,alignment3)
    val pref_ok_button = Gtk.buttonNew()
    val _ = Gtk.containerSetBorderWidth(pref_ok_button,10)
    val alignment4 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox6 = Gtk.hboxNew(false,2)
    val image388 = Gtk.imageNewFromStock("gtk-ok",Gtk.IntToGtkIconSize(4))
    val label19 = Gtk.labelNew("_Ok")
    val _ = Gtk.labelSetUseUnderline(label19,true)
    val _ = Gtk.boxPackStart(hbox6,image388,false,false,0)
    val _ = Gtk.boxPackStart(hbox6,label19,false,false,0)
    val _ = Gtk.containerAdd(alignment4,hbox6)
    val _ = Gtk.containerAdd(pref_ok_button,alignment4)
    val _ = Gtk.boxPackStart(hbox1,pref_cancel_button,true,true,0)
    val _ = Gtk.boxPackStart(hbox1,pref_revert_button,true,true,0)
    val _ = Gtk.boxPackStart(hbox1,pref_save_button,true,true,0)
    val _ = Gtk.boxPackStart(hbox1,pref_ok_button,true,true,0)
    val _ = Gtk.boxPackStart(vbox4,notebook2,true,true,0)
    val _ = Gtk.boxPackStart(vbox4,hbox1,true,true,0)
    val _ = Gtk.containerAdd(preferences,vbox4)
    val searchDialog = Gtk.dialogNew()
    val _ = Gtk.windowSetTitle(searchDialog,"Search")
    val _ = Gtk.windowSetPosition(searchDialog,Gtk.WIN_POS_MOUSE)
    val _ = Gtk.windowSetResizable(searchDialog,false)
    val _ = Gtk.dialogSetHasSeparator(searchDialog,true)
    val dialog_vbox1 = Gtk.dialogGetFieldVbox searchDialog
    val dialog_vbox1_action_area = Gtk.dialogGetFieldActionArea searchDialog
    val dialog_vbox1_dialog = searchDialog
    val _ = Gtk.boxSetHomogeneous(dialog_vbox1,false)
    val dialog_action_area1 = dialog_vbox1_action_area
    val dialog_action_area1_dialog = dialog_vbox1_dialog
    val _ = Gtk.buttonBoxSetLayout(dialog_action_area1,Gtk.BUTTONBOX_END)
    val search_cancel_button = Gtk.buttonNew()
    val _ = Gtk.containerSetBorderWidth(search_cancel_button,5)
    val _ = Gtk.objectSetBool(search_cancel_button,"can-default",true)
    val search_cancel_button_response_id = SOME ~6
    val alignment8 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox11 = Gtk.hboxNew(false,2)
    val image445 = Gtk.imageNewFromStock("gtk-cancel",Gtk.IntToGtkIconSize(4))
    val label27 = Gtk.labelNew("_Cancel")
    val _ = Gtk.labelSetUseUnderline(label27,true)
    val _ = Gtk.boxPackStart(hbox11,image445,false,false,0)
    val _ = Gtk.boxPackStart(hbox11,label27,false,false,0)
    val _ = Gtk.containerAdd(alignment8,hbox11)
    val _ = Gtk.containerAdd(search_cancel_button,alignment8)
    val search_ok_button = Gtk.buttonNew()
    val _ = Gtk.containerSetBorderWidth(search_ok_button,5)
    val _ = Gtk.objectSetBool(search_ok_button,"can-default",true)
    val search_ok_button_response_id = SOME ~5
    val alignment9 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox12 = Gtk.hboxNew(false,2)
    val image446 = Gtk.imageNewFromStock("gtk-ok",Gtk.IntToGtkIconSize(4))
    val label28 = Gtk.labelNew("_Ok")
    val _ = Gtk.labelSetUseUnderline(label28,true)
    val _ = Gtk.boxPackStart(hbox12,image446,false,false,0)
    val _ = Gtk.boxPackStart(hbox12,label28,false,false,0)
    val _ = Gtk.containerAdd(alignment9,hbox12)
    val _ = Gtk.containerAdd(search_ok_button,alignment9)
    val search_replace_button = Gtk.buttonNew()
    val _ = Gtk.containerSetBorderWidth(search_replace_button,5)
    val _ = Gtk.objectSetBool(search_replace_button,"can-default",true)
    val search_replace_button_response_id = SOME ~10
    val alignment10 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox13 = Gtk.hboxNew(false,2)
    val image447 = Gtk.imageNewFromStock("gtk-find-and-replace",Gtk.IntToGtkIconSize(4))
    val label29 = Gtk.labelNew("_Replace")
    val _ = Gtk.labelSetUseUnderline(label29,true)
    val _ = Gtk.boxPackStart(hbox13,image447,false,false,0)
    val _ = Gtk.boxPackStart(hbox13,label29,false,false,0)
    val _ = Gtk.containerAdd(alignment10,hbox13)
    val _ = Gtk.containerAdd(search_replace_button,alignment10)
    val _ = Option.app (fn rid => Gtk.dialogAddActionWidget(dialog_action_area1_dialog,search_cancel_button,rid)) search_cancel_button_response_id
    val _ = Option.app (fn rid => Gtk.dialogAddActionWidget(dialog_action_area1_dialog,search_ok_button,rid)) search_ok_button_response_id
    val _ = Option.app (fn rid => Gtk.dialogAddActionWidget(dialog_action_area1_dialog,search_replace_button,rid)) search_replace_button_response_id
    val table4 = Gtk.tableNew(3,2,false)
    val _ = Gtk.tableSetRowSpacings(table4,0)
    val _ = Gtk.tableSetColSpacings(table4,0)
    val label25 = Gtk.labelNew("Search for:")
    val _ = Gtk.miscSetAlignment(label25,0.0,0.5)
    val label26 = Gtk.labelNew("Replace with:")
    val _ = Gtk.miscSetAlignment(label26,0.0,0.5)
    val searchString = Gtk.entryNew()
    val _ = Gtk.entrySetActivatesDefault(searchString,true)
    val replaceString = Gtk.entryNew()
    val search_case_sensitive = Gtk.checkButtonNewWithMnemonic("Case _sensitive")
    val _ = Gtk.tableAttach(table4,label25,0,1,0,1,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table4,label26,0,1,1,2,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table4,searchString,1,2,0,1,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table4,replaceString,1,2,1,2,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table4,search_case_sensitive,1,2,2,3,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.boxPackStart(dialog_vbox1,table4,false,false,0)
    val go_to_line_dialog = Gtk.dialogNew()
    val _ = Gtk.windowSetTitle(go_to_line_dialog,"Go to Line")
    val _ = Gtk.windowSetPosition(go_to_line_dialog,Gtk.WIN_POS_MOUSE)
    val _ = Gtk.windowSetModal(go_to_line_dialog,true)
    val _ = Gtk.dialogSetHasSeparator(go_to_line_dialog,true)
    val dialog_vbox2 = Gtk.dialogGetFieldVbox go_to_line_dialog
    val dialog_vbox2_action_area = Gtk.dialogGetFieldActionArea go_to_line_dialog
    val dialog_vbox2_dialog = go_to_line_dialog
    val _ = Gtk.boxSetHomogeneous(dialog_vbox2,false)
    val dialog_action_area2 = dialog_vbox2_action_area
    val dialog_action_area2_dialog = dialog_vbox2_dialog
    val _ = Gtk.buttonBoxSetLayout(dialog_action_area2,Gtk.BUTTONBOX_END)
    val cancelbutton1 = Gtk.buttonNewFromStock("gtk-cancel")
    val cancelbutton1_response_id = SOME ~6
    val _ = Gtk.objectSetBool(cancelbutton1,"can-default",true)
    val okbutton1 = Gtk.buttonNewFromStock("gtk-ok")
    val okbutton1_response_id = SOME ~5
    val _ = Gtk.objectSetBool(okbutton1,"can-default",true)
    val _ = Option.app (fn rid => Gtk.dialogAddActionWidget(dialog_action_area2_dialog,cancelbutton1,rid)) cancelbutton1_response_id
    val _ = Option.app (fn rid => Gtk.dialogAddActionWidget(dialog_action_area2_dialog,okbutton1,rid)) okbutton1_response_id
    val hbox14 = Gtk.hboxNew(false,5)
    val label30 = Gtk.labelNew("Go to line:")
    val go_to_line_entry = Gtk.entryNew()
    val _ = Gtk.entrySetActivatesDefault(go_to_line_entry,true)
    val _ = Gtk.boxPackStart(hbox14,label30,false,false,0)
    val _ = Gtk.boxPackStart(hbox14,go_to_line_entry,true,true,0)
    val _ = Gtk.boxPackStart(dialog_vbox2,hbox14,true,true,0)
    val modified_dialog = Gtk.dialogNew()
    val _ = Gtk.windowSetTitle(modified_dialog,"Unsaved Modifications")
    val _ = Gtk.dialogSetHasSeparator(modified_dialog,true)
    val dialog_vbox3 = Gtk.dialogGetFieldVbox modified_dialog
    val dialog_vbox3_action_area = Gtk.dialogGetFieldActionArea modified_dialog
    val dialog_vbox3_dialog = modified_dialog
    val _ = Gtk.boxSetHomogeneous(dialog_vbox3,false)
    val dialog_action_area3 = dialog_vbox3_action_area
    val dialog_action_area3_dialog = dialog_vbox3_dialog
    val _ = Gtk.buttonBoxSetLayout(dialog_action_area3,Gtk.BUTTONBOX_END)
    val button1 = Gtk.buttonNew()
    val _ = Gtk.objectSetBool(button1,"can-default",true)
    val button1_response_id = SOME ~7
    val alignment13 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox18 = Gtk.hboxNew(false,2)
    val image451 = Gtk.imageNewFromStock("gtk-delete",Gtk.IntToGtkIconSize(4))
    val label33 = Gtk.labelNew("_Discard")
    val _ = Gtk.labelSetUseUnderline(label33,true)
    val _ = Gtk.boxPackStart(hbox18,image451,false,false,0)
    val _ = Gtk.boxPackStart(hbox18,label33,false,false,0)
    val _ = Gtk.containerAdd(alignment13,hbox18)
    val _ = Gtk.containerAdd(button1,alignment13)
    val button2 = Gtk.buttonNew()
    val _ = Gtk.objectSetBool(button2,"can-default",true)
    val button2_response_id = SOME ~6
    val alignment12 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox16 = Gtk.hboxNew(false,2)
    val image449 = Gtk.imageNewFromStock("gtk-cancel",Gtk.IntToGtkIconSize(4))
    val label32 = Gtk.labelNew("_Cancel")
    val _ = Gtk.labelSetUseUnderline(label32,true)
    val _ = Gtk.boxPackStart(hbox16,image449,false,false,0)
    val _ = Gtk.boxPackStart(hbox16,label32,false,false,0)
    val _ = Gtk.containerAdd(alignment12,hbox16)
    val _ = Gtk.containerAdd(button2,alignment12)
    val _ = Option.app (fn rid => Gtk.dialogAddActionWidget(dialog_action_area3_dialog,button1,rid)) button1_response_id
    val _ = Option.app (fn rid => Gtk.dialogAddActionWidget(dialog_action_area3_dialog,button2,rid)) button2_response_id
    val hbox17 = Gtk.hboxNew(false,0)
    val _ = Gtk.containerSetBorderWidth(hbox17,10)
    val image450 = Gtk.imageNewFromStock("gtk-dialog-warning",Gtk.IntToGtkIconSize(6))
    val vbox6 = Gtk.vboxNew(true,3)
    val modified_msg1 = Gtk.labelNew("message 1")
    val modified_msg2 = Gtk.labelNew("message 2")
    val _ = Gtk.boxPackStart(vbox6,modified_msg1,false,false,0)
    val _ = Gtk.boxPackStart(vbox6,modified_msg2,false,false,0)
    val _ = Gtk.boxPackStart(hbox17,image450,true,true,0)
    val _ = Gtk.boxPackStart(hbox17,vbox6,true,true,0)
    val _ = Gtk.boxPackStart(dialog_vbox3,hbox17,true,true,0)
    val save_on_quit_dialog = Gtk.dialogNew()
    val _ = Gtk.windowSetTitle(save_on_quit_dialog,"Modifed Files")
    val _ = Gtk.dialogSetHasSeparator(save_on_quit_dialog,true)
    val dialog_vbox4 = Gtk.dialogGetFieldVbox save_on_quit_dialog
    val dialog_vbox4_action_area = Gtk.dialogGetFieldActionArea save_on_quit_dialog
    val dialog_vbox4_dialog = save_on_quit_dialog
    val _ = Gtk.boxSetHomogeneous(dialog_vbox4,false)
    val dialog_action_area4 = dialog_vbox4_action_area
    val dialog_action_area4_dialog = dialog_vbox4_dialog
    val _ = Gtk.buttonBoxSetLayout(dialog_action_area4,Gtk.BUTTONBOX_END)
    val save_on_quit_discard_all = Gtk.buttonNew()
    val _ = Gtk.containerSetBorderWidth(save_on_quit_discard_all,5)
    val _ = Gtk.objectSetBool(save_on_quit_discard_all,"can-default",true)
    val save_on_quit_discard_all_response_id = SOME ~2
    val alignment17 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox22 = Gtk.hboxNew(false,2)
    val image455 = Gtk.imageNewFromStock("gtk-quit",Gtk.IntToGtkIconSize(4))
    val label39 = Gtk.labelNew("Discard a_ll")
    val _ = Gtk.labelSetUseUnderline(label39,true)
    val _ = Gtk.boxPackStart(hbox22,image455,false,false,0)
    val _ = Gtk.boxPackStart(hbox22,label39,false,false,0)
    val _ = Gtk.containerAdd(alignment17,hbox22)
    val _ = Gtk.containerAdd(save_on_quit_discard_all,alignment17)
    val save_on_quit_discard = Gtk.buttonNew()
    val _ = Gtk.containerSetBorderWidth(save_on_quit_discard,5)
    val _ = Gtk.objectSetBool(save_on_quit_discard,"can-default",true)
    val save_on_quit_discard_response_id = SOME ~7
    val alignment16 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox21 = Gtk.hboxNew(false,2)
    val image454 = Gtk.imageNewFromStock("gtk-delete",Gtk.IntToGtkIconSize(4))
    val label38 = Gtk.labelNew("_Discard")
    val _ = Gtk.labelSetUseUnderline(label38,true)
    val _ = Gtk.boxPackStart(hbox21,image454,false,false,0)
    val _ = Gtk.boxPackStart(hbox21,label38,false,false,0)
    val _ = Gtk.containerAdd(alignment16,hbox21)
    val _ = Gtk.containerAdd(save_on_quit_discard,alignment16)
    val save_on_quit_save_button = Gtk.buttonNew()
    val _ = Gtk.containerSetBorderWidth(save_on_quit_save_button,5)
    val _ = Gtk.objectSetBool(save_on_quit_save_button,"can-default",true)
    val save_on_quit_save_button_response_id = SOME ~5
    val alignment15 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox20 = Gtk.hboxNew(false,2)
    val image453 = Gtk.imageNewFromStock("gtk-save",Gtk.IntToGtkIconSize(4))
    val label37 = Gtk.labelNew("_Save")
    val _ = Gtk.labelSetUseUnderline(label37,true)
    val _ = Gtk.boxPackStart(hbox20,image453,false,false,0)
    val _ = Gtk.boxPackStart(hbox20,label37,false,false,0)
    val _ = Gtk.containerAdd(alignment15,hbox20)
    val _ = Gtk.containerAdd(save_on_quit_save_button,alignment15)
    val save_on_quit_save_as_button = Gtk.buttonNew()
    val _ = Gtk.containerSetBorderWidth(save_on_quit_save_as_button,5)
    val _ = Gtk.objectSetBool(save_on_quit_save_as_button,"can-default",true)
    val save_on_quit_save_as_button_response_id = SOME ~3
    val alignment20 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox26 = Gtk.hboxNew(false,2)
    val image459 = Gtk.imageNewFromStock("gtk-save-as",Gtk.IntToGtkIconSize(4))
    val label44 = Gtk.labelNew("Save _as")
    val _ = Gtk.labelSetUseUnderline(label44,true)
    val _ = Gtk.boxPackStart(hbox26,image459,false,false,0)
    val _ = Gtk.boxPackStart(hbox26,label44,false,false,0)
    val _ = Gtk.containerAdd(alignment20,hbox26)
    val _ = Gtk.containerAdd(save_on_quit_save_as_button,alignment20)
    val save_on_quit_cancel_button = Gtk.buttonNew()
    val _ = Gtk.containerSetBorderWidth(save_on_quit_cancel_button,5)
    val _ = Gtk.objectSetBool(save_on_quit_cancel_button,"can-default",true)
    val save_on_quit_cancel_button_response_id = SOME ~6
    val alignment19 = Gtk.alignmentNew(0.5,0.5,0.0,0.0)
    val hbox25 = Gtk.hboxNew(false,2)
    val image458 = Gtk.imageNewFromStock("gtk-cancel",Gtk.IntToGtkIconSize(4))
    val label43 = Gtk.labelNew("_Cancel")
    val _ = Gtk.labelSetUseUnderline(label43,true)
    val _ = Gtk.boxPackStart(hbox25,image458,false,false,0)
    val _ = Gtk.boxPackStart(hbox25,label43,false,false,0)
    val _ = Gtk.containerAdd(alignment19,hbox25)
    val _ = Gtk.containerAdd(save_on_quit_cancel_button,alignment19)
    val _ = Option.app (fn rid => Gtk.dialogAddActionWidget(dialog_action_area4_dialog,save_on_quit_discard_all,rid)) save_on_quit_discard_all_response_id
    val _ = Option.app (fn rid => Gtk.dialogAddActionWidget(dialog_action_area4_dialog,save_on_quit_discard,rid)) save_on_quit_discard_response_id
    val _ = Option.app (fn rid => Gtk.dialogAddActionWidget(dialog_action_area4_dialog,save_on_quit_save_button,rid)) save_on_quit_save_button_response_id
    val _ = Option.app (fn rid => Gtk.dialogAddActionWidget(dialog_action_area4_dialog,save_on_quit_save_as_button,rid)) save_on_quit_save_as_button_response_id
    val _ = Option.app (fn rid => Gtk.dialogAddActionWidget(dialog_action_area4_dialog,save_on_quit_cancel_button,rid)) save_on_quit_cancel_button_response_id
    val hbox23 = Gtk.hboxNew(false,0)
    val image456 = Gtk.imageNewFromStock("gtk-dialog-warning",Gtk.IntToGtkIconSize(6))
    val vbox8 = Gtk.vboxNew(true,5)
    val save_on_quit_label = Gtk.labelNew("File 'bla' was modified.")
    val label41 = Gtk.labelNew("How do you want to proceed?")
    val _ = Gtk.boxPackStart(vbox8,save_on_quit_label,false,false,0)
    val _ = Gtk.boxPackStart(vbox8,label41,false,false,0)
    val _ = Gtk.boxPackStart(hbox23,image456,true,true,0)
    val _ = Gtk.boxPackStart(hbox23,vbox8,true,true,0)
    val _ = Gtk.boxPackStart(dialog_vbox4,hbox23,true,true,0)
  end

(* Created by alice-glade *)
