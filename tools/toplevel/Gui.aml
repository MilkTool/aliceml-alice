(*
 * This is a generated file, created by alice-glade.
 * Modifications may get lost.
 *)


import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"

import structure Key from "x-alice:/lib/gtk/Key"

structure Gui =
  struct
    structure Helpers = struct
      val accelGroup = Gtk.AccelGroup.new()
      val tooltips = Gtk.Tooltips.new()
      fun containerAddList(cont, children) = 
        List.app (fn c => Gtk.Container.add(cont,c)) children
    end

    val mainwidget = Gtk.Window.new(Gtk.WindowType.TOPLEVEL)
    val _ = Gtk.Window.setTitle(mainwidget,"Alice")
    val _ = Gtk.Window.addAccelGroup(mainwidget,Helpers.accelGroup)
    val vbox1 = Gtk.VBox.new(false,0)
    val menubar1 = Gtk.MenuBar.new()
    val _ = Gtk.Widget.setSizeRequest(menubar1,188,28)
    val menuitem7 = Gtk.MenuItem.newWithMnemonic("_File")
    val menuitem7_menu = Gtk.Menu.new()
    val new1 = Gtk.ImageMenuItem.newWithMnemonic("_New")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,new1,"Create empty editor buffer","")
    val _ = Gtk.Widget.addAccelerator(new1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_N,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image784 = Gtk.Image.newFromStock("gtk-new",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(new1,image784)
    val open1 = Gtk.ImageMenuItem.newWithMnemonic("_Open...")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,open1,"Load file to new editor buffer","")
    val _ = Gtk.Widget.addAccelerator(open1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_O,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image785 = Gtk.Image.newFromStock("gtk-open",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(open1,image785)
    val save1 = Gtk.ImageMenuItem.newWithMnemonic("_Save")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,save1,"Write current editor buffer to original file","")
    val _ = Gtk.Widget.addAccelerator(save1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_S,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image786 = Gtk.Image.newFromStock("gtk-save",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(save1,image786)
    val save_as1 = Gtk.ImageMenuItem.newWithMnemonic("Save _As...")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,save_as1,"Write current editor buffer to new file","")
    val _ = Gtk.Widget.addAccelerator(save_as1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_S,([Gdk.ModifierType.SHIFT_MASK,Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image787 = Gtk.Image.newFromStock("gtk-save-as",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(save_as1,image787)
    val close1 = Gtk.ImageMenuItem.newWithMnemonic("_Close")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,close1,"Close current editor buffer","")
    val _ = Gtk.Widget.addAccelerator(close1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_W,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image788 = Gtk.Image.newFromStock("gtk-close",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(close1,image788)
    val separatormenuitem1 = Gtk.MenuItem.new()
    val compilefile = Gtk.ImageMenuItem.newWithMnemonic("Co_mpile")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,compilefile,"Compile current editor buffer to component file","")
    val _ = Gtk.Widget.setSensitive(compilefile,false)
    val _ = Gtk.Widget.addAccelerator(compilefile,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_K,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image789 = Gtk.Image.newFromStock("gtk-convert",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(compilefile,image789)
    val separator3 = Gtk.MenuItem.new()
    val quit1 = Gtk.ImageMenuItem.newWithMnemonic("_Quit")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,quit1,"Quit Toplevel","")
    val _ = Gtk.Widget.addAccelerator(quit1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Q,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image790 = Gtk.Image.newFromStock("gtk-quit",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(quit1,image790)
    val _ = Helpers.containerAddList(menuitem7_menu,[new1,open1,save1,save_as1,close1,separatormenuitem1,compilefile,separator3,quit1])
    val _ = Gtk.MenuItem.setSubmenu(menuitem7,menuitem7_menu)
    val menuitem8 = Gtk.MenuItem.newWithMnemonic("_Edit")
    val menuitem8_menu = Gtk.Menu.new()
    val undo = Gtk.ImageMenuItem.newWithMnemonic("_Undo")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,undo,"Revert last action","")
    val _ = Gtk.Widget.addAccelerator(undo,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Z,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image791 = Gtk.Image.newFromStock("gtk-undo",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(undo,image791)
    val cut1 = Gtk.ImageMenuItem.newWithMnemonic("Cu_t")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,cut1,"Cut current selection to clipboard","")
    val _ = Gtk.Widget.addAccelerator(cut1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_X,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image792 = Gtk.Image.newFromStock("gtk-cut",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(cut1,image792)
    val copy1 = Gtk.ImageMenuItem.newWithMnemonic("_Copy")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,copy1,"Copy current selection to clipboard","")
    val _ = Gtk.Widget.addAccelerator(copy1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_C,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image793 = Gtk.Image.newFromStock("gtk-copy",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(copy1,image793)
    val paste1 = Gtk.ImageMenuItem.newWithMnemonic("_Paste")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,paste1,"Insert clipboard content","")
    val _ = Gtk.Widget.addAccelerator(paste1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_V,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image794 = Gtk.Image.newFromStock("gtk-paste",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(paste1,image794)
    val delete1 = Gtk.ImageMenuItem.newWithMnemonic("_Delete")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,delete1,"Delete current selection","")
    val image795 = Gtk.Image.newFromStock("gtk-delete",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(delete1,image795)
    val separator9 = Gtk.MenuItem.new()
    val indent_region = Gtk.ImageMenuItem.newWithMnemonic("_Indent Region")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,indent_region,"Increase indentation of selected lines","")
    val _ = Gtk.Widget.addAccelerator(indent_region,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_greater,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image796 = Gtk.Image.newFromStock("gtk-goto-last",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(indent_region,image796)
    val outdent_region = Gtk.ImageMenuItem.newWithMnemonic("_Outdent Region")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,outdent_region,"Decrease indentation of selected lines","")
    val _ = Gtk.Widget.addAccelerator(outdent_region,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_less,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image797 = Gtk.Image.newFromStock("gtk-goto-first",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(outdent_region,image797)
    val separator6 = Gtk.MenuItem.new()
    val find = Gtk.ImageMenuItem.newWithMnemonic("_Find...")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,find,"Search for text","")
    val _ = Gtk.Widget.addAccelerator(find,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_F,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image798 = Gtk.Image.newFromStock("gtk-find",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(find,image798)
    val find_again = Gtk.ImageMenuItem.newWithMnemonic("Find A_gain")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,find_again,"Search for previous text","")
    val _ = Gtk.Widget.addAccelerator(find_again,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_G,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image799 = Gtk.Image.newFromStock("gtk-find",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(find_again,image799)
    val replace = Gtk.ImageMenuItem.newWithMnemonic("_Replace...")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,replace,"Search and replace text","")
    val _ = Gtk.Widget.addAccelerator(replace,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_R,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image800 = Gtk.Image.newFromStock("gtk-find-and-replace",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(replace,image800)
    val separator5 = Gtk.MenuItem.new()
    val go_to_line = Gtk.ImageMenuItem.newWithMnemonic("Go to _Line...")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,go_to_line,"Jump to line by number","")
    val _ = Gtk.Widget.addAccelerator(go_to_line,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_L,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image801 = Gtk.Image.newFromStock("gtk-jump-to",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(go_to_line,image801)
    val jump_to_last_error = Gtk.ImageMenuItem.newWithMnemonic("Go to _Error")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,jump_to_last_error,"Jump to last error position","")
    val _ = Gtk.Widget.addAccelerator(jump_to_last_error,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_E,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image802 = Gtk.Image.newFromStock("gtk-dialog-warning",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(jump_to_last_error,image802)
    val separator14 = Gtk.MenuItem.new()
    val preferencesM = Gtk.ImageMenuItem.newWithMnemonic("_Preferences...")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,preferencesM,"Edit preferences","")
    val image803 = Gtk.Image.newFromStock("gtk-preferences",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(preferencesM,image803)
    val _ = Helpers.containerAddList(menuitem8_menu,[undo,cut1,copy1,paste1,delete1,separator9,indent_region,outdent_region,separator6,find,find_again,replace,separator5,go_to_line,jump_to_last_error,separator14,preferencesM])
    val _ = Gtk.MenuItem.setSubmenu(menuitem8,menuitem8_menu)
    val feed1 = Gtk.MenuItem.newWithMnemonic("Ev_al")
    val _ = Gtk.Widget.setSensitive(feed1,false)
    val feed1_menu = Gtk.Menu.new()
    val feedregion = Gtk.ImageMenuItem.newWithMnemonic("Feed _Region")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,feedregion,"Evaluate current selection or paragraph","")
    val _ = Gtk.Widget.setSensitive(feedregion,false)
    val _ = Gtk.Widget.addAccelerator(feedregion,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Return,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image804 = Gtk.Image.newFromStock("gtk-execute",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(feedregion,image804)
    val feedfile = Gtk.ImageMenuItem.newWithMnemonic("Feed _File")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,feedfile,"Evaluate whole buffer","")
    val _ = Gtk.Widget.setSensitive(feedfile,false)
    val _ = Gtk.Widget.addAccelerator(feedfile,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Return,([Gdk.ModifierType.SHIFT_MASK,Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image805 = Gtk.Image.newFromStock("gtk-execute",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(feedfile,image805)
    val separator4 = Gtk.MenuItem.new()
    val interrupt = Gtk.ImageMenuItem.newWithMnemonic("_Interrupt")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,interrupt,"Abort current evaluation","")
    val _ = Gtk.Widget.addAccelerator(interrupt,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_I,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image806 = Gtk.Image.newFromStock("gtk-stop",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(interrupt,image806)
    val background = Gtk.ImageMenuItem.newWithMnemonic("_Background")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,background,"Put current evaluation into background by spawning a new thread","")
    val _ = Gtk.Widget.addAccelerator(background,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_B,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image807 = Gtk.Image.newFromStock("gtk-goto-bottom",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(background,image807)
    val separator11 = Gtk.MenuItem.new()
    val reset = Gtk.ImageMenuItem.newWithMnemonic("Re_set Environment")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,reset,"Remove all previous declarations from interpreter environment","")
    val image808 = Gtk.Image.newFromStock("gtk-clear",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(reset,image808)
    val separator10 = Gtk.MenuItem.new()
    val back_in_history = Gtk.ImageMenuItem.newWithMnemonic("B_ack in History")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,back_in_history,"Fetch previous input","")
    val _ = Gtk.Widget.addAccelerator(back_in_history,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Up,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image809 = Gtk.Image.newFromStock("gtk-go-up",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(back_in_history,image809)
    val forward_in_history = Gtk.ImageMenuItem.newWithMnemonic("For_ward in History")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,forward_in_history,"Fetch next input","")
    val _ = Gtk.Widget.addAccelerator(forward_in_history,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Down,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image810 = Gtk.Image.newFromStock("gtk-go-down",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(forward_in_history,image810)
    val _ = Helpers.containerAddList(feed1_menu,[feedregion,feedfile,separator4,interrupt,background,separator11,reset,separator10,back_in_history,forward_in_history])
    val _ = Gtk.MenuItem.setSubmenu(feed1,feed1_menu)
    val view1 = Gtk.MenuItem.newWithMnemonic("_View")
    val view1_menu = Gtk.Menu.new()
    val previous_file = Gtk.ImageMenuItem.newWithMnemonic("_Previous File")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,previous_file,"Switch to previous editor buffer","")
    val _ = Gtk.Widget.addAccelerator(previous_file,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Left,([Gdk.ModifierType.MOD1_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image811 = Gtk.Image.newFromStock("gtk-go-back",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(previous_file,image811)
    val next_file = Gtk.ImageMenuItem.newWithMnemonic("_Next File")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,next_file,"Switch to next editor buffer","")
    val _ = Gtk.Widget.addAccelerator(next_file,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Right,([Gdk.ModifierType.MOD1_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image812 = Gtk.Image.newFromStock("gtk-go-forward",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(next_file,image812)
    val switch_to_editor = Gtk.ImageMenuItem.newWithMnemonic("Switch to _Editor")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,switch_to_editor,"Switch focus to current editor buffer","")
    val _ = Gtk.Widget.setSensitive(switch_to_editor,false)
    val _ = Gtk.Widget.addAccelerator(switch_to_editor,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_1,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image813 = Gtk.Image.newFromStock("gtk-justify-left",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(switch_to_editor,image813)
    val switch_to_compiler = Gtk.ImageMenuItem.newWithMnemonic("Switch to _Interpreter")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,switch_to_compiler,"Switch focus to Interpreter I/O pane","")
    val _ = Gtk.Widget.addAccelerator(switch_to_compiler,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_2,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image814 = Gtk.Image.newFromStock("gtk-execute",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(switch_to_compiler,image814)
    val switch_to_io = Gtk.ImageMenuItem.newWithMnemonic("Switch to I/_O")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,switch_to_io,"Switch focus to program I/O pane","")
    val _ = Gtk.Widget.addAccelerator(switch_to_io,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_3,([Gdk.ModifierType.CONTROL_MASK]),[Gtk.AccelFlags.VISIBLE])
    val image815 = Gtk.Image.newFromStock("gtk-dialog-question",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(switch_to_io,image815)
    val separator13 = Gtk.MenuItem.new()
    val clear_io = Gtk.ImageMenuItem.newWithMnemonic("_Clear I/O")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,clear_io,"Clear program I/O pane","")
    val image816 = Gtk.Image.newFromStock("gtk-clear",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(clear_io,image816)
    val separator15 = Gtk.MenuItem.new()
    val syntax_colouring = Gtk.CheckMenuItem.newWithMnemonic("_Syntax Colouring")
    val _ = Gtk.CheckMenuItem.setActive(syntax_colouring,false)
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,syntax_colouring,"Activate syntax colouring for current editor buffer","")
    val _ = Helpers.containerAddList(view1_menu,[previous_file,next_file,switch_to_editor,switch_to_compiler,switch_to_io,separator13,clear_io,separator15,syntax_colouring])
    val _ = Gtk.MenuItem.setSubmenu(view1,view1_menu)
    val menuitem10 = Gtk.MenuItem.newWithMnemonic("_Help")
    val menuitem10_menu = Gtk.Menu.new()
    val about1 = Gtk.ImageMenuItem.newWithMnemonic("_About...")
    val _ = Gtk.Tooltips.setTip(Helpers.tooltips,about1,"Show general information","")
    val image817 = Gtk.Image.newFromStock("gtk-dialog-info",Gtk.IconSize.MENU)
    val _ = Gtk.ImageMenuItem.setImage(about1,image817)
    val _ = Gtk.Container.add(menuitem10_menu,about1)
    val _ = Gtk.MenuItem.setSubmenu(menuitem10,menuitem10_menu)
    val _ = Helpers.containerAddList(menubar1,[menuitem7,menuitem8,feed1,view1,menuitem10])
    val vpaned1 = Gtk.VPaned.new()
    val _ = Gtk.Paned.setPosition(vpaned1,1)
    val vbox3 = Gtk.VBox.new(false,0)
    val notebook1 = Gtk.Notebook.new()
    val _ = Gtk.Notebook.setScrollable(notebook1,true)
    val _ = Gtk.Notebook.popupEnable(notebook1)
    val eventbox1 = Gtk.EventBox.new()
    val statusbar1 = Gtk.Statusbar.new()
    val _ = Gtk.Statusbar.setHasResizeGrip(statusbar1,false)
    val _ = Gtk.Container.add(eventbox1,statusbar1)
    val _ = Gtk.Box.packStart(vbox3,notebook1,true,true,0)
    val _ = Gtk.Box.packStart(vbox3,eventbox1,false,false,0)
    val vpaned2 = Gtk.VPaned.new()
    val _ = Gtk.Paned.setPosition(vpaned2,600)
    val scrolledwindow3_xa = Gtk.Adjustment.new(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow3_ya = Gtk.Adjustment.new(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow3 = Gtk.ScrolledWindow.new(scrolledwindow3_xa,scrolledwindow3_ya)
    val _ = Gtk.ScrolledWindow.setPlacement(scrolledwindow3,Gtk.CornerType.TOP_LEFT)
    val _ = Gtk.ScrolledWindow.setShadowType(scrolledwindow3,Gtk.ShadowType.NONE)
    val _ = Gtk.ScrolledWindow.setPolicy(scrolledwindow3,Gtk.PolicyType.ALWAYS,Gtk.PolicyType.ALWAYS)
    val compilerout = Gtk.TextView.new()
    val _ = Gtk.Widget.setSizeRequest(compilerout,0,18)
    val _ = Gtk.TextBuffer.setText(Gtk.TextView.getBuffer compilerout,"",~1)
    val _ = Gtk.TextView.setIndent(compilerout,0)
    val _ = Gtk.TextView.setRightMargin(compilerout,0)
    val _ = Gtk.TextView.setLeftMargin(compilerout,0)
    val _ = Gtk.TextView.setPixelsInsideWrap(compilerout,0)
    val _ = Gtk.TextView.setPixelsBelowLines(compilerout,0)
    val _ = Gtk.TextView.setPixelsAboveLines(compilerout,0)
    val _ = Gtk.TextView.setCursorVisible(compilerout,true)
    val _ = Gtk.TextView.setWrapMode(compilerout,Gtk.WrapMode.NONE)
    val _ = Gtk.TextView.setJustification(compilerout,Gtk.Justification.LEFT)
    val _ = Gtk.TextView.setEditable(compilerout,true)
    val _ = Gtk.Container.add(scrolledwindow3,compilerout)
    val scrolledwindow4_xa = Gtk.Adjustment.new(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow4_ya = Gtk.Adjustment.new(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow4 = Gtk.ScrolledWindow.new(scrolledwindow4_xa,scrolledwindow4_ya)
    val _ = Gtk.ScrolledWindow.setPlacement(scrolledwindow4,Gtk.CornerType.TOP_LEFT)
    val _ = Gtk.ScrolledWindow.setShadowType(scrolledwindow4,Gtk.ShadowType.NONE)
    val _ = Gtk.ScrolledWindow.setPolicy(scrolledwindow4,Gtk.PolicyType.ALWAYS,Gtk.PolicyType.ALWAYS)
    val progout = Gtk.TextView.new()
    val _ = Gtk.Widget.setSizeRequest(progout,0,130)
    val _ = Gtk.TextBuffer.setText(Gtk.TextView.getBuffer progout,"",~1)
    val _ = Gtk.TextView.setIndent(progout,0)
    val _ = Gtk.TextView.setRightMargin(progout,0)
    val _ = Gtk.TextView.setLeftMargin(progout,0)
    val _ = Gtk.TextView.setPixelsInsideWrap(progout,0)
    val _ = Gtk.TextView.setPixelsBelowLines(progout,0)
    val _ = Gtk.TextView.setPixelsAboveLines(progout,0)
    val _ = Gtk.TextView.setCursorVisible(progout,true)
    val _ = Gtk.TextView.setWrapMode(progout,Gtk.WrapMode.NONE)
    val _ = Gtk.TextView.setJustification(progout,Gtk.Justification.LEFT)
    val _ = Gtk.TextView.setEditable(progout,true)
    val _ = Gtk.Container.add(scrolledwindow4,progout)
    val _ = Gtk.Paned.pack1(vpaned2,scrolledwindow3,false,true)
    val _ = Gtk.Paned.pack2(vpaned2,scrolledwindow4,true,true)
    val _ = Gtk.Paned.pack1(vpaned1,vbox3,false,true)
    val _ = Gtk.Paned.pack2(vpaned1,vpaned2,true,true)
    val statusbar = Gtk.Statusbar.new()
    val _ = Gtk.Box.packStart(vbox1,menubar1,false,false,0)
    val _ = Gtk.Box.packStart(vbox1,vpaned1,true,true,0)
    val _ = Gtk.Box.packStart(vbox1,statusbar,false,false,0)
    val _ = Gtk.Container.add(mainwidget,vbox1)
    val preferences = Gtk.Window.new(Gtk.WindowType.TOPLEVEL)
    val _ = Gtk.Window.setTitle(preferences,"Preferences")
    val _ = Gtk.Window.addAccelGroup(preferences,Helpers.accelGroup)
    val vbox4 = Gtk.VBox.new(false,10)
    val _ = Gtk.Container.setBorderWidth(vbox4,15)
    val notebook2 = Gtk.Notebook.new()
    val vbox5 = Gtk.VBox.new(false,10)
    val _ = Gtk.Container.setBorderWidth(vbox5,15)
    val frame1 = Gtk.Frame.new("")
    val _ = Gtk.Frame.setShadowType(frame1,Gtk.ShadowType.ETCHED_IN)
    val hbox2 = Gtk.HBox.new(false,10)
    val _ = Gtk.Container.setBorderWidth(hbox2,5)
    val label7 = Gtk.Label.new("Font name:")
    val font_button = Gtk.Button.newWithMnemonic("button5")
    val _ = Gtk.Box.packStart(hbox2,label7,false,false,0)
    val _ = Gtk.Box.packStart(hbox2,font_button,true,true,0)
    val label5 = Gtk.Label.new("Font")
    val _ = Gtk.Container.add(frame1,hbox2)
    val _ = Gtk.Frame.setLabelWidget(frame1,label5)
    val frame2 = Gtk.Frame.new("")
    val _ = Gtk.Frame.setShadowType(frame2,Gtk.ShadowType.ETCHED_IN)
    val table1 = Gtk.Table.new(5,2,false)
    val _ = Gtk.Container.setBorderWidth(table1,5)
    val _ = Gtk.Table.setRowSpacings(table1,0)
    val _ = Gtk.Table.setColSpacings(table1,10)
    val label8 = Gtk.Label.new("Plain:")
    val _ = Gtk.Misc.setAlignment(label8,0.0,0.5)
    val label9 = Gtk.Label.new("Error:")
    val _ = Gtk.Misc.setAlignment(label9,0.0,0.5)
    val label10 = Gtk.Label.new("Keyword:")
    val _ = Gtk.Misc.setAlignment(label10,0.0,0.5)
    val label11 = Gtk.Label.new("String:")
    val _ = Gtk.Misc.setAlignment(label11,0.0,0.5)
    val label12 = Gtk.Label.new("Comment:")
    val _ = Gtk.Misc.setAlignment(label12,0.0,0.5)
    val _ = Gtk.Table.attach(table1,label8,0,1,0,1,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Table.attach(table1,label9,0,1,1,2,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Table.attach(table1,label10,0,1,2,3,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Table.attach(table1,label11,0,1,3,4,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Table.attach(table1,label12,0,1,4,5,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val label6 = Gtk.Label.new("Colours")
    val _ = Gtk.Container.add(frame2,table1)
    val _ = Gtk.Frame.setLabelWidget(frame2,label6)
    val _ = Gtk.Box.packStart(vbox5,frame1,true,true,0)
    val _ = Gtk.Box.packStart(vbox5,frame2,true,true,0)
    val label3 = Gtk.Label.new("Fonts")
    val table2 = Gtk.Table.new(3,2,false)
    val _ = Gtk.Container.setBorderWidth(table2,10)
    val _ = Gtk.Table.setRowSpacings(table2,10)
    val _ = Gtk.Table.setColSpacings(table2,10)
    val label14 = Gtk.Label.new("Size of saved history:")
    val _ = Gtk.Misc.setAlignment(label14,0.0,0.5)
    val history_size_entry = Gtk.Entry.new()
    val label15 = Gtk.Label.new("")
    val _ = Gtk.Misc.setAlignment(label15,0.0,0.5)
    val clear_history_button = Gtk.Button.newWithMnemonic("Clear history")
    val loadSessionButton = Gtk.CheckButton.newWithMnemonic("Load session on startup")
    val _ = Gtk.ToggleButton.setActive(loadSessionButton,true)
    val label64 = Gtk.Label.new("")
    val _ = Gtk.Misc.setAlignment(label64,0.0,0.5)
    val _ = Gtk.Table.attach(table2,label14,0,1,0,1,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Table.attach(table2,history_size_entry,1,2,0,1,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Table.attach(table2,label15,0,1,1,2,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Table.attach(table2,clear_history_button,1,2,1,2,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Table.attach(table2,loadSessionButton,1,2,2,3,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Table.attach(table2,label64,0,1,2,3,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val label4 = Gtk.Label.new("History")
    val _ = Gtk.Container.add(notebook2,vbox5)
    val _ = Gtk.Notebook.setTabLabel(notebook2,Gtk.Notebook.getNthPage(notebook2,0),label3)
    val _ = Gtk.Container.add(notebook2,table2)
    val _ = Gtk.Notebook.setTabLabel(notebook2,Gtk.Notebook.getNthPage(notebook2,1),label4)
    val hbox1 = Gtk.HBox.new(true,0)
    val pref_cancel_button = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(pref_cancel_button,10)
    val alignment1 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox3 = Gtk.HBox.new(false,2)
    val image385 = Gtk.Image.newFromStock("gtk-cancel",Gtk.IconSize.BUTTON)
    val label16 = Gtk.Label.new("_Cancel")
    val _ = Gtk.Label.setUseUnderline(label16,true)
    val _ = Gtk.Box.packStart(hbox3,image385,false,false,0)
    val _ = Gtk.Box.packStart(hbox3,label16,false,false,0)
    val _ = Gtk.Container.add(alignment1,hbox3)
    val _ = Gtk.Container.add(pref_cancel_button,alignment1)
    val pref_revert_button = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(pref_revert_button,10)
    val alignment2 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox4 = Gtk.HBox.new(false,2)
    val image386 = Gtk.Image.newFromStock("gtk-revert-to-saved",Gtk.IconSize.BUTTON)
    val label17 = Gtk.Label.new("_Revert")
    val _ = Gtk.Label.setUseUnderline(label17,true)
    val _ = Gtk.Box.packStart(hbox4,image386,false,false,0)
    val _ = Gtk.Box.packStart(hbox4,label17,false,false,0)
    val _ = Gtk.Container.add(alignment2,hbox4)
    val _ = Gtk.Container.add(pref_revert_button,alignment2)
    val pref_save_button = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(pref_save_button,10)
    val alignment3 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox5 = Gtk.HBox.new(false,2)
    val image387 = Gtk.Image.newFromStock("gtk-save",Gtk.IconSize.BUTTON)
    val label18 = Gtk.Label.new("_Save")
    val _ = Gtk.Label.setUseUnderline(label18,true)
    val _ = Gtk.Box.packStart(hbox5,image387,false,false,0)
    val _ = Gtk.Box.packStart(hbox5,label18,false,false,0)
    val _ = Gtk.Container.add(alignment3,hbox5)
    val _ = Gtk.Container.add(pref_save_button,alignment3)
    val pref_ok_button = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(pref_ok_button,10)
    val alignment4 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox6 = Gtk.HBox.new(false,2)
    val image388 = Gtk.Image.newFromStock("gtk-ok",Gtk.IconSize.BUTTON)
    val label19 = Gtk.Label.new("_Ok")
    val _ = Gtk.Label.setUseUnderline(label19,true)
    val _ = Gtk.Box.packStart(hbox6,image388,false,false,0)
    val _ = Gtk.Box.packStart(hbox6,label19,false,false,0)
    val _ = Gtk.Container.add(alignment4,hbox6)
    val _ = Gtk.Container.add(pref_ok_button,alignment4)
    val _ = Gtk.Box.packStart(hbox1,pref_cancel_button,true,true,0)
    val _ = Gtk.Box.packStart(hbox1,pref_revert_button,true,true,0)
    val _ = Gtk.Box.packStart(hbox1,pref_save_button,true,true,0)
    val _ = Gtk.Box.packStart(hbox1,pref_ok_button,true,true,0)
    val _ = Gtk.Box.packStart(vbox4,notebook2,true,true,0)
    val _ = Gtk.Box.packStart(vbox4,hbox1,true,true,0)
    val _ = Gtk.Container.add(preferences,vbox4)
    val searchDialog = Gtk.Dialog.new()
    val _ = Gtk.Window.setTitle(searchDialog,"Search")
    val _ = Gtk.Window.setPosition(searchDialog,Gtk.WindowPosition.MOUSE)
    val _ = Gtk.Window.setResizable(searchDialog,false)
    val _ = Gtk.Dialog.setHasSeparator(searchDialog,true)
    val dialog_vbox1 = Gtk.Dialog.getFieldVBox searchDialog
    val dialog_vbox1_action_area = Gtk.Dialog.getFieldActionArea searchDialog
    val dialog_vbox1_dialog = searchDialog
    val _ = Gtk.Box.setHomogeneous(dialog_vbox1,false)
    val dialog_action_area1 = dialog_vbox1_action_area
    val dialog_action_area1_dialog = dialog_vbox1_dialog
    val _ = Gtk.ButtonBox.setLayout(dialog_action_area1,Gtk.ButtonBoxStyle.END)
    val search_cancel_button = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(search_cancel_button,5)
    val _ = Gtk.Prop.rawSet (search_cancel_button,"can-default", Gtk.Value.bool true) 
    val search_cancel_button_response_id = SOME ~6
    val alignment8 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox11 = Gtk.HBox.new(false,2)
    val image445 = Gtk.Image.newFromStock("gtk-cancel",Gtk.IconSize.BUTTON)
    val label27 = Gtk.Label.new("_Cancel")
    val _ = Gtk.Label.setUseUnderline(label27,true)
    val _ = Gtk.Box.packStart(hbox11,image445,false,false,0)
    val _ = Gtk.Box.packStart(hbox11,label27,false,false,0)
    val _ = Gtk.Container.add(alignment8,hbox11)
    val _ = Gtk.Container.add(search_cancel_button,alignment8)
    val search_ok_button = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(search_ok_button,5)
    val _ = Gtk.Prop.rawSet (search_ok_button,"can-default", Gtk.Value.bool true) 
    val search_ok_button_response_id = SOME ~5
    val alignment9 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox12 = Gtk.HBox.new(false,2)
    val image446 = Gtk.Image.newFromStock("gtk-ok",Gtk.IconSize.BUTTON)
    val label28 = Gtk.Label.new("_Ok")
    val _ = Gtk.Label.setUseUnderline(label28,true)
    val _ = Gtk.Box.packStart(hbox12,image446,false,false,0)
    val _ = Gtk.Box.packStart(hbox12,label28,false,false,0)
    val _ = Gtk.Container.add(alignment9,hbox12)
    val _ = Gtk.Container.add(search_ok_button,alignment9)
    val search_replace_button = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(search_replace_button,5)
    val _ = Gtk.Prop.rawSet (search_replace_button,"can-default", Gtk.Value.bool true) 
    val search_replace_button_response_id = SOME ~10
    val alignment10 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox13 = Gtk.HBox.new(false,2)
    val image447 = Gtk.Image.newFromStock("gtk-find-and-replace",Gtk.IconSize.BUTTON)
    val label29 = Gtk.Label.new("_Replace")
    val _ = Gtk.Label.setUseUnderline(label29,true)
    val _ = Gtk.Box.packStart(hbox13,image447,false,false,0)
    val _ = Gtk.Box.packStart(hbox13,label29,false,false,0)
    val _ = Gtk.Container.add(alignment10,hbox13)
    val _ = Gtk.Container.add(search_replace_button,alignment10)
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(dialog_action_area1_dialog,search_cancel_button,rid)) search_cancel_button_response_id
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(dialog_action_area1_dialog,search_ok_button,rid)) search_ok_button_response_id
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(dialog_action_area1_dialog,search_replace_button,rid)) search_replace_button_response_id
    val table4 = Gtk.Table.new(3,2,false)
    val _ = Gtk.Table.setRowSpacings(table4,0)
    val _ = Gtk.Table.setColSpacings(table4,0)
    val label25 = Gtk.Label.new("Search for:")
    val _ = Gtk.Misc.setAlignment(label25,0.0,0.5)
    val label26 = Gtk.Label.new("Replace with:")
    val _ = Gtk.Misc.setAlignment(label26,0.0,0.5)
    val replaceString = Gtk.Entry.new()
    val _ = Gtk.Entry.setActivatesDefault(replaceString,true)
    val searchString = Gtk.Entry.new()
    val _ = Gtk.Entry.setActivatesDefault(searchString,true)
    val alignment21 = Gtk.Alignment.new(0.5,0.5,1.0,1.0)
    val search_case_sensitive = Gtk.CheckButton.newWithMnemonic("Case _sensitive")
    val _ = Gtk.Container.add(alignment21,search_case_sensitive)
    val _ = Gtk.Table.attach(table4,label25,0,1,0,1,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Table.attach(table4,label26,0,1,1,2,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Table.attach(table4,replaceString,1,2,1,2,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Table.attach(table4,searchString,1,2,0,1,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Table.attach(table4,alignment21,1,2,2,3,[Gtk.AttachOptions.FILL],[Gtk.AttachOptions.FILL],0,0)
    val _ = Gtk.Box.packStart(dialog_vbox1,table4,false,false,0)
    val go_to_line_dialog = Gtk.Dialog.new()
    val _ = Gtk.Window.setTitle(go_to_line_dialog,"Go to Line")
    val _ = Gtk.Window.setPosition(go_to_line_dialog,Gtk.WindowPosition.MOUSE)
    val _ = Gtk.Window.setModal(go_to_line_dialog,true)
    val _ = Gtk.Dialog.setHasSeparator(go_to_line_dialog,true)
    val dialog_vbox2 = Gtk.Dialog.getFieldVBox go_to_line_dialog
    val dialog_vbox2_action_area = Gtk.Dialog.getFieldActionArea go_to_line_dialog
    val dialog_vbox2_dialog = go_to_line_dialog
    val _ = Gtk.Box.setHomogeneous(dialog_vbox2,false)
    val dialog_action_area2 = dialog_vbox2_action_area
    val dialog_action_area2_dialog = dialog_vbox2_dialog
    val _ = Gtk.ButtonBox.setLayout(dialog_action_area2,Gtk.ButtonBoxStyle.END)
    val cancelbutton1 = Gtk.Button.newFromStock("gtk-cancel")
    val cancelbutton1_response_id = SOME ~6
    val _ = Gtk.Prop.rawSet (cancelbutton1,"can-default", Gtk.Value.bool true) 
    val okbutton1 = Gtk.Button.newFromStock("gtk-ok")
    val okbutton1_response_id = SOME ~5
    val _ = Gtk.Prop.rawSet (okbutton1,"can-default", Gtk.Value.bool true) 
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(dialog_action_area2_dialog,cancelbutton1,rid)) cancelbutton1_response_id
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(dialog_action_area2_dialog,okbutton1,rid)) okbutton1_response_id
    val hbox14 = Gtk.HBox.new(false,5)
    val label30 = Gtk.Label.new("Go to line:")
    val go_to_line_entry = Gtk.Entry.new()
    val _ = Gtk.Entry.setActivatesDefault(go_to_line_entry,true)
    val _ = Gtk.Box.packStart(hbox14,label30,false,false,0)
    val _ = Gtk.Box.packStart(hbox14,go_to_line_entry,true,true,0)
    val _ = Gtk.Box.packStart(dialog_vbox2,hbox14,true,true,0)
    val modified_dialog = Gtk.Dialog.new()
    val _ = Gtk.Window.setTitle(modified_dialog,"Unsaved Modifications")
    val _ = Gtk.Dialog.setHasSeparator(modified_dialog,true)
    val dialog_vbox3 = Gtk.Dialog.getFieldVBox modified_dialog
    val dialog_vbox3_action_area = Gtk.Dialog.getFieldActionArea modified_dialog
    val dialog_vbox3_dialog = modified_dialog
    val _ = Gtk.Box.setHomogeneous(dialog_vbox3,false)
    val dialog_action_area3 = dialog_vbox3_action_area
    val dialog_action_area3_dialog = dialog_vbox3_dialog
    val _ = Gtk.ButtonBox.setLayout(dialog_action_area3,Gtk.ButtonBoxStyle.END)
    val button1 = Gtk.Button.new()
    val _ = Gtk.Prop.rawSet (button1,"can-default", Gtk.Value.bool true) 
    val button1_response_id = SOME ~7
    val alignment13 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox18 = Gtk.HBox.new(false,2)
    val image451 = Gtk.Image.newFromStock("gtk-delete",Gtk.IconSize.BUTTON)
    val label33 = Gtk.Label.new("_Discard")
    val _ = Gtk.Label.setUseUnderline(label33,true)
    val _ = Gtk.Box.packStart(hbox18,image451,false,false,0)
    val _ = Gtk.Box.packStart(hbox18,label33,false,false,0)
    val _ = Gtk.Container.add(alignment13,hbox18)
    val _ = Gtk.Container.add(button1,alignment13)
    val button2 = Gtk.Button.new()
    val _ = Gtk.Prop.rawSet (button2,"can-default", Gtk.Value.bool true) 
    val button2_response_id = SOME ~6
    val alignment12 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox16 = Gtk.HBox.new(false,2)
    val image449 = Gtk.Image.newFromStock("gtk-cancel",Gtk.IconSize.BUTTON)
    val label32 = Gtk.Label.new("_Cancel")
    val _ = Gtk.Label.setUseUnderline(label32,true)
    val _ = Gtk.Box.packStart(hbox16,image449,false,false,0)
    val _ = Gtk.Box.packStart(hbox16,label32,false,false,0)
    val _ = Gtk.Container.add(alignment12,hbox16)
    val _ = Gtk.Container.add(button2,alignment12)
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(dialog_action_area3_dialog,button1,rid)) button1_response_id
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(dialog_action_area3_dialog,button2,rid)) button2_response_id
    val hbox17 = Gtk.HBox.new(false,0)
    val _ = Gtk.Container.setBorderWidth(hbox17,10)
    val image450 = Gtk.Image.newFromStock("gtk-dialog-warning",Gtk.IconSize.DIALOG)
    val vbox6 = Gtk.VBox.new(true,3)
    val modified_msg1 = Gtk.Label.new("message 1")
    val modified_msg2 = Gtk.Label.new("message 2")
    val _ = Gtk.Box.packStart(vbox6,modified_msg1,false,false,0)
    val _ = Gtk.Box.packStart(vbox6,modified_msg2,false,false,0)
    val _ = Gtk.Box.packStart(hbox17,image450,true,true,0)
    val _ = Gtk.Box.packStart(hbox17,vbox6,true,true,0)
    val _ = Gtk.Box.packStart(dialog_vbox3,hbox17,true,true,0)
    val save_on_quit_dialog = Gtk.Dialog.new()
    val _ = Gtk.Window.setTitle(save_on_quit_dialog,"Modifed Files")
    val _ = Gtk.Dialog.setHasSeparator(save_on_quit_dialog,true)
    val dialog_vbox4 = Gtk.Dialog.getFieldVBox save_on_quit_dialog
    val dialog_vbox4_action_area = Gtk.Dialog.getFieldActionArea save_on_quit_dialog
    val dialog_vbox4_dialog = save_on_quit_dialog
    val _ = Gtk.Box.setHomogeneous(dialog_vbox4,false)
    val dialog_action_area4 = dialog_vbox4_action_area
    val dialog_action_area4_dialog = dialog_vbox4_dialog
    val _ = Gtk.ButtonBox.setLayout(dialog_action_area4,Gtk.ButtonBoxStyle.END)
    val save_on_quit_discard_all = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(save_on_quit_discard_all,5)
    val _ = Gtk.Prop.rawSet (save_on_quit_discard_all,"can-default", Gtk.Value.bool true) 
    val save_on_quit_discard_all_response_id = SOME ~2
    val alignment17 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox22 = Gtk.HBox.new(false,2)
    val image455 = Gtk.Image.newFromStock("gtk-quit",Gtk.IconSize.BUTTON)
    val label39 = Gtk.Label.new("Discard a_ll")
    val _ = Gtk.Label.setUseUnderline(label39,true)
    val _ = Gtk.Box.packStart(hbox22,image455,false,false,0)
    val _ = Gtk.Box.packStart(hbox22,label39,false,false,0)
    val _ = Gtk.Container.add(alignment17,hbox22)
    val _ = Gtk.Container.add(save_on_quit_discard_all,alignment17)
    val save_on_quit_discard = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(save_on_quit_discard,5)
    val _ = Gtk.Prop.rawSet (save_on_quit_discard,"can-default", Gtk.Value.bool true) 
    val save_on_quit_discard_response_id = SOME ~7
    val alignment16 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox21 = Gtk.HBox.new(false,2)
    val image454 = Gtk.Image.newFromStock("gtk-delete",Gtk.IconSize.BUTTON)
    val label38 = Gtk.Label.new("_Discard")
    val _ = Gtk.Label.setUseUnderline(label38,true)
    val _ = Gtk.Box.packStart(hbox21,image454,false,false,0)
    val _ = Gtk.Box.packStart(hbox21,label38,false,false,0)
    val _ = Gtk.Container.add(alignment16,hbox21)
    val _ = Gtk.Container.add(save_on_quit_discard,alignment16)
    val save_on_quit_save_button = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(save_on_quit_save_button,5)
    val _ = Gtk.Prop.rawSet (save_on_quit_save_button,"can-default", Gtk.Value.bool true) 
    val save_on_quit_save_button_response_id = SOME ~5
    val alignment15 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox20 = Gtk.HBox.new(false,2)
    val image453 = Gtk.Image.newFromStock("gtk-save",Gtk.IconSize.BUTTON)
    val label37 = Gtk.Label.new("_Save")
    val _ = Gtk.Label.setUseUnderline(label37,true)
    val _ = Gtk.Box.packStart(hbox20,image453,false,false,0)
    val _ = Gtk.Box.packStart(hbox20,label37,false,false,0)
    val _ = Gtk.Container.add(alignment15,hbox20)
    val _ = Gtk.Container.add(save_on_quit_save_button,alignment15)
    val save_on_quit_save_as_button = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(save_on_quit_save_as_button,5)
    val _ = Gtk.Prop.rawSet (save_on_quit_save_as_button,"can-default", Gtk.Value.bool true) 
    val save_on_quit_save_as_button_response_id = SOME ~3
    val alignment20 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox26 = Gtk.HBox.new(false,2)
    val image459 = Gtk.Image.newFromStock("gtk-save-as",Gtk.IconSize.BUTTON)
    val label44 = Gtk.Label.new("Save _as")
    val _ = Gtk.Label.setUseUnderline(label44,true)
    val _ = Gtk.Box.packStart(hbox26,image459,false,false,0)
    val _ = Gtk.Box.packStart(hbox26,label44,false,false,0)
    val _ = Gtk.Container.add(alignment20,hbox26)
    val _ = Gtk.Container.add(save_on_quit_save_as_button,alignment20)
    val save_on_quit_cancel_button = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(save_on_quit_cancel_button,5)
    val _ = Gtk.Prop.rawSet (save_on_quit_cancel_button,"can-default", Gtk.Value.bool true) 
    val save_on_quit_cancel_button_response_id = SOME ~6
    val alignment19 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox25 = Gtk.HBox.new(false,2)
    val image458 = Gtk.Image.newFromStock("gtk-cancel",Gtk.IconSize.BUTTON)
    val label43 = Gtk.Label.new("_Cancel")
    val _ = Gtk.Label.setUseUnderline(label43,true)
    val _ = Gtk.Box.packStart(hbox25,image458,false,false,0)
    val _ = Gtk.Box.packStart(hbox25,label43,false,false,0)
    val _ = Gtk.Container.add(alignment19,hbox25)
    val _ = Gtk.Container.add(save_on_quit_cancel_button,alignment19)
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(dialog_action_area4_dialog,save_on_quit_discard_all,rid)) save_on_quit_discard_all_response_id
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(dialog_action_area4_dialog,save_on_quit_discard,rid)) save_on_quit_discard_response_id
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(dialog_action_area4_dialog,save_on_quit_save_button,rid)) save_on_quit_save_button_response_id
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(dialog_action_area4_dialog,save_on_quit_save_as_button,rid)) save_on_quit_save_as_button_response_id
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(dialog_action_area4_dialog,save_on_quit_cancel_button,rid)) save_on_quit_cancel_button_response_id
    val hbox23 = Gtk.HBox.new(false,0)
    val image456 = Gtk.Image.newFromStock("gtk-dialog-warning",Gtk.IconSize.DIALOG)
    val vbox8 = Gtk.VBox.new(true,5)
    val save_on_quit_label = Gtk.Label.new("File 'bla' was modified.")
    val label41 = Gtk.Label.new("How do you want to proceed?")
    val _ = Gtk.Box.packStart(vbox8,save_on_quit_label,false,false,0)
    val _ = Gtk.Box.packStart(vbox8,label41,false,false,0)
    val _ = Gtk.Box.packStart(hbox23,image456,true,true,0)
    val _ = Gtk.Box.packStart(hbox23,vbox8,true,true,0)
    val _ = Gtk.Box.packStart(dialog_vbox4,hbox23,true,true,0)
    val file_not_found_dialog = Gtk.Dialog.new()
    val _ = Gtk.Window.setTitle(file_not_found_dialog,"File Not Found")
    val _ = Gtk.Dialog.setHasSeparator(file_not_found_dialog,true)
    val vbox11 = Gtk.Dialog.getFieldVBox file_not_found_dialog
    val vbox11_action_area = Gtk.Dialog.getFieldActionArea file_not_found_dialog
    val vbox11_dialog = file_not_found_dialog
    val _ = Gtk.Box.setHomogeneous(vbox11,false)
    val hbuttonbox1 = vbox11_action_area
    val hbuttonbox1_dialog = vbox11_dialog
    val _ = Gtk.ButtonBox.setLayout(hbuttonbox1,Gtk.ButtonBoxStyle.END)
    val button10 = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(button10,5)
    val _ = Gtk.Prop.rawSet (button10,"can-default", Gtk.Value.bool true) 
    val button10_response_id = SOME ~5
    val alignment27 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox34 = Gtk.HBox.new(false,2)
    val image825 = Gtk.Image.newFromStock("gtk-new",Gtk.IconSize.BUTTON)
    val label55 = Gtk.Label.new("_New")
    val _ = Gtk.Label.setUseUnderline(label55,true)
    val _ = Gtk.Box.packStart(hbox34,image825,false,false,0)
    val _ = Gtk.Box.packStart(hbox34,label55,false,false,0)
    val _ = Gtk.Container.add(alignment27,hbox34)
    val _ = Gtk.Container.add(button10,alignment27)
    val button11 = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(button11,5)
    val _ = Gtk.Prop.rawSet (button11,"can-default", Gtk.Value.bool true) 
    val button11_response_id = SOME ~6
    val alignment28 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox35 = Gtk.HBox.new(false,2)
    val image826 = Gtk.Image.newFromStock("gtk-cancel",Gtk.IconSize.BUTTON)
    val label56 = Gtk.Label.new("_Cancel")
    val _ = Gtk.Label.setUseUnderline(label56,true)
    val _ = Gtk.Box.packStart(hbox35,image826,false,false,0)
    val _ = Gtk.Box.packStart(hbox35,label56,false,false,0)
    val _ = Gtk.Container.add(alignment28,hbox35)
    val _ = Gtk.Container.add(button11,alignment28)
    val file_not_found_quit_button = Gtk.Button.new()
    val _ = Gtk.Container.setBorderWidth(file_not_found_quit_button,5)
    val _ = Gtk.Prop.rawSet (file_not_found_quit_button,"can-default", Gtk.Value.bool true) 
    val file_not_found_quit_button_response_id = SOME ~7
    val alignment29 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox36 = Gtk.HBox.new(false,2)
    val image827 = Gtk.Image.newFromStock("gtk-quit",Gtk.IconSize.BUTTON)
    val label57 = Gtk.Label.new("_Quit")
    val _ = Gtk.Label.setUseUnderline(label57,true)
    val _ = Gtk.Box.packStart(hbox36,image827,false,false,0)
    val _ = Gtk.Box.packStart(hbox36,label57,false,false,0)
    val _ = Gtk.Container.add(alignment29,hbox36)
    val _ = Gtk.Container.add(file_not_found_quit_button,alignment29)
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(hbuttonbox1_dialog,button10,rid)) button10_response_id
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(hbuttonbox1_dialog,button11,rid)) button11_response_id
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(hbuttonbox1_dialog,file_not_found_quit_button,rid)) file_not_found_quit_button_response_id
    val hbox39 = Gtk.HBox.new(false,0)
    val image830 = Gtk.Image.newFromStock("gtk-dialog-warning",Gtk.IconSize.DIALOG)
    val vbox12 = Gtk.VBox.new(true,5)
    val could_not_load_label = Gtk.Label.new("Could not load file 'bla'.")
    val label61 = Gtk.Label.new("How do you want to proceed?")
    val _ = Gtk.Box.packStart(vbox12,could_not_load_label,false,false,0)
    val _ = Gtk.Box.packStart(vbox12,label61,false,false,0)
    val _ = Gtk.Box.packStart(hbox39,image830,true,true,0)
    val _ = Gtk.Box.packStart(hbox39,vbox12,true,true,0)
    val _ = Gtk.Box.packStart(vbox11,hbox39,true,true,0)
    val overwrite_dialog = Gtk.Dialog.new()
    val _ = Gtk.Window.setTitle(overwrite_dialog,"File exists")
    val _ = Gtk.Dialog.setHasSeparator(overwrite_dialog,true)
    val vbox13 = Gtk.Dialog.getFieldVBox overwrite_dialog
    val vbox13_action_area = Gtk.Dialog.getFieldActionArea overwrite_dialog
    val vbox13_dialog = overwrite_dialog
    val _ = Gtk.Box.setHomogeneous(vbox13,false)
    val hbuttonbox2 = vbox13_action_area
    val hbuttonbox2_dialog = vbox13_dialog
    val _ = Gtk.ButtonBox.setLayout(hbuttonbox2,Gtk.ButtonBoxStyle.END)
    val button12 = Gtk.Button.new()
    val _ = Gtk.Prop.rawSet (button12,"can-default", Gtk.Value.bool true) 
    val button12_response_id = SOME ~7
    val alignment30 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox40 = Gtk.HBox.new(false,2)
    val image831 = Gtk.Image.newFromStock("gtk-save",Gtk.IconSize.BUTTON)
    val label62 = Gtk.Label.new("_Overwrite")
    val _ = Gtk.Label.setUseUnderline(label62,true)
    val _ = Gtk.Box.packStart(hbox40,image831,false,false,0)
    val _ = Gtk.Box.packStart(hbox40,label62,false,false,0)
    val _ = Gtk.Container.add(alignment30,hbox40)
    val _ = Gtk.Container.add(button12,alignment30)
    val button13 = Gtk.Button.new()
    val _ = Gtk.Prop.rawSet (button13,"can-default", Gtk.Value.bool true) 
    val button13_response_id = SOME ~6
    val alignment31 = Gtk.Alignment.new(0.5,0.5,0.0,0.0)
    val hbox41 = Gtk.HBox.new(false,2)
    val image832 = Gtk.Image.newFromStock("gtk-cancel",Gtk.IconSize.BUTTON)
    val label63 = Gtk.Label.new("_Cancel")
    val _ = Gtk.Label.setUseUnderline(label63,true)
    val _ = Gtk.Box.packStart(hbox41,image832,false,false,0)
    val _ = Gtk.Box.packStart(hbox41,label63,false,false,0)
    val _ = Gtk.Container.add(alignment31,hbox41)
    val _ = Gtk.Container.add(button13,alignment31)
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(hbuttonbox2_dialog,button12,rid)) button12_response_id
    val _ = Option.app (fn rid => Gtk.Dialog.addActionWidget(hbuttonbox2_dialog,button13,rid)) button13_response_id
    val hbox42 = Gtk.HBox.new(false,0)
    val _ = Gtk.Container.setBorderWidth(hbox42,10)
    val image833 = Gtk.Image.newFromStock("gtk-dialog-warning",Gtk.IconSize.DIALOG)
    val vbox14 = Gtk.VBox.new(true,3)
    val overwrite_msg1 = Gtk.Label.new("message 1")
    val overwrite_msg2 = Gtk.Label.new("message 2")
    val _ = Gtk.Box.packStart(vbox14,overwrite_msg1,false,false,0)
    val _ = Gtk.Box.packStart(vbox14,overwrite_msg2,false,false,0)
    val _ = Gtk.Box.packStart(hbox42,image833,true,true,0)
    val _ = Gtk.Box.packStart(hbox42,vbox14,true,true,0)
    val _ = Gtk.Box.packStart(vbox13,hbox42,true,true,0)
  end

(* Created by alice-glade *)
