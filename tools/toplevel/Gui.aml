(*
 * This is a generated file, created by alice-glade.
 * Modifications may get lost.
 *)


import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"

import structure Key from "x-alice:/lib/gtk/Key"

structure Gui =
  struct
    structure Helpers = struct
      val accelGroup = Gtk.accelGroupNew()
      val tooltips = Gtk.tooltipsNew()
      fun containerAddList(cont, children) = 
        List.app (fn c => Gtk.containerAdd(cont,c)) children
    end

    val mainwidget = Gtk.windowNew(Gtk.WINDOW_TOPLEVEL)
    val _ = Gtk.windowSetTitle(mainwidget,"Alice")
    val _ = Gtk.windowAddAccelGroup(mainwidget,Helpers.accelGroup)
    val vbox1 = Gtk.vboxNew(false,0)
    val menubar1 = Gtk.menuBarNew()
    val _ = Gtk.widgetSetSizeRequest(menubar1,188,28)
    val menuitem7 = Gtk.menuItemNewWithMnemonic("_File")
    val menuitem7_menu = Gtk.menuNew()
    val new1 = Gtk.imageMenuItemNewFromStock("gtk-new",Helpers.accelGroup)
    val open1 = Gtk.imageMenuItemNewFromStock("gtk-open",Helpers.accelGroup)
    val save1 = Gtk.imageMenuItemNewFromStock("gtk-save",Helpers.accelGroup)
    val save_as1 = Gtk.imageMenuItemNewFromStock("gtk-save-as",Helpers.accelGroup)
    val close1 = Gtk.imageMenuItemNewFromStock("gtk-close",Helpers.accelGroup)
    val separatormenuitem1 = Gtk.menuItemNew()
    val compilefile = Gtk.imageMenuItemNewWithMnemonic("Compile")
    val _ = Gtk.tooltipsSetTip(Helpers.tooltips,compilefile,"Compile the current file to a component","")
    val _ = Gtk.widgetSetSensitive(compilefile,false)
    val _ = Gtk.widgetAddAccelerator(compilefile,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_K,Gdk.IntToGdkModifierType ((Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK)),Gtk.ACCEL_VISIBLE)
    val image44 = Gtk.imageNewFromStock("gtk-convert",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(compilefile,image44)
    val separator3 = Gtk.menuItemNew()
    val quit1 = Gtk.imageMenuItemNewFromStock("gtk-quit",Helpers.accelGroup)
    val _ = Helpers.containerAddList(menuitem7_menu,[new1,open1,save1,save_as1,close1,separatormenuitem1,compilefile,separator3,quit1])
    val _ = Gtk.menuItemSetSubmenu(menuitem7,menuitem7_menu)
    val menuitem8 = Gtk.menuItemNewWithMnemonic("_Edit")
    val menuitem8_menu = Gtk.menuNew()
    val undo = Gtk.imageMenuItemNewWithMnemonic("_Undo")
    val _ = Gtk.widgetAddAccelerator(undo,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Z,Gdk.IntToGdkModifierType ((Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK)),Gtk.ACCEL_VISIBLE)
    val image45 = Gtk.imageNewFromStock("gtk-undo",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(undo,image45)
    val cut1 = Gtk.imageMenuItemNewFromStock("gtk-cut",Helpers.accelGroup)
    val copy1 = Gtk.imageMenuItemNewFromStock("gtk-copy",Helpers.accelGroup)
    val paste1 = Gtk.imageMenuItemNewFromStock("gtk-paste",Helpers.accelGroup)
    val delete1 = Gtk.imageMenuItemNewFromStock("gtk-delete",Helpers.accelGroup)
    val separator9 = Gtk.menuItemNew()
    val indent_region = Gtk.imageMenuItemNewWithMnemonic("Indent region")
    val _ = Gtk.widgetAddAccelerator(indent_region,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_greater,Gdk.IntToGdkModifierType ((Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK)),Gtk.ACCEL_VISIBLE)
    val image46 = Gtk.imageNewFromStock("gtk-goto-last",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(indent_region,image46)
    val outdent_region = Gtk.imageMenuItemNewWithMnemonic("Outdent region")
    val _ = Gtk.widgetAddAccelerator(outdent_region,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_less,Gdk.IntToGdkModifierType ((Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK)),Gtk.ACCEL_VISIBLE)
    val image47 = Gtk.imageNewFromStock("gtk-goto-first",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(outdent_region,image47)
    val separator6 = Gtk.menuItemNew()
    val find = Gtk.imageMenuItemNewFromStock("gtk-find",Helpers.accelGroup)
    val find_and_replace = Gtk.imageMenuItemNewFromStock("gtk-find-and-replace",Helpers.accelGroup)
    val separator5 = Gtk.menuItemNew()
    val go_to_line = Gtk.menuItemNewWithMnemonic("Go to line")
    val _ = Gtk.widgetAddAccelerator(go_to_line,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_L,Gdk.IntToGdkModifierType ((Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK)),Gtk.ACCEL_VISIBLE)
    val jump_to_last_error = Gtk.imageMenuItemNewWithMnemonic("Jump to last error")
    val _ = Gtk.widgetAddAccelerator(jump_to_last_error,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_E,Gdk.IntToGdkModifierType ((Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK)),Gtk.ACCEL_VISIBLE)
    val image48 = Gtk.imageNewFromStock("gtk-jump-to",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(jump_to_last_error,image48)
    val syntax_colouring = Gtk.imageMenuItemNewWithMnemonic("Syntax colouring")
    val image49 = Gtk.imageNewFromStock("gtk-select-color",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(syntax_colouring,image49)
    val _ = Helpers.containerAddList(menuitem8_menu,[undo,cut1,copy1,paste1,delete1,separator9,indent_region,outdent_region,separator6,find,find_and_replace,separator5,go_to_line,jump_to_last_error,syntax_colouring])
    val _ = Gtk.menuItemSetSubmenu(menuitem8,menuitem8_menu)
    val feed1 = Gtk.menuItemNewWithMnemonic("Eval")
    val feed1_menu = Gtk.menuNew()
    val feedregion = Gtk.imageMenuItemNewWithMnemonic("Feed region")
    val _ = Gtk.widgetAddAccelerator(feedregion,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Return,Gdk.IntToGdkModifierType ((Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK)),Gtk.ACCEL_VISIBLE)
    val image50 = Gtk.imageNewFromStock("gtk-execute",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(feedregion,image50)
    val feedfile = Gtk.imageMenuItemNewWithMnemonic("Feed file")
    val image51 = Gtk.imageNewFromStock("gtk-execute",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(feedfile,image51)
    val separator4 = Gtk.menuItemNew()
    val interrupt = Gtk.imageMenuItemNewWithMnemonic("Interrupt")
    val _ = Gtk.tooltipsSetTip(Helpers.tooltips,interrupt,"Interrupt current evaluation","")
    val _ = Gtk.widgetAddAccelerator(interrupt,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_I,Gdk.IntToGdkModifierType ((Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK)),Gtk.ACCEL_VISIBLE)
    val image52 = Gtk.imageNewFromStock("gtk-stop",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(interrupt,image52)
    val background = Gtk.imageMenuItemNewWithMnemonic("Background")
    val _ = Gtk.tooltipsSetTip(Helpers.tooltips,background,"Send current evaluation to background, spawning a new thread","")
    val _ = Gtk.widgetAddAccelerator(background,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_B,Gdk.IntToGdkModifierType ((Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK)),Gtk.ACCEL_VISIBLE)
    val image53 = Gtk.imageNewFromStock("gtk-goto-bottom",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(background,image53)
    val separator11 = Gtk.menuItemNew()
    val reset = Gtk.imageMenuItemNewWithMnemonic("Clear environment")
    val image54 = Gtk.imageNewFromStock("gtk-clear",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(reset,image54)
    val separator10 = Gtk.menuItemNew()
    val back_in_history = Gtk.imageMenuItemNewWithMnemonic("Back in history")
    val _ = Gtk.widgetAddAccelerator(back_in_history,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Up,Gdk.IntToGdkModifierType ((Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK)),Gtk.ACCEL_VISIBLE)
    val image55 = Gtk.imageNewFromStock("gtk-go-up",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(back_in_history,image55)
    val forward_in_history = Gtk.imageMenuItemNewWithMnemonic("Forward in history")
    val _ = Gtk.widgetAddAccelerator(forward_in_history,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Down,Gdk.IntToGdkModifierType ((Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK)),Gtk.ACCEL_VISIBLE)
    val image56 = Gtk.imageNewFromStock("gtk-go-down",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(forward_in_history,image56)
    val _ = Helpers.containerAddList(feed1_menu,[feedregion,feedfile,separator4,interrupt,background,separator11,reset,separator10,back_in_history,forward_in_history])
    val _ = Gtk.menuItemSetSubmenu(feed1,feed1_menu)
    val separator1 = Gtk.menuItemNew()
    val menuitem10 = Gtk.menuItemNewWithMnemonic("_Help")
    val menuitem10_menu = Gtk.menuNew()
    val about1 = Gtk.menuItemNewWithMnemonic("_About")
    val _ = Gtk.containerAdd(menuitem10_menu,about1)
    val _ = Gtk.menuItemSetSubmenu(menuitem10,menuitem10_menu)
    val _ = Helpers.containerAddList(menubar1,[menuitem7,menuitem8,feed1,separator1,menuitem10])
    val vpaned1 = Gtk.vpanedNew()
    val _ = Gtk.panedSetPosition(vpaned1,1)
    val vbox3 = Gtk.vboxNew(false,0)
    val notebook1 = Gtk.notebookNew()
    val _ = Gtk.widgetSetSizeRequest(notebook1,750,500)
    val _ = Gtk.notebookPopupEnable(notebook1)
    val _ = Gtk.notebookSetScrollable(notebook1,true)
    val statusbar1 = Gtk.statusbarNew()
    val _ = Gtk.statusbarSetHasResizeGrip(statusbar1,false)
    val _ = Gtk.boxPackStart(vbox3,notebook1,true,true,0)
    val _ = Gtk.boxPackStart(vbox3,statusbar1,false,false,0)
    val vpaned2 = Gtk.vpanedNew()
    val _ = Gtk.panedSetPosition(vpaned2,600)
    val scrolledwindow3_xa = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow3_ya = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow3 = Gtk.scrolledWindowNew(scrolledwindow3_xa,scrolledwindow3_ya)
    val _ = Gtk.scrolledWindowSetShadowType(scrolledwindow3,Gtk.SHADOW_NONE)
    val compilerout = Gtk.textViewNew()
    val _ = Gtk.widgetSetSizeRequest(compilerout,0,18)
    val _ = Gtk.textBufferSetText(Gtk.textViewGetBuffer compilerout,"",~1)
    val _ = Gtk.textViewSetIndent(compilerout,0)
    val _ = Gtk.textViewSetRightMargin(compilerout,0)
    val _ = Gtk.textViewSetLeftMargin(compilerout,0)
    val _ = Gtk.textViewSetPixelsInsideWrap(compilerout,0)
    val _ = Gtk.textViewSetPixelsBelowLines(compilerout,0)
    val _ = Gtk.textViewSetPixelsAboveLines(compilerout,0)
    val _ = Gtk.textViewSetCursorVisible(compilerout,true)
    val _ = Gtk.textViewSetWrapMode(compilerout,Gtk.WRAP_NONE)
    val _ = Gtk.textViewSetJustification(compilerout,Gtk.JUSTIFY_LEFT)
    val _ = Gtk.textViewSetEditable(compilerout,true)
    val _ = Gtk.containerAdd(scrolledwindow3,compilerout)
    val scrolledwindow4_xa = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow4_ya = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow4 = Gtk.scrolledWindowNew(scrolledwindow4_xa,scrolledwindow4_ya)
    val _ = Gtk.scrolledWindowSetShadowType(scrolledwindow4,Gtk.SHADOW_NONE)
    val progout = Gtk.textViewNew()
    val _ = Gtk.widgetSetSizeRequest(progout,0,130)
    val _ = Gtk.textBufferSetText(Gtk.textViewGetBuffer progout,"",~1)
    val _ = Gtk.textViewSetIndent(progout,0)
    val _ = Gtk.textViewSetRightMargin(progout,0)
    val _ = Gtk.textViewSetLeftMargin(progout,0)
    val _ = Gtk.textViewSetPixelsInsideWrap(progout,0)
    val _ = Gtk.textViewSetPixelsBelowLines(progout,0)
    val _ = Gtk.textViewSetPixelsAboveLines(progout,0)
    val _ = Gtk.textViewSetCursorVisible(progout,true)
    val _ = Gtk.textViewSetWrapMode(progout,Gtk.WRAP_NONE)
    val _ = Gtk.textViewSetJustification(progout,Gtk.JUSTIFY_LEFT)
    val _ = Gtk.textViewSetEditable(progout,true)
    val _ = Gtk.containerAdd(scrolledwindow4,progout)
    val _ = Gtk.panedPack1(vpaned2,scrolledwindow3,false,true)
    val _ = Gtk.panedPack2(vpaned2,scrolledwindow4,true,true)
    val _ = Gtk.panedPack1(vpaned1,vbox3,false,true)
    val _ = Gtk.panedPack2(vpaned1,vpaned2,true,true)
    val statusbar = Gtk.statusbarNew()
    val _ = Gtk.boxPackStart(vbox1,menubar1,false,false,0)
    val _ = Gtk.boxPackStart(vbox1,vpaned1,true,true,0)
    val _ = Gtk.boxPackStart(vbox1,statusbar,false,false,0)
    val _ = Gtk.containerAdd(mainwidget,vbox1)
  end

(* Created by alice-glade *)
