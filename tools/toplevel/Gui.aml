(*
 * This is a generated file, created by alice-glade.
 * Modifications may get lost.
 *)


import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"

import structure Key from "x-alice:/lib/gtk/Key"

structure Gui =
  struct
    structure Helpers = struct
      val accelGroup = Gtk.accelGroupNew()
      val tooltips = Gtk.tooltipsNew()
      fun containerAddList(cont, children) = 
        List.app (fn c => Gtk.containerAdd(cont,c)) children
    end

    val mainwidget = Gtk.windowNew(Gtk.WINDOW_TOPLEVEL)
    val _ = Gtk.windowSetTitle(mainwidget,"Alice")
    val _ = Gtk.windowAddAccelGroup(mainwidget,Helpers.accelGroup)
    val vbox1 = Gtk.vboxNew(false,0)
    val menubar1 = Gtk.menuBarNew()
    val _ = Gtk.widgetSetSizeRequest(menubar1,188,28)
    val menuitem7 = Gtk.menuItemNewWithMnemonic("_File")
    val menuitem7_menu = Gtk.menuNew()
    val new1 = Gtk.imageMenuItemNewFromStock("gtk-new",Helpers.accelGroup)
    val open1 = Gtk.imageMenuItemNewWithMnemonic("_Open...")
    val _ = Gtk.widgetAddAccelerator(open1,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_O,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image326 = Gtk.imageNewFromStock("gtk-open",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(open1,image326)
    val save1 = Gtk.imageMenuItemNewFromStock("gtk-save",Helpers.accelGroup)
    val save_as1 = Gtk.imageMenuItemNewWithMnemonic("Save _As...")
    val image327 = Gtk.imageNewFromStock("gtk-save-as",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(save_as1,image327)
    val close1 = Gtk.imageMenuItemNewFromStock("gtk-close",Helpers.accelGroup)
    val separatormenuitem1 = Gtk.menuItemNew()
    val compilefile = Gtk.imageMenuItemNewWithMnemonic("Co_mpile")
    val _ = Gtk.tooltipsSetTip(Helpers.tooltips,compilefile,"Compile the current file to a component","")
    val _ = Gtk.widgetSetSensitive(compilefile,false)
    val _ = Gtk.widgetAddAccelerator(compilefile,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_K,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image328 = Gtk.imageNewFromStock("gtk-convert",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(compilefile,image328)
    val separator3 = Gtk.menuItemNew()
    val quit1 = Gtk.imageMenuItemNewFromStock("gtk-quit",Helpers.accelGroup)
    val _ = Helpers.containerAddList(menuitem7_menu,[new1,open1,save1,save_as1,close1,separatormenuitem1,compilefile,separator3,quit1])
    val _ = Gtk.menuItemSetSubmenu(menuitem7,menuitem7_menu)
    val menuitem8 = Gtk.menuItemNewWithMnemonic("_Edit")
    val menuitem8_menu = Gtk.menuNew()
    val undo = Gtk.imageMenuItemNewWithMnemonic("_Undo")
    val _ = Gtk.widgetAddAccelerator(undo,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Z,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image329 = Gtk.imageNewFromStock("gtk-undo",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(undo,image329)
    val cut1 = Gtk.imageMenuItemNewFromStock("gtk-cut",Helpers.accelGroup)
    val copy1 = Gtk.imageMenuItemNewFromStock("gtk-copy",Helpers.accelGroup)
    val paste1 = Gtk.imageMenuItemNewFromStock("gtk-paste",Helpers.accelGroup)
    val delete1 = Gtk.imageMenuItemNewFromStock("gtk-delete",Helpers.accelGroup)
    val separator9 = Gtk.menuItemNew()
    val indent_region = Gtk.imageMenuItemNewWithMnemonic("_Indent Region")
    val _ = Gtk.widgetAddAccelerator(indent_region,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_greater,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image330 = Gtk.imageNewFromStock("gtk-goto-last",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(indent_region,image330)
    val outdent_region = Gtk.imageMenuItemNewWithMnemonic("_Outdent Region")
    val _ = Gtk.widgetAddAccelerator(outdent_region,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_less,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image331 = Gtk.imageNewFromStock("gtk-goto-first",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(outdent_region,image331)
    val separator6 = Gtk.menuItemNew()
    val find = Gtk.imageMenuItemNewWithMnemonic("_Find...")
    val _ = Gtk.widgetAddAccelerator(find,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_F,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image332 = Gtk.imageNewFromStock("gtk-find",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(find,image332)
    val find_again = Gtk.imageMenuItemNewWithMnemonic("Find A_gain")
    val _ = Gtk.widgetAddAccelerator(find_again,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_G,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image333 = Gtk.imageNewFromStock("gtk-find",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(find_again,image333)
    val replace = Gtk.imageMenuItemNewWithMnemonic("_Replace...")
    val _ = Gtk.widgetAddAccelerator(replace,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_R,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image334 = Gtk.imageNewFromStock("gtk-find-and-replace",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(replace,image334)
    val separator5 = Gtk.menuItemNew()
    val go_to_line = Gtk.imageMenuItemNewWithMnemonic("Go to _Line...")
    val _ = Gtk.widgetAddAccelerator(go_to_line,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_L,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image335 = Gtk.imageNewFromStock("gtk-jump-to",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(go_to_line,image335)
    val jump_to_last_error = Gtk.imageMenuItemNewWithMnemonic("Jump to _Error")
    val _ = Gtk.widgetAddAccelerator(jump_to_last_error,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_E,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image336 = Gtk.imageNewFromStock("gtk-dialog-warning",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(jump_to_last_error,image336)
    val separator14 = Gtk.menuItemNew()
    val preferencesM = Gtk.imageMenuItemNewWithMnemonic("_Preferences...")
    val image337 = Gtk.imageNewFromStock("gtk-preferences",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(preferencesM,image337)
    val _ = Helpers.containerAddList(menuitem8_menu,[undo,cut1,copy1,paste1,delete1,separator9,indent_region,outdent_region,separator6,find,find_again,replace,separator5,go_to_line,jump_to_last_error,separator14,preferencesM])
    val _ = Gtk.menuItemSetSubmenu(menuitem8,menuitem8_menu)
    val feed1 = Gtk.menuItemNewWithMnemonic("Eval")
    val feed1_menu = Gtk.menuNew()
    val feedregion = Gtk.imageMenuItemNewWithMnemonic("Feed _Region")
    val _ = Gtk.widgetAddAccelerator(feedregion,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Return,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image338 = Gtk.imageNewFromStock("gtk-execute",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(feedregion,image338)
    val feedfile = Gtk.imageMenuItemNewWithMnemonic("Feed _File")
    val image339 = Gtk.imageNewFromStock("gtk-execute",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(feedfile,image339)
    val separator4 = Gtk.menuItemNew()
    val interrupt = Gtk.imageMenuItemNewWithMnemonic("_Interrupt")
    val _ = Gtk.tooltipsSetTip(Helpers.tooltips,interrupt,"Interrupt current evaluation","")
    val _ = Gtk.widgetAddAccelerator(interrupt,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_I,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image340 = Gtk.imageNewFromStock("gtk-stop",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(interrupt,image340)
    val background = Gtk.imageMenuItemNewWithMnemonic("_Background")
    val _ = Gtk.tooltipsSetTip(Helpers.tooltips,background,"Send current evaluation to background, spawning a new thread","")
    val _ = Gtk.widgetAddAccelerator(background,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_B,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image341 = Gtk.imageNewFromStock("gtk-goto-bottom",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(background,image341)
    val separator11 = Gtk.menuItemNew()
    val reset = Gtk.imageMenuItemNewWithMnemonic("Re_set Environment")
    val image342 = Gtk.imageNewFromStock("gtk-clear",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(reset,image342)
    val separator10 = Gtk.menuItemNew()
    val back_in_history = Gtk.imageMenuItemNewWithMnemonic("B_ack in History")
    val _ = Gtk.widgetAddAccelerator(back_in_history,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Up,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image343 = Gtk.imageNewFromStock("gtk-go-up",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(back_in_history,image343)
    val forward_in_history = Gtk.imageMenuItemNewWithMnemonic("For_ward in History")
    val _ = Gtk.widgetAddAccelerator(forward_in_history,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_Down,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val image344 = Gtk.imageNewFromStock("gtk-go-down",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(forward_in_history,image344)
    val _ = Helpers.containerAddList(feed1_menu,[feedregion,feedfile,separator4,interrupt,background,separator11,reset,separator10,back_in_history,forward_in_history])
    val _ = Gtk.menuItemSetSubmenu(feed1,feed1_menu)
    val view1 = Gtk.menuItemNewWithMnemonic("View")
    val view1_menu = Gtk.menuNew()
    val switch_to_editor = Gtk.menuItemNewWithMnemonic("Switch to _Editor")
    val _ = Gtk.widgetSetSensitive(switch_to_editor,false)
    val _ = Gtk.widgetAddAccelerator(switch_to_editor,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_1,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val switch_to_compiler = Gtk.menuItemNewWithMnemonic("Switch to _Compiler")
    val _ = Gtk.widgetAddAccelerator(switch_to_compiler,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_2,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val switch_to_io = Gtk.menuItemNewWithMnemonic("Switch to I/_O")
    val _ = Gtk.widgetAddAccelerator(switch_to_io,"activate",Helpers.accelGroup,Key.keyvalToInt Key.K_3,(Gdk.GdkModifierTypeToInt Gdk.CONTROL_MASK),Gtk.GtkAccelFlagsToInt Gtk.ACCEL_VISIBLE)
    val separator13 = Gtk.menuItemNew()
    val syntax_colouring = Gtk.checkMenuItemNewWithMnemonic("_Syntax Colouring")
    val _ = Gtk.checkMenuItemSetActive(syntax_colouring,false)
    val _ = Helpers.containerAddList(view1_menu,[switch_to_editor,switch_to_compiler,switch_to_io,separator13,syntax_colouring])
    val _ = Gtk.menuItemSetSubmenu(view1,view1_menu)
    val separator1 = Gtk.menuItemNew()
    val menuitem10 = Gtk.menuItemNewWithMnemonic("_Help")
    val menuitem10_menu = Gtk.menuNew()
    val about1 = Gtk.imageMenuItemNewWithMnemonic("_About...")
    val image345 = Gtk.imageNewFromStock("gtk-dialog-info",Gtk.IntToGtkIconSize(1))
    val _ = Gtk.imageMenuItemSetImage(about1,image345)
    val _ = Gtk.containerAdd(menuitem10_menu,about1)
    val _ = Gtk.menuItemSetSubmenu(menuitem10,menuitem10_menu)
    val _ = Helpers.containerAddList(menubar1,[menuitem7,menuitem8,feed1,view1,separator1,menuitem10])
    val vpaned1 = Gtk.vpanedNew()
    val _ = Gtk.panedSetPosition(vpaned1,1)
    val vbox3 = Gtk.vboxNew(false,0)
    val notebook1 = Gtk.notebookNew()
    val _ = Gtk.notebookSetScrollable(notebook1,true)
    val _ = Gtk.notebookPopupEnable(notebook1)
    val statusbar1 = Gtk.statusbarNew()
    val _ = Gtk.statusbarSetHasResizeGrip(statusbar1,false)
    val _ = Gtk.boxPackStart(vbox3,notebook1,true,true,0)
    val _ = Gtk.boxPackStart(vbox3,statusbar1,false,false,0)
    val vpaned2 = Gtk.vpanedNew()
    val _ = Gtk.panedSetPosition(vpaned2,600)
    val scrolledwindow3_xa = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow3_ya = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow3 = Gtk.scrolledWindowNew(scrolledwindow3_xa,scrolledwindow3_ya)
    val _ = Gtk.scrolledWindowSetShadowType(scrolledwindow3,Gtk.SHADOW_NONE)
    val compilerout = Gtk.textViewNew()
    val _ = Gtk.widgetSetSizeRequest(compilerout,0,18)
    val _ = Gtk.textBufferSetText(Gtk.textViewGetBuffer compilerout,"",~1)
    val _ = Gtk.textViewSetIndent(compilerout,0)
    val _ = Gtk.textViewSetRightMargin(compilerout,0)
    val _ = Gtk.textViewSetLeftMargin(compilerout,0)
    val _ = Gtk.textViewSetPixelsInsideWrap(compilerout,0)
    val _ = Gtk.textViewSetPixelsBelowLines(compilerout,0)
    val _ = Gtk.textViewSetPixelsAboveLines(compilerout,0)
    val _ = Gtk.textViewSetCursorVisible(compilerout,true)
    val _ = Gtk.textViewSetWrapMode(compilerout,Gtk.WRAP_NONE)
    val _ = Gtk.textViewSetJustification(compilerout,Gtk.JUSTIFY_LEFT)
    val _ = Gtk.textViewSetEditable(compilerout,true)
    val _ = Gtk.containerAdd(scrolledwindow3,compilerout)
    val scrolledwindow4_xa = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow4_ya = Gtk.adjustmentNew(0.0,0.0,0.0,1.0,0.0,0.0)
    val scrolledwindow4 = Gtk.scrolledWindowNew(scrolledwindow4_xa,scrolledwindow4_ya)
    val _ = Gtk.scrolledWindowSetShadowType(scrolledwindow4,Gtk.SHADOW_NONE)
    val progout = Gtk.textViewNew()
    val _ = Gtk.widgetSetSizeRequest(progout,0,130)
    val _ = Gtk.textBufferSetText(Gtk.textViewGetBuffer progout,"",~1)
    val _ = Gtk.textViewSetIndent(progout,0)
    val _ = Gtk.textViewSetRightMargin(progout,0)
    val _ = Gtk.textViewSetLeftMargin(progout,0)
    val _ = Gtk.textViewSetPixelsInsideWrap(progout,0)
    val _ = Gtk.textViewSetPixelsBelowLines(progout,0)
    val _ = Gtk.textViewSetPixelsAboveLines(progout,0)
    val _ = Gtk.textViewSetCursorVisible(progout,true)
    val _ = Gtk.textViewSetWrapMode(progout,Gtk.WRAP_NONE)
    val _ = Gtk.textViewSetJustification(progout,Gtk.JUSTIFY_LEFT)
    val _ = Gtk.textViewSetEditable(progout,true)
    val _ = Gtk.containerAdd(scrolledwindow4,progout)
    val _ = Gtk.panedPack1(vpaned2,scrolledwindow3,false,true)
    val _ = Gtk.panedPack2(vpaned2,scrolledwindow4,true,true)
    val _ = Gtk.panedPack1(vpaned1,vbox3,false,true)
    val _ = Gtk.panedPack2(vpaned1,vpaned2,true,true)
    val statusbar = Gtk.statusbarNew()
    val _ = Gtk.boxPackStart(vbox1,menubar1,false,false,0)
    val _ = Gtk.boxPackStart(vbox1,vpaned1,true,true,0)
    val _ = Gtk.boxPackStart(vbox1,statusbar,false,false,0)
    val _ = Gtk.containerAdd(mainwidget,vbox1)
    val preferences = Gtk.windowNew(Gtk.WINDOW_TOPLEVEL)
    val _ = Gtk.windowSetTitle(preferences,"Preferences")
    val _ = Gtk.windowAddAccelGroup(preferences,Helpers.accelGroup)
    val vbox4 = Gtk.vboxNew(false,10)
    val _ = Gtk.containerSetBorderWidth(vbox4,15)
    val notebook2 = Gtk.notebookNew()
    val vbox5 = Gtk.vboxNew(false,10)
    val _ = Gtk.containerSetBorderWidth(vbox5,15)
    val frame1 = Gtk.frameNew("")
    val _ = Gtk.frameSetShadowType(frame1,Gtk.SHADOW_ETCHED_IN)
    val hbox2 = Gtk.hboxNew(false,10)
    val _ = Gtk.containerSetBorderWidth(hbox2,5)
    val label7 = Gtk.labelNew("Font name:")
    val font_button = Gtk.buttonNewWithMnemonic("button5")
    val _ = Gtk.boxPackStart(hbox2,label7,false,false,0)
    val _ = Gtk.boxPackStart(hbox2,font_button,true,true,0)
    val label5 = Gtk.labelNew("Font")
    val _ = Gtk.containerAdd(frame1,hbox2)
    val _ = Gtk.frameSetLabelWidget(frame1,label5)
    val frame2 = Gtk.frameNew("")
    val _ = Gtk.frameSetShadowType(frame2,Gtk.SHADOW_ETCHED_IN)
    val table1 = Gtk.tableNew(5,2,false)
    val _ = Gtk.containerSetBorderWidth(table1,5)
    val _ = Gtk.tableSetRowSpacings(table1,0)
    val _ = Gtk.tableSetColSpacings(table1,10)
    val label8 = Gtk.labelNew("Plain:")
    val _ = Gtk.miscSetAlignment(label8,0.0,0.5)
    val label9 = Gtk.labelNew("Error:")
    val _ = Gtk.miscSetAlignment(label9,0.0,0.5)
    val label10 = Gtk.labelNew("Keyword:")
    val _ = Gtk.miscSetAlignment(label10,0.0,0.5)
    val label11 = Gtk.labelNew("String:")
    val _ = Gtk.miscSetAlignment(label11,0.0,0.5)
    val label12 = Gtk.labelNew("Comment:")
    val _ = Gtk.miscSetAlignment(label12,0.0,0.5)
    val _ = Gtk.tableAttach(table1,label8,0,1,0,1,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table1,label9,0,1,1,2,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table1,label10,0,1,2,3,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table1,label11,0,1,3,4,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table1,label12,0,1,4,5,Gtk.FILL,Gtk.FILL,0,0)
    val label6 = Gtk.labelNew("Colours")
    val _ = Gtk.containerAdd(frame2,table1)
    val _ = Gtk.frameSetLabelWidget(frame2,label6)
    val _ = Gtk.boxPackStart(vbox5,frame1,true,true,0)
    val _ = Gtk.boxPackStart(vbox5,frame2,true,true,0)
    val label3 = Gtk.labelNew("Fonts")
    val table2 = Gtk.tableNew(2,2,false)
    val _ = Gtk.containerSetBorderWidth(table2,10)
    val _ = Gtk.tableSetRowSpacings(table2,10)
    val _ = Gtk.tableSetColSpacings(table2,10)
    val label14 = Gtk.labelNew("Size of saved history:")
    val _ = Gtk.miscSetAlignment(label14,0.0,0.5)
    val history_size_entry = Gtk.entryNew()
    val label15 = Gtk.labelNew("")
    val _ = Gtk.miscSetAlignment(label15,0.0,0.5)
    val clear_history_button = Gtk.buttonNewWithMnemonic("Clear history")
    val _ = Gtk.tableAttach(table2,label14,0,1,0,1,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table2,history_size_entry,1,2,0,1,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table2,label15,0,1,1,2,Gtk.FILL,Gtk.FILL,0,0)
    val _ = Gtk.tableAttach(table2,clear_history_button,1,2,1,2,Gtk.FILL,Gtk.FILL,0,0)
    val label4 = Gtk.labelNew("History")
    val _ = Gtk.containerAdd(notebook2,vbox5)
    val _ = Gtk.notebookSetTabLabel(notebook2,Gtk.notebookGetNthPage(notebook2,0),label3)
    val _ = Gtk.containerAdd(notebook2,table2)
    val _ = Gtk.notebookSetTabLabel(notebook2,Gtk.notebookGetNthPage(notebook2,1),label4)
    val hbox1 = Gtk.hboxNew(true,0)
    val pref_cancel_button = Gtk.buttonNewFromStock("gtk-cancel")
    val pref_revert_button = Gtk.buttonNewFromStock("gtk-revert-to-saved")
    val pref_save_button = Gtk.buttonNewFromStock("gtk-save")
    val pref_ok_button = Gtk.buttonNewFromStock("gtk-ok")
    val _ = Gtk.boxPackStart(hbox1,pref_cancel_button,false,false,0)
    val _ = Gtk.boxPackStart(hbox1,pref_revert_button,false,false,0)
    val _ = Gtk.boxPackStart(hbox1,pref_save_button,false,false,0)
    val _ = Gtk.boxPackStart(hbox1,pref_ok_button,false,false,0)
    val _ = Gtk.boxPackStart(vbox4,notebook2,true,true,0)
    val _ = Gtk.boxPackStart(vbox4,hbox1,true,true,0)
    val _ = Gtk.containerAdd(preferences,vbox4)
  end

(* Created by alice-glade *)
