import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Core from "x-alice:/lib/gtk/Core"
import structure Highlight from "Highlight"

structure BufferHighlight =
   struct
      fun colorRegion buf offset (style, r,c,r',c') =
          let
              open Highlight
              val startiter = Gtk.textIterNew()
              val _ = Gtk.textBufferGetStartIter(buf,startiter)
              val _ = Gtk.textIterSetLine(startiter, r-1+offset)
              val _ = Gtk.textIterSetLineOffset(startiter, c)
              val enditer = Gtk.textIterNew()
              val _ = Gtk.textBufferGetStartIter(buf,enditer)
              val _ = Gtk.textIterSetLine(enditer, r'-1+offset)
              val _ = Gtk.textIterSetLineOffset(enditer, c')
              val tag = case style of
                            PLAIN => "plain"
                          | RESERVED => "reserved"
                          | STRING => "string"
                          | COMMENT => "comment"
                          | ERRONEOUS => "error"
          in
              Gtk.textBufferApplyTagByName(buf, tag,
                                           startiter, enditer)
          end

      fun breakLines str =
          Substring.fields (fn #"\n" => true | _ => false)
                           (Substring.full str)
                           
      fun highlight (buf, startiter, enditer) =
          if Gtk.textIterGetChar startiter = ord #"#" then ()
          else
              let
                  val offset = Gtk.textIterGetLine startiter
                  val str = Gtk.textBufferGetText(buf, startiter, enditer, false)
                  val str = Core.utf8ToLatin1 str
                  val lines = breakLines str
                  val regions = Highlight.scan lines
              in
                app (colorRegion buf offset) regions
              end
   end