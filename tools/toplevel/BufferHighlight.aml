(*
 * Authors:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2005
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Core from "x-alice:/lib/gtk/Core"
import structure Highlight from "HighlightString"

structure BufferHighlight =
   struct
      fun colorRegion (buf, offset, removeTags) (style, x, x') =
          let
              open Highlight
              val startiter = Gtk.textIterNew()
              val _ = Gtk.textBufferGetStartIter(buf,startiter)
              val _ = Gtk.textIterSetOffset(startiter, offset)
              val _ = Gtk.textIterForwardChars(startiter, x)
              val enditer = Gtk.textIterNew()
              val _ = Gtk.textBufferGetStartIter(buf,enditer)
              val _ = Gtk.textIterSetLine(enditer, offset)
              val _ = Gtk.textIterForwardChars(enditer, x')
              val tag = case style of
                            PLAIN => "plain"
                          | RESERVED => "reserved"
                          | STRING => "string"
                          | COMMENT => "comment"
                          | ERRONEOUS => "error"
          in
	      if removeTags then
		  Gtk.textBufferRemoveAllTags(buf, startiter, enditer)
	      else ();
              Gtk.textBufferApplyTagByName(buf, tag, startiter, enditer)
          end

      fun highlight (buf, startiter, enditer, removeTags) =
          if Gtk.textIterGetChar startiter = ord #"#" then
              Gtk.textBufferApplyTagByName(buf, "comment", startiter, enditer)
          else
              let
                  val offset = Gtk.textIterGetOffset startiter
                  val str = Gtk.textBufferGetText(buf, startiter, enditer, false)
                  val str = Core.utf8ToLatin1 str
                  val regions = Highlight.scan str
              in
                app (colorRegion (buf, offset, removeTags)) regions
              end
   end
