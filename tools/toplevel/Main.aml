(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2005
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Config   from "x-alice:/lib/system/Config"
import structure Signal   from "x-alice:/lib/system/Signal"
import structure Toplevel from "x-alice:/lib/tools/Toplevel"

structure Main : any =
struct
    (* Texts *)

    fun usage fail = TextIO.output (if fail
                                    then TextIO.stdErr
				    else TextIO.stdOut,
                                    "Usage: alice [options]\n\
				    \\n\
				    \Options:\n\
				    \\t--help, -h, -?\n\
				    \\t\tShow this help.\n\
				    \\t--version\n\
				    \\t\tShow version only.\n")

    val major      = Int.toString (#major Config.version)
    val minor      = Int.toString (#minor Config.version)
    val revision   = Int.toString (#revision Config.version)

    val version    = major ^ "." ^ minor ^
	             (if revision = "0" then "" else "." ^ revision)
    val banner     = "Alice " ^ version ^ " (\"" ^ Config.codename ^
		     "\"), mastered " ^
		     Date.fmt "%Y/%m/%d" Config.buildDate ^ "\n"
    val bye        = "That's all, said Humpty Dumpty. Good-bye.\n"

    val prompt     = "- "
    val contPrompt = "  "


    (* Signal handling *)

    (* Global handler to avoid space leak (we cannot remove them) *)
    val interrupt = ref NONE : Toplevel.signal Promise.promise option ref

    fun translateSignal Signal.SIGINT  = Toplevel.INTERRUPT
      | translateSignal Signal.SIGSTOP = Toplevel.STOP
      | translateSignal _              = raise Domain

    fun handler s =
	case Ref.exchange (interrupt, NONE) of
	    NONE => ()
	  | SOME p =>
		(Promise.fulfill (p, translateSignal s)
		 handle (Promise.Promise | Domain) => ();
		 Signal.register (s, handler))
            (* Signal handlers are currently auto-removed after triggering *)
    val _ = Signal.register (Signal.SIGINT, handler)
    val _ = Signal.register (Signal.SIGSTOP, handler)


    (* Input *)

    fun readInput () =
	case readInput' prompt of [] => NONE
				| ss => SOME(String.concat ss)

    and readInput' prompt =
	(TextIO.print prompt;
	 case TextIO.inputLine TextIO.stdIn
	  of NONE      => []
	   | SOME "\n" => "\n" :: readInput' contPrompt
	   | SOME line => if String.sub (line, String.size line - 2) = #";"
			  then [line]
			  else line :: readInput' contPrompt
	)

    fun loop () =
	case readInput ()
	 of NONE        => TextIO.print ("\n" ^ bye)
	  | SOME source =>
	    let
		val p = Promise.promise ()
	    in
		interrupt := SOME p;
		Toplevel.eval (source, Promise.future p);
		interrupt := NONE;
		loop ()
	    end

    (* Main *)

    fun main (("--help"|"-h"|"-?")::_) = (usage false; OS.Process.success)
      | main ("--version"::_) =
	(TextIO.output (TextIO.stdOut, banner); OS.Process.success)
      | main (_::_) = (usage true; OS.Process.failure)
      | main nil =
	(
	    TextIO.print banner;
	    await Toplevel.eval;
	    loop ();
	    OS.Process.success
	)

    val _ = OS.Process.exit (main (CommandLine.arguments ()))
end
