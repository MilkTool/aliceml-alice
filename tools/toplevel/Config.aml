(*
 * Authors:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2005
 *
 * Last Change:
 *   $Date$ by $Author$
 *   $Revision$
 *
 *)

import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"
import structure PangoEnums from "x-alice:/lib/gtk/PangoEnums"
import structure FileDialog from "FileDialog"

signature USER_CONFIG =
   sig
      val reservedColor : (int * int * int)
      val errorColor : (int * int * int)
      val stringColor : (int * int * int)
      val plainColor : (int * int * int)
      val commentColor : (int * int * int)
      val historySize : int
      val stdFontName : string
   end

structure Config =
   struct

      fun createConfigDir () =
	  let
	      val cDir = OS.FileSys.getApplicationConfigDir "Toplevel"
	      val cApp = OS.Path.getParent cDir
	      val cAppDir = (OS.FileSys.openDir cApp; false)
		  handle OS.SysErr _ => true
	  in
	      if cAppDir then
		  (OS.FileSys.mkDir cApp;
		   OS.FileSys.mkDir cDir)
	      else
		  let
		      val cDirDir = (OS.FileSys.openDir cDir; false)
			  handle OS.SysErr _ => true
		  in
		      if cDirDir then
			  OS.FileSys.mkDir cDir
		      else ()
		  end;
	      cDir
	  end

      val editorHeight = 500

      val sizeX = 750
      val sizeY = 800

      val historySize = ref 100

      val cmap   = Gdk.colormapGetSystem ()
      val ugly = Gdk.colorNew(0xf0f0, 0x2020, 0xa0a0)
      val black = Gdk.colorNew(0, 0, 0)
      val red = Gdk.colorNew(0xffff, 0, 0)
      val orange = Gdk.colorNew(0xffff, 0x8000, 0)
      val blue = Gdk.colorNew(0, 0, 0xe000)
      val green = Gdk.colorNew(0, 0x8000, 0)
      val white = Gdk.colorNew(0xffff, 0xffff, 0xffff)

      val reservedColor = blue
      val errorColor = red
      val stringColor = orange
      val plainColor = black
      val commentColor = green

      val _ = Gdk.colormapAllocColor(cmap, black, false, true)
      val _ = Gdk.colormapAllocColor(cmap, white, false, true)
      val _ = Gdk.colormapAllocColor(cmap, ugly, false, true)
      val _ = Gdk.colormapAllocColor(cmap, red, false, true)
      val _ = Gdk.colormapAllocColor(cmap, orange, false, true)
      val _ = Gdk.colormapAllocColor(cmap, green, false, true)
      val _ = Gdk.colormapAllocColor(cmap, blue, false, true)

      val stdFontName = ref "Courier 11"
      val stdFont = ref (Gtk.pangoFontDescriptionFromString (!stdFontName))

      type tags = {err : Gtk.object,
                   log : Gtk.object,
                   plain : Gtk.object,
                   comment : Gtk.object,
                   string : Gtk.object,
                   reserved : Gtk.object,
		   bold : Gtk.object,
                   noedit : Gtk.object}

      fun makeTags buf =
          let
              val err = Gtk.textBufferCreateTag(buf, "error", "foreground-gdk", Gtk.OBJECT errorColor)
              val log = Gtk.textBufferCreateTag(buf, "log", "style", Gtk.INT (PangoEnums.PangoStyleToInt PangoEnums.STYLE_ITALIC))
              val plain = Gtk.textBufferCreateTag(buf, "plain", "foreground-gdk", Gtk.OBJECT plainColor)

              val comment = Gtk.textBufferCreateTag(buf, "comment", "foreground-gdk", Gtk.OBJECT commentColor)
              val string = Gtk.textBufferCreateTag(buf, "string", "foreground-gdk", Gtk.OBJECT stringColor)
              val reserved = Gtk.textBufferCreateTag(buf, "reserved", "foreground-gdk", Gtk.OBJECT reservedColor)

              val noedit = Gtk.textBufferCreateTag(buf, "noedit", "editable", Gtk.BOOL false)
              val bold = Gtk.textBufferCreateTag(buf, "bold", "weight", Gtk.INT (PangoEnums.PangoWeightToInt PangoEnums.WEIGHT_BOLD))
          in
              {err, log, plain, comment, string, reserved, bold, noedit} : tags
          end

      fun init() =
	  let
	      val cDir = OS.FileSys.getApplicationConfigDir "Toplevel"
	      val p = Pickle.load (cDir^"/Configuration."^Pickle.extension)
	      structure C = unpack p : USER_CONFIG
	  in
	      stdFontName := C.stdFontName;
	      stdFont := Gtk.pangoFontDescriptionFromString (!stdFontName);
	      historySize := C.historySize
	  end handle (OS.SysErr _ | IO.Io _ | Component.Mismatch _) =>
	      FileDialog.message
	      "Could not open configuration data. Proceeding with defaults."

      fun save() =
	  let
	      val cDir = createConfigDir ()
	      structure C = struct
				val reservedColor = (0,0,0)
				val errorColor = (0,0,0)
				val stringColor = (0,0,0)
				val plainColor = (0,0,0)
				val commentColor = (0,0,0)
				val historySize = !historySize
				val stdFontName = !stdFontName
			    end
	  in
	      Pickle.save(cDir^"/Configuration."^Pickle.extension,
			  pack C : USER_CONFIG)
	  end handle (OS.SysErr _ | IO.Io _) =>
	      FileDialog.message
	      "Could not save configuration data."

     (* History management *)
      type history = {prev : string list, current : string,
		      next : string list}

      fun loadHistory() =
	  let
	      type history = {prev : string list, current : string,
			      next : string list}
	      val cDir = OS.FileSys.getApplicationConfigDir "Toplevel"
	      val p = Pickle.load (cDir^"/History."^Pickle.extension)
	      structure C = unpack p : (val history : history)
	  in
	      C.history
	  end handle IO.Io _ => {prev=[], current="",next=[]}

      fun saveHistory {prev,current,next} =
	  let
	      val cDir = createConfigDir ()
	      val prev = if current="" then current::prev else prev
	      val prev = rev (prev@next)
	      val prev =
		  if List.length prev <= !historySize then prev
		  else rev (List.take (prev, !historySize))
	      val history = {prev=prev,
			     current="",
			     next=[]}
	      structure C = struct
				val history = history
			    end
	  in
	      Pickle.save(cDir^"/History."^Pickle.extension,
			  pack C : (val history : history))
	  end

   end
