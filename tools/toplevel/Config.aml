import structure Gtk from "x-alice:/lib/gtk/Gtk"
import structure Gdk from "x-alice:/lib/gtk/Gdk"
import structure PangoEnums from "x-alice:/lib/gtk/PangoEnums"

structure Config =
   struct
      val cmap   = Gdk.colormapGetSystem ()
      val ugly = Gdk.colorNew(0xf0f0, 0x2020, 0xa0a0)
      val black = Gdk.colorNew(0, 0, 0)
      val red = Gdk.colorNew(0xffff, 0, 0)
      val orange = Gdk.colorNew(0xffff, 0x8000, 0)
      val blue = Gdk.colorNew(0, 0, 0xe000)
      val green = Gdk.colorNew(0, 0x8000, 0)
      val white = Gdk.colorNew(0xffff, 0xffff, 0xffff)

      val reservedColor = blue
      val errorColor = red
      val stringColor = orange
      val plainColor = black
      val commentColor = green

      val _ = Gdk.colormapAllocColor(cmap, black, false, true)
      val _ = Gdk.colormapAllocColor(cmap, white, false, true)
      val _ = Gdk.colormapAllocColor(cmap, ugly, false, true)
      val _ = Gdk.colormapAllocColor(cmap, red, false, true)
      val _ = Gdk.colormapAllocColor(cmap, orange, false, true)
      val _ = Gdk.colormapAllocColor(cmap, green, false, true)
      val _ = Gdk.colormapAllocColor(cmap, blue, false, true)
      val stdFont = Gtk.pangoFontDescriptionFromString "Courier"   

      type tags = {err : Gtk.object,
                   log : Gtk.object,
                   plain : Gtk.object,
                   comment : Gtk.object,
                   string : Gtk.object,
                   reserved : Gtk.object,
                   noedit : Gtk.object}

      fun makeTags buf =
          let
              val err = Gtk.textBufferCreateTag(buf, "error", "foreground-gdk", Gtk.OBJECT errorColor)
              val log = Gtk.textBufferCreateTag(buf, "log", "style", Gtk.INT (PangoEnums.PangoStyleToInt PangoEnums.STYLE_ITALIC))
              val plain = Gtk.textBufferCreateTag(buf, "plain", "foreground-gdk", Gtk.OBJECT plainColor)

              val comment = Gtk.textBufferCreateTag(buf, "comment", "foreground-gdk", Gtk.OBJECT commentColor)
              val string = Gtk.textBufferCreateTag(buf, "string", "foreground-gdk", Gtk.OBJECT stringColor)
              val reserved = Gtk.textBufferCreateTag(buf, "reserved", "foreground-gdk", Gtk.OBJECT reservedColor)

              val noedit = Gtk.textBufferCreateTag(buf, "noedit", "editable", Gtk.BOOL false)
          in
              {err=err,log=log,plain=plain,
               comment=comment,string=string,reserved=reserved,
               noedit=noedit} : tags
          end
   end
