(*
 * Authors:
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Andreas Rossberg, 2005
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Compiler     from "x-alice:/lib/system/Compiler"
import structure CoreToplevel from "CoreToplevel"
import signature EVALUATOR    from "EVALUATOR-sig"

structure Evaluator : EVALUATOR =
struct
    open CoreToplevel

    fun setOutWidth n   = outWidth := n
    fun setErrWidth n   = errWidth := n
    fun setTraceWidth n = traceWidth := n
    fun setOutStream os = TextIO.setOutstream (outStream, os)
    fun setErrStream os = TextIO.setOutstream (errStream, os)
    fun setTraceStream os = TextIO.setOutstream (traceStream, os)

    fun prompt () =
	(TextIO.output (outStream, CoreToplevel.prompt);
	 TextIO.flushOut outStream)

    fun compile' file =
	Compiler.withStreams {out = SOME outStream, err = SOME errStream,
			      trace = SOME traceStream}
	(Compiler.withWidths {out = !outWidth, err = !errWidth,
			      trace = !traceWidth}
	 Compiler.compileFile) (file, NONE)

    fun compile file =
	((TextIO.output (outStream, "\n");
	  compile' file;
	  TextIO.output (outStream, "### compiled " ^ file ^ "\n"))
	 handle Compiler.Error => ())
	finally prompt ()

    fun init () =
	(
	    TextIO.output (outStream, CoreToplevel.banner);
	    CoreToplevel.init ();
	    prompt ()
	)

    fun reset () =
	(
	    TextIO.output (outStream, "\n");
	    CoreToplevel.init ();
	    prompt ()
	)

    fun eval s =
	CoreToplevel.eval s
	finally	prompt ()
end
