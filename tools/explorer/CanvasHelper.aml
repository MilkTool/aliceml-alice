(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Gtk       from "x-alice:/lib/gtk/Gtk"
import structure GnomeCanvas from "x-alice:/lib/gtk/GnomeCanvas"

import structure GtkNode from "GtkNodes"
import structure Types   from "Types"
import structure Defaults from "Defaults"
import structure EventHandler from "EventHandler"

structure CanvasHelper =
  struct

  fun createCanvas state serve xDim yDim =
      let
	  val canvas = GnomeCanvas.newAa()
	  val rootGroup = GtkNode.makeGroup (GnomeCanvas.root canvas)
	  val shadowGroup = GtkNode.makeGroup rootGroup
	  val actionGroup = GtkNode.makeGroup rootGroup
          val actionHandler = Gtk.signalConnect(actionGroup, "event",
			                        EventHandler.nodeEvent state serve);
      in
	   Gtk.widgetSetSizeRequest(canvas, xDim, yDim);
	   GnomeCanvas.setScrollRegion(canvas, 0.0, 0.0,
				       Real.fromInt xDim, Real.fromInt yDim);
	   GnomeCanvas.setPixelsPerUnit(canvas, 1.0);
	   GnomeCanvas.setBackgroundColor(canvas, GtkNode.white);
	   {canvas=canvas, rootGroup=ref rootGroup,
            shadowGroup=ref shadowGroup, actionGroup=ref actionGroup,
            actionHandler=ref actionHandler}
      end

  fun resetCanvas serve (s as
			   (ref (SOME {canvas={rootGroup=rootGroup,
				               actionGroup=actionGroup,
                                               actionHandler=actionHandler,
				               canvas=canvas,...},...}
				 : Types.explorer_state option)))=
      (Gtk.signalDisconnect(!actionGroup, !actionHandler);
       Gtk.objectDestroy (!rootGroup);
       rootGroup := GtkNode.makeGroup (GnomeCanvas.root canvas);
       actionGroup := GtkNode.makeGroup (!rootGroup);
       actionHandler := Gtk.signalConnect(!actionGroup, "event", EventHandler.nodeEvent s serve);
       ())
    | resetCanvas _ _ = ()

  fun scaleCanvasHandler serve
			 (ref (SOME({canvas={canvas=canvas,...},scale=scale,...}
				    : Types.explorer_state)))
			 scaleWidget _ =
      (serve (fn () =>
		 let
		     val x = Gtk.rangeGetValue scaleWidget
		 in
		     GnomeCanvas.setPixelsPerUnit(canvas, x);
		     scale := x / Defaults.floatScaleBase
		 end))
    | scaleCanvasHandler _ _ _ _ = ()
                                   
  end