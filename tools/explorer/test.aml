(*
 * Authors:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2004
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure FD        from "x-alice:/lib/gecode/FD"
import structure Explorer  from "x-alice:/tools/Explorer"

fun queens n cl space =
    let
	open FD

	val v = rangeVec(space, n, (0, n-1))
	val v1 = Vector.tabulate (n, fn n => (n, Vector.sub(v,n)))
	val v2 = Vector.tabulate (n, fn n => (~n, Vector.sub(v,n)))
    in
	distinctOffset(space, v1, cl);
	distinctOffset(space, v2, cl);
	distinct(space, v, cl);
	branch(space, v, B_SIZE_MIN, B_MIN);
	v
    end

fun money cl space = 
    let
	open FD

	val v as #[s,e,n,d,m,o',r,y] = rangeVec(space, 8, (0,9))

        val root = {s=s,e=e,n=n,d=d,m=m,o'=o',r=r,y=y}

	val v1 = #[(1000,   s),
		   (100,    e),
		   (10,     n),
		   (1,      d),

		   (1000,   m),
		   (100,    o'),
		   (10,     r),
		   (1,      e),

		   (~10000, m),
		   (~1000,  o'),
		   (~100,   n),
		   (~10,    e),
		   (~1,     y)]
    in
	relI(space, s, NQ, 0);
	relI(space, m, NQ, 0);
	linear(space, v1, EQ, 0, cl);
	distinct(space, v, cl);
	branch(space, v, B_SIZE_MIN, B_MIN);
        root
    end

val _ = Explorer.initScript (queens 32 FD.BND)
