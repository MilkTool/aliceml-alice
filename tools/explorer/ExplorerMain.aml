(*
 * Author:
 *   Guido Tack <tack@ps.uni-sb.de>
 *
 * Copyright:
 *   Guido Tack, 2003
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure ExplorerSearch  from "ExplorerSearch"
import structure MainWindow      from "MainWindow"
import structure Space           from "x-alice:/lib/gecode/Space"
import structure Type            from "x-alice:/lib/rtt/Type"
import structure ExplorerInspect from "ExplorerInspect"
import structure Types           from "Types"
import structure CanvasHelper    from "CanvasHelper"

signature EXPLORER =
  sig
      type explorer = Types.explorer_state option ref
      val serve : (unit -> unit) -> unit
      val initExplorer : unit -> explorer
      val initWithSpace : Space.space * string -> explorer
      val exploreAll : Space.space -> explorer
      val exploreOne : Space.space -> explorer
(*      val exploreBest : Space.space * better -> explorer*)
      val addInfoAction : explorer * (Space.space -> unit) * string -> unit
      val deleteInfoAction : explorer * string -> unit

      val initScript' : Type.typ -> (Space.space -> 'a) -> explorer
      val exploreAllScript' : Type.typ -> (Space.space -> 'a) -> explorer
      val exploreOneScript' : Type.typ -> (Space.space -> 'a) -> explorer
  end
structure ExplorerMain :> EXPLORER =
  struct

  type explorer = Types.explorer_state option ref
  
  fun newServer() = 
      let
	  val tail   = Promise.promise ()
	  val stream = Ref.ref tail
		       
	  fun process s = (case s of
			       nil   => ()
			     | p::pr => (p (); process pr))
	  fun send p =
	      let
		  val newtail = Promise.promise ()
		  val tail    = Ref.exchange(stream, newtail)
	      in
		  Promise.fulfill(tail, p::(Promise.future newtail))
	      end
      in
	  (spawn (process(Promise.future tail));
	   send)
      end

  val serve = newServer ()

  fun makeState () =
      MainWindow.createMainWindow serve
      : Types.explorer_state option ref

  val defaultExplorer = ref NONE

  fun initExplorer () = case !defaultExplorer of
			    NONE =>
			    let
				val s = makeState()
			    in
				defaultExplorer := SOME s;
				s
			    end
			  | SOME s => s

  fun initWithSpace (s, name) =
      let
	  val state = initExplorer()
      in
          serve (fn () => MainWindow.setWindowTitle name) ;
          serve (fn () => ExplorerSearch.initSearch
                              (serve, state, MainWindow.refresh,
                               CanvasHelper.resetCanvas, s));
	  state
      end

  fun exploreAll s =
      let
	  val state = initExplorer()
      in
          serve (fn () => ExplorerSearch.initSearch
                              (serve, state, MainWindow.refresh,
                               CanvasHelper.resetCanvas, s));
	  serve (fn () => ExplorerSearch.search
                              (serve, state,
                               MainWindow.refresh, MainWindow.setStatusMsg,
                               0, NONE));
	  state
      end

  fun exploreOne s =
      let
	  val state = initExplorer()
      in
          serve (fn () => ExplorerSearch.initSearch
                              (serve, state, MainWindow.refresh,
                               CanvasHelper.resetCanvas, s));
	  serve (fn () => ExplorerSearch.search
                              (serve, state,
                               MainWindow.refresh, MainWindow.setStatusMsg,
                               1, NONE));
	  state
      end

  fun exploreBest (s,b) =
      let
	  val state = initExplorer()
      in
          serve (fn () => ExplorerSearch.initSearch
                              (serve, state, MainWindow.refresh,
                               CanvasHelper.resetCanvas, s));
	  serve (fn () => ExplorerSearch.searchBest
                              (serve, state, MainWindow.refresh));
	  state
      end

  fun addInfoAction (e, action, name) =
      case (!e) of
	  SOME {inspect=inspect,
                curInspAction=curInspAction,...} =>
	  (inspect := List.filter (fn (_,n) => n<>name) (!inspect);
           inspect := (action, name)::(!inspect);
           curInspAction := name;
	   serve (fn () =>
		     MainWindow.updateInspectionActionsMenu
                         (!inspect, serve, e)))
	| _ => ()

  fun deleteInfoAction (e, name) =
      case (!e) of
	  SOME ({inspect=inspect,...} : Types.explorer_state) =>
	  (inspect := List.filter (fn (_,n) => n<>name) (!inspect);
	   serve (fn () =>
		     MainWindow.updateInspectionActionsMenu
                         (!inspect, serve, e)))
	| _ => ()

  fun initScript' t script =
      let
          val space = Space.new()
          val root = script space
          val e = initWithSpace (space, "Explorer")
      in
          addInfoAction(e, ExplorerInspect.inspect t root, "default");
          e
      end

  fun exploreAllScript' t script =
      let
          val space = Space.new()
          val root = script space
          val e = exploreAll space
      in
          addInfoAction(e, ExplorerInspect.inspect t root, "default");
          e
      end

  fun exploreOneScript' t script =
      let
          val space = Space.new()
          val root = script space
          val e = exploreOne space
      in
          addInfoAction(e, ExplorerInspect.inspect t root, "default");
          e
      end

  end
