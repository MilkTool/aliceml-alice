import functor MkRedBlackSet from "x-alice:/lib/data/MkRedBlackSet"
import functor MkRedBlackMap from "x-alice:/lib/data/MkRedBlackMap"

structure BoolVector :> MONO_VECTOR where type elem = bool = 
    struct 
	open Vector
	type vector = bool vector
	type t = vector
	type elem = bool
	val contains = fn f => fn v => fn e => exists (fn x => f (e, x)) v
	val notContains = fn f => fn v => fn e => not (exists (fn x => f (e, x)) v)
    end

structure IntSet =
    MkRedBlackSet (type t = int val compare = Int.compare)
    
    
structure IntMap =
    MkRedBlackMap (type t = int val compare = Int.compare)
    
    
structure StringMap =
    MkRedBlackMap (type t = string val compare = String.compare)
    

structure SetMap =
    MkRedBlackMap (type t = IntSet.t val compare = IntSet.compare)
