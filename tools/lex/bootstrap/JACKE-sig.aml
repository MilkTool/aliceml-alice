import structure AbsSyn from "AbsSyn"

signature JACKE =
    sig


	(* type-declaration because Jacke accepts only one argument after 'of'
	 *) 
	type intint = int * int
	type stringintint = string * int * int
	type intintint = int * int * int
	type realintint = real * int * int

	datatype token
	    = REGEXP of intint
	  | LEXER of intint
	  | RCASE of intint
	  | OF of intint
	  | AND of intint
	  | MLKEY of stringintint
	  | EQ of intint
	  | LPAR of intint
	  | RPAR of intint
	  | TIMES of intint
	  | PLUS of intint
	  | QMARK of intint
	  | DRARROW of intint
	  | BAR of intint
	  | CARAT of intint
	  | LBRACK of intint
	  | RBRACK of intint
	  | COMMA of intint
	  | LBRACE of intint
	  | RBRACE of intint
	  | WILDCARD of intint
	  | MLOP of stringintint
	  | NUM of intintint
	  | REAL of realintint
	  | STRING of stringintint
	  | ID of stringintint
	  | MLTOK of stringintint
	  | EOF of intint


	val eval :  (unit -> token option * int * int) -> AbsSyn.lex list
    end
