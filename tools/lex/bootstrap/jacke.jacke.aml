   import   signature JACKE   from "JACKE-sig"   import   structure AbsSyn   from "AbsSyn"   import   structure BoolVector   from "container"   import   structure LrParserEng   from "../../yacc/bootstrap/LrParser"   structure Jacke :> JACKE = struct   open AbsSyn   fun parseError pos = raise Error( Int.toString pos )   fun pError( e , po ) = raise Error( "Parse Error in file " ^( ! errorFile ) ^ "\nin line(s) " ^ posToString po ^ ": " ^ e ^ "\n" )   fun makeVector c =( BoolVector.tabulate( 257 ,( fn x => Array.sub( c , x ) ) ) )   fun shrink( nil , xs , po ) = rev xs | shrink( #"\\" :: cs , xs , po ) = shrink( escape( cs , xs , po ) ) | shrink( c :: cs , xs , po ) = shrink( cs , c :: xs , po ) and escape( #"a" :: cs , xs , po ) =( cs , #"\007" :: xs , po ) | escape( #"b" :: cs , xs , po ) =( cs , #"\008" :: xs , po ) | escape( #"t" :: cs , xs , po ) =( cs , #"\009" :: xs , po ) | escape( #"n" :: cs , xs , po ) =( cs , #"\010" :: xs , po ) | escape( #"v" :: cs , xs , po ) =( cs , #"\011" :: xs , po ) | escape( #"f" :: cs , xs , po ) =( cs , #"\012" :: xs , po ) | escape( #"r" :: cs , xs , po ) =( cs , #"\013" :: xs , po ) | escape( #"\"" :: cs , xs , po ) =( cs , #"\"" :: xs , po ) | escape( #"\\" :: cs , xs , po ) =( cs , #"\\" :: xs , po ) | escape( #"^" :: cs , xs , po ) = escape2( cs , xs , po ) | escape( c :: cs , xs , po ) = if Char.isDigit c then escape3( c :: cs , xs , po ) else if Char.isSpace c then escape4( cs , xs , po ) else pError( "bad escape character \\" ^( Char.toString c ) , po ) | escape( _ , _ , po ) = pError( "bad escape character \\" , po ) and escape2( c :: cs , xs , po ) = let   val range = Char.ord c   in if range > 63 andalso range < 96 then( cs , Char.chr( range - 64 ) :: xs , po ) else pError( "bad escape character \\^" ^( Char.toString c ) , po )   end | escape2( _ , _ , po ) = pError( "bad escape character \\^" , po ) and escape3( a :: b :: c :: cs , xs , po ) = let   val zero = Char.ord #"0"   val a_ = Char.ord a - zero   val b_ = if Char.isDigit b then Char.ord b - zero else pError( "bad escape character \\" ^( implode [ a , b , c ] ) , po )   val c_ = if Char.isDigit c then Char.ord c - zero else pError( "bad escape character \\" ^( implode [ a , b , c ] ) , po )   val num = 100 * a_ + 10 * b_ + c_   in if num < 256 then( cs , Char.chr( num ) :: xs , po ) else pError( "bad escape character \\" ^( implode [ a , b , c ] ) , po )   end | escape3( cs , xs , po ) = pError( "bad escape character \\" ^ implode cs , po ) and escape4( #"\\" :: cs , xs , po ) =( cs , xs , po ) | escape4( c :: cs , xs , po ) = if Char.isSpace c then escape4( cs , xs , po ) else pError( "bad character in gap: " ^ Char.toString c , po ) | escape4( _ , _ , po ) = pError( "bad gap" , po )   fun wildcard( ) = let   val c = Array.array( 257 , true )   in Array.update( c , 256 , false ) ; makeVector c   end   fun oneChar( c , p ) = let   val arr = Array.array( 257 , false )   in( Array.update( arr , Char.ord c , true ) ; CHARS( makeVector arr , 0 , p ) )   end   fun stringToExp( s , po ) = let   val xs = shrink( explode( String.substring( s , 1 , String.size s - 2 ) ) , nil , po )   fun first nil =( nil , EPS ) | first( c :: cs ) =( cs , oneChar( c , po ) )   fun fold( nil , a ) = a | fold( c :: cs , a ) = fold( cs , CAT( a , oneChar( c , po ) , po ) )   in fold( first xs )   end   fun makeRep( r , n , m , p ) = let   val i = m - n   fun concat 0 = AbsSyn.EPS | concat 1 = r | concat y = AbsSyn.CAT( concat( y - 1 ) , r , p )   val t = concat n   fun alt( 0 , dat ) = dat | alt( 1 , AbsSyn.EPS ) = AbsSyn.ALT( AbsSyn.EPS , r , p ) | alt( x , dat ) = if x < 0 then pError( "bad repetition" , p ) else alt( x - 1 , AbsSyn.CAT( dat , AbsSyn.ALT( r , AbsSyn.EPS , p ) , p ) )   in alt( i , t )   end   fun makeArray( s , b , po ) = let   val nb = not b   val c = Array.array( 257 , b )   val cl = shrink( explode( String.substring( s , 1 , String.size s - 2 ) ) , nil , po )   fun insert( a ::( #"-" ) :: b :: ys , x ) =( insertSequence( a , b , nb , x ) ; insert( ys , x ) ) | insert( a :: ys , x ) =( Array.update( x , Char.ord a , nb ) ; insert( ys , x ) ) | insert( nil , x ) = x   in Array.update( c , 256 , false ) ; insert( cl , c )   end and insertSequence( a , b , t , x ) = let   val i = ref( Char.ord a )   val j = Char.ord b   in while ! i <= j do( Array.update( x , ! i , t ) ; i := ! i + 1 )   end   fun addEof [ ] ys = rev ys | addEof(( LRULE( reg , act , pos ) ) :: lrl ) ys = addEof lrl( LRULE( CAT( reg , REGID( "eof" ,( ~1 , ~1 ) ) , pos ) , act , pos ) :: ys )   type intint = int * int   type stringintint = string * int * int   type intintint = int * int * int   type realintint = real * int * int    (* ---hack: remove constructor bindings in scope *)
structure rmConstrStatus1081869087 = 
struct
fun TOKEN__675__ _ = 1
fun EOP1080658716 _ = 1
fun REGEXP _ = 1
fun LEXER _ = 1
fun RCASE _ = 1
fun OF _ = 1
fun AND _ = 1
fun MLKEY _ = 1
fun EQ _ = 1
fun LPAR _ = 1
fun RPAR _ = 1
fun TIMES _ = 1
fun PLUS _ = 1
fun QMARK _ = 1
fun DRARROW _ = 1
fun BAR _ = 1
fun CARAT _ = 1
fun LBRACK _ = 1
fun RBRACK _ = 1
fun COMMA _ = 1
fun LBRACE _ = 1
fun RBRACE _ = 1
fun WILDCARD _ = 1
fun MLOP _ = 1
fun NUM _ = 1
fun REAL _ = 1
fun STRING _ = 1
fun ID _ = 1
fun MLTOK _ = 1
fun EOF _ = 1
end
(* --- *)

  
datatype token = REGEXP of intint
               | LEXER of intint
               | RCASE of intint
               | OF of intint
               | AND of intint
               | MLKEY of stringintint
               | EQ of intint
               | LPAR of intint
               | RPAR of intint
               | TIMES of intint
               | PLUS of intint
               | QMARK of intint
               | DRARROW of intint
               | BAR of intint
               | CARAT of intint
               | LBRACK of intint
               | RBRACK of intint
               | COMMA of intint
               | LBRACE of intint
               | RBRACE of intint
               | WILDCARD of intint
               | MLOP of stringintint
               | NUM of intintint
               | REAL of realintint
               | STRING of stringintint
               | ID of stringintint
               | MLTOK of stringintint
               | EOF of intint
    fun tokToString( s , _ , _ ) = s   fun tokToInt( i , _ , _ ) = i   fun tokToReal( r , _ , _ ) = r  
structure JackeDeclarationsStruct__1081869087 =
struct
structure LrParser = LrParserEng
structure Token = LrParser.Token
structure LrTable = LrParser.LrTable


(* LR table for all parsers in this file *)
local structure Table =
struct
open LrTable

val generatedLrTable=let val actionRows =
"\
\\001\000\001\000\003\000\000\000\
\\001\000\002\000\000\000\000\000\
\\001\000\002\000\047\000\000\000\
\\001\000\003\000\046\000\004\000\045\000\008\000\044\000\011\000\110\000\000\000\
\\001\000\006\000\062\000\000\000\
\\001\000\007\000\036\000\009\000\035\000\010\000\034\000\012\000\033\000\
\\013\000\032\000\014\000\031\000\015\000\030\000\016\000\029\000\
\\017\000\028\000\018\000\027\000\019\000\026\000\020\000\025\000\
\\021\000\024\000\022\000\023\000\023\000\022\000\024\000\021\000\
\\025\000\020\000\026\000\019\000\027\000\018\000\028\000\017\000\
\\029\000\016\000\000\000\
\\001\000\009\000\063\000\000\000\
\\001\000\009\000\064\000\000\000\
\\001\000\010\000\079\000\018\000\078\000\023\000\077\000\027\000\076\000\
\\028\000\075\000\000\000\
\\001\000\010\000\097\000\000\000\
\\001\000\011\000\060\000\000\000\
\\001\000\011\000\101\000\000\000\
\\001\000\011\000\112\000\000\000\
\\001\000\015\000\088\000\000\000\
\\001\000\017\000\091\000\027\000\090\000\000\000\
\\001\000\019\000\099\000\000\000\
\\001\000\019\000\107\000\000\000\
\\001\000\020\000\105\000\022\000\104\000\000\000\
\\001\000\022\000\111\000\000\000\
\\001\000\025\000\095\000\000\000\
\\001\000\025\000\108\000\000\000\
\\001\000\027\000\100\000\000\000\
\\001\000\028\000\056\000\000\000\
\\001\000\028\000\059\000\000\000\
\\114\000\000\000\
\\115\000\000\000\
\\116\000\000\000\
\\117\000\000\000\
\\118\000\003\000\046\000\004\000\045\000\008\000\044\000\000\000\
\\119\000\000\000\
\\120\000\000\000\
\\121\000\003\000\046\000\004\000\045\000\008\000\044\000\000\000\
\\122\000\000\000\
\\123\000\000\000\
\\124\000\000\000\
\\125\000\000\000\
\\126\000\000\000\
\\127\000\000\000\
\\128\000\007\000\094\000\000\000\
\\129\000\000\000\
\\130\000\000\000\
\\131\000\007\000\093\000\000\000\
\\132\000\000\000\
\\133\000\000\000\
\\134\000\000\000\
\\135\000\000\000\
\\136\000\000\000\
\\137\000\000\000\
\\138\000\000\000\
\\139\000\000\000\
\\140\000\016\000\087\000\000\000\
\\141\000\000\000\
\\142\000\010\000\079\000\012\000\086\000\013\000\085\000\014\000\084\000\
\\018\000\078\000\021\000\083\000\023\000\077\000\027\000\076\000\
\\028\000\075\000\000\000\
\\143\000\000\000\
\\144\000\000\000\
\\145\000\000\000\
\\146\000\000\000\
\\147\000\000\000\
\\148\000\000\000\
\\149\000\000\000\
\\150\000\000\000\
\\151\000\000\000\
\\152\000\000\000\
\\153\000\000\000\
\\154\000\000\000\
\\155\000\000\000\
\\156\000\000\000\
\\157\000\000\000\
\\158\000\000\000\
\\159\000\005\000\038\000\006\000\037\000\007\000\036\000\009\000\035\000\
\\010\000\034\000\012\000\033\000\013\000\032\000\014\000\031\000\
\\015\000\030\000\016\000\029\000\017\000\028\000\018\000\027\000\
\\019\000\026\000\020\000\025\000\021\000\024\000\022\000\023\000\
\\023\000\022\000\024\000\021\000\025\000\020\000\026\000\019\000\
\\027\000\018\000\028\000\017\000\029\000\016\000\000\000\
\\160\000\000\000\
\\161\000\007\000\036\000\009\000\035\000\010\000\034\000\012\000\033\000\
\\013\000\032\000\014\000\031\000\015\000\030\000\016\000\029\000\
\\017\000\028\000\018\000\027\000\019\000\026\000\020\000\025\000\
\\021\000\024\000\022\000\023\000\023\000\022\000\024\000\021\000\
\\025\000\020\000\026\000\019\000\027\000\018\000\028\000\017\000\
\\029\000\016\000\000\000\
\\162\000\000\000\
\\163\000\000\000\
\\164\000\000\000\
\\165\000\000\000\
\\166\000\000\000\
\\167\000\000\000\
\\168\000\000\000\
\\169\000\000\000\
\\170\000\000\000\
\\171\000\000\000\
\\172\000\000\000\
\\173\000\000\000\
\\174\000\000\000\
\\175\000\000\000\
\\176\000\000\000\
\\177\000\000\000\
\\178\000\000\000\
\\179\000\000\000\
\\180\000\000\000\
\\181\000\000\000\
\\182\000\000\000\
\\183\000\000\000\
\\184\000\000\000\
\\185\000\000\000\
\\186\000\000\000\
\\187\000\000\000\
\\188\000\000\000\
\\189\000\000\000\
\\190\000\000\000\
\"
val actionRowNumbers =
"\000\000\069\000\079\000\077\000\
\\076\000\075\000\073\000\069\000\
\\068\000\066\000\028\000\026\000\
\\025\000\002\000\100\000\099\000\
\\098\000\097\000\096\000\095\000\
\\094\000\092\000\091\000\090\000\
\\089\000\088\000\087\000\086\000\
\\085\000\084\000\083\000\082\000\
\\069\000\081\000\080\000\078\000\
\\005\000\067\000\032\000\031\000\
\\029\000\027\000\069\000\022\000\
\\023\000\024\000\010\000\071\000\
\\070\000\004\000\030\000\035\000\
\\039\000\034\000\006\000\036\000\
\\033\000\007\000\093\000\072\000\
\\008\000\008\000\008\000\054\000\
\\052\000\051\000\050\000\048\000\
\\013\000\045\000\044\000\042\000\
\\074\000\060\000\059\000\056\000\
\\014\000\008\000\041\000\038\000\
\\053\000\019\000\063\000\062\000\
\\061\000\008\000\009\000\008\000\
\\015\000\021\000\011\000\022\000\
\\023\000\017\000\049\000\069\000\
\\043\000\057\000\016\000\055\000\
\\040\000\037\000\064\000\020\000\
\\003\000\058\000\018\000\012\000\
\\047\000\065\000\046\000\001\000"
val gotoT =
"\
\\001\000\111\000\000\000\
\\002\000\013\000\003\000\012\000\004\000\011\000\023\000\010\000\
\\024\000\009\000\025\000\008\000\028\000\007\000\029\000\006\000\
\\030\000\005\000\031\000\004\000\032\000\003\000\033\000\002\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\023\000\037\000\024\000\009\000\025\000\008\000\028\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\000\000\
\\000\000\
\\000\000\
\\005\000\041\000\006\000\040\000\007\000\039\000\008\000\038\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\046\000\004\000\011\000\023\000\010\000\024\000\009\000\
\\025\000\008\000\028\000\007\000\029\000\006\000\030\000\005\000\
\\031\000\004\000\032\000\003\000\033\000\002\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\026\000\049\000\027\000\048\000\032\000\047\000\033\000\002\000\000\000\
\\000\000\
\\000\000\
\\005\000\050\000\006\000\040\000\007\000\039\000\008\000\038\000\000\000\
\\000\000\
\\000\000\
\\023\000\051\000\024\000\009\000\025\000\008\000\028\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\000\000\
\\011\000\053\000\012\000\052\000\000\000\
\\009\000\056\000\010\000\055\000\000\000\
\\000\000\
\\000\000\
\\026\000\059\000\027\000\048\000\032\000\047\000\033\000\002\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\072\000\014\000\071\000\015\000\070\000\016\000\069\000\
\\017\000\068\000\018\000\067\000\019\000\066\000\020\000\065\000\
\\021\000\064\000\022\000\063\000\000\000\
\\013\000\078\000\014\000\071\000\015\000\070\000\016\000\069\000\
\\017\000\068\000\018\000\067\000\019\000\066\000\020\000\065\000\
\\021\000\064\000\022\000\063\000\000\000\
\\017\000\079\000\018\000\067\000\019\000\066\000\020\000\065\000\
\\021\000\064\000\022\000\063\000\000\000\
\\000\000\
\\019\000\080\000\020\000\065\000\021\000\064\000\022\000\063\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\017\000\090\000\018\000\067\000\019\000\066\000\020\000\065\000\
\\021\000\064\000\022\000\063\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\017\000\094\000\018\000\067\000\019\000\066\000\020\000\065\000\
\\021\000\064\000\022\000\063\000\000\000\
\\000\000\
\\013\000\096\000\014\000\071\000\015\000\070\000\016\000\069\000\
\\017\000\068\000\018\000\067\000\019\000\066\000\020\000\065\000\
\\021\000\064\000\022\000\063\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\011\000\100\000\012\000\052\000\000\000\
\\009\000\101\000\010\000\055\000\000\000\
\\000\000\
\\000\000\
\\023\000\104\000\024\000\009\000\025\000\008\000\028\000\007\000\
\\029\000\006\000\030\000\005\000\031\000\004\000\032\000\003\000\
\\033\000\002\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\005\000\107\000\006\000\040\000\007\000\039\000\008\000\038\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 112
val numrules = 77
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
in val generatedLrTable = Table.generatedLrTable end

structure SValue =
struct
(* toplevel datatype for each single parser in this file *)
datatype 'ty1 sum =  S0 of 'ty1

(* datatype svalue, holding semantic values on parse stack *)
datatype ('ty1,'ty2,'ty3,'ty4,'ty5,'ty6,'ty7,'ty8,'ty9,'ty10,'ty11,'ty12,'ty13,'ty14,'ty15,'ty16,'ty17,'ty18,'ty19,'ty20,'ty21,'ty22,'ty23,'ty24,'ty25,'ty26,'ty27,'ty28,'ty29,'ty30,'ty31,'ty32,'ty33) svalue = 
    VOID
  | TOKEN__675__ of unit -> unit
  | EOP1080658716 of unit -> unit
  | REGEXP of unit -> (intint)
  | LEXER of unit -> (intint)
  | RCASE of unit -> (intint)
  | OF of unit -> (intint)
  | AND of unit -> (intint)
  | MLKEY of unit -> (stringintint)
  | EQ of unit -> (intint)
  | LPAR of unit -> (intint)
  | RPAR of unit -> (intint)
  | TIMES of unit -> (intint)
  | PLUS of unit -> (intint)
  | QMARK of unit -> (intint)
  | DRARROW of unit -> (intint)
  | BAR of unit -> (intint)
  | CARAT of unit -> (intint)
  | LBRACK of unit -> (intint)
  | RBRACK of unit -> (intint)
  | COMMA of unit -> (intint)
  | LBRACE of unit -> (intint)
  | RBRACE of unit -> (intint)
  | WILDCARD of unit -> (intint)
  | MLOP of unit -> (stringintint)
  | NUM of unit -> (intintint)
  | REAL of unit -> (realintint)
  | STRING of unit -> (stringintint)
  | ID of unit -> (stringintint)
  | MLTOK of unit -> (stringintint)
  | EOF of unit -> (intint)
  | NewStartSymbol1080658716 of unit -> 'ty1
  | start of unit -> 'ty2
  | program of unit -> 'ty3
  | rule__954__ of unit -> 'ty4
  | lexdec' of unit -> 'ty5
  | rule__955__ of unit -> 'ty6
  | lexdec of unit -> 'ty7
  | rule__956__ of unit -> 'ty8
  | regbind of unit -> 'ty9
  | rule__957__ of unit -> 'ty10
  | lexbind of unit -> 'ty11
  | rule__958__ of unit -> 'ty12
  | lmatch of unit -> 'ty13
  | rule__959__ of unit -> 'ty14
  | lrule of unit -> 'ty15
  | rule__960__ of unit -> 'ty16
  | regexp'' of unit -> 'ty17
  | rule__961__ of unit -> 'ty18
  | regexp' of unit -> 'ty19
  | rule__962__ of unit -> 'ty20
  | regexp1 of unit -> 'ty21
  | rule__963__ of unit -> 'ty22
  | explist of unit -> 'ty23
  | rule__964__ of unit -> 'ty24
  | rule__965__ of unit -> 'ty25
  | explist' of unit -> 'ty26
  | rule__966__ of unit -> 'ty27
  | caseexp of unit -> 'ty28
  | rule__967__ of unit -> 'ty29
  | atexp of unit -> 'ty30
  | rule__968__ of unit -> 'ty31
  | atexp' of unit -> 'ty32
  | rule__969__ of unit -> 'ty33
end


(* lexxer -> (unit -> (SValue.svalue, pos) Token.token),
       where type lexxer = unit -> (token * pos * pos) *)
fun toInternalToken lexxer =
    fn () =>
    case lexxer() of
      (SOME (REGEXP a),p1,p2) => Token.TOKEN(LrTable.T 2, (SValue.REGEXP (fn () => a), p1, p2))

    | (SOME (LEXER a),p1,p2) => Token.TOKEN(LrTable.T 3, (SValue.LEXER (fn () => a), p1, p2))

    | (SOME (RCASE a),p1,p2) => Token.TOKEN(LrTable.T 4, (SValue.RCASE (fn () => a), p1, p2))

    | (SOME (OF a),p1,p2) => Token.TOKEN(LrTable.T 5, (SValue.OF (fn () => a), p1, p2))

    | (SOME (AND a),p1,p2) => Token.TOKEN(LrTable.T 6, (SValue.AND (fn () => a), p1, p2))

    | (SOME (MLKEY a),p1,p2) => Token.TOKEN(LrTable.T 7, (SValue.MLKEY (fn () => a), p1, p2))

    | (SOME (EQ a),p1,p2) => Token.TOKEN(LrTable.T 8, (SValue.EQ (fn () => a), p1, p2))

    | (SOME (LPAR a),p1,p2) => Token.TOKEN(LrTable.T 9, (SValue.LPAR (fn () => a), p1, p2))

    | (SOME (RPAR a),p1,p2) => Token.TOKEN(LrTable.T 10, (SValue.RPAR (fn () => a), p1, p2))

    | (SOME (TIMES a),p1,p2) => Token.TOKEN(LrTable.T 11, (SValue.TIMES (fn () => a), p1, p2))

    | (SOME (PLUS a),p1,p2) => Token.TOKEN(LrTable.T 12, (SValue.PLUS (fn () => a), p1, p2))

    | (SOME (QMARK a),p1,p2) => Token.TOKEN(LrTable.T 13, (SValue.QMARK (fn () => a), p1, p2))

    | (SOME (DRARROW a),p1,p2) => Token.TOKEN(LrTable.T 14, (SValue.DRARROW (fn () => a), p1, p2))

    | (SOME (BAR a),p1,p2) => Token.TOKEN(LrTable.T 15, (SValue.BAR (fn () => a), p1, p2))

    | (SOME (CARAT a),p1,p2) => Token.TOKEN(LrTable.T 16, (SValue.CARAT (fn () => a), p1, p2))

    | (SOME (LBRACK a),p1,p2) => Token.TOKEN(LrTable.T 17, (SValue.LBRACK (fn () => a), p1, p2))

    | (SOME (RBRACK a),p1,p2) => Token.TOKEN(LrTable.T 18, (SValue.RBRACK (fn () => a), p1, p2))

    | (SOME (COMMA a),p1,p2) => Token.TOKEN(LrTable.T 19, (SValue.COMMA (fn () => a), p1, p2))

    | (SOME (LBRACE a),p1,p2) => Token.TOKEN(LrTable.T 20, (SValue.LBRACE (fn () => a), p1, p2))

    | (SOME (RBRACE a),p1,p2) => Token.TOKEN(LrTable.T 21, (SValue.RBRACE (fn () => a), p1, p2))

    | (SOME (WILDCARD a),p1,p2) => Token.TOKEN(LrTable.T 22, (SValue.WILDCARD (fn () => a), p1, p2))

    | (SOME (MLOP a),p1,p2) => Token.TOKEN(LrTable.T 23, (SValue.MLOP (fn () => a), p1, p2))

    | (SOME (NUM a),p1,p2) => Token.TOKEN(LrTable.T 24, (SValue.NUM (fn () => a), p1, p2))

    | (SOME (REAL a),p1,p2) => Token.TOKEN(LrTable.T 25, (SValue.REAL (fn () => a), p1, p2))

    | (SOME (STRING a),p1,p2) => Token.TOKEN(LrTable.T 26, (SValue.STRING (fn () => a), p1, p2))

    | (SOME (ID a),p1,p2) => Token.TOKEN(LrTable.T 27, (SValue.ID (fn () => a), p1, p2))

    | (SOME (MLTOK a),p1,p2) => Token.TOKEN(LrTable.T 28, (SValue.MLTOK (fn () => a), p1, p2))

    | (SOME (EOF a),p1,p2) => Token.TOKEN(LrTable.T 29, (SValue.EOF (fn () => a), p1, p2))

    | (NONE,p1,p2) => Token.TOKEN(LrTable.T 1, (SValue.EOP1080658716 (fn () => ()), p1, p2))

(* semantic actions *)
structure SAction =
struct
open rmConstrStatus1081869087
exception exnAction of int
val actions =
    fn (i392,defPos,stack,()) =>
        case (i392,stack) of
    (0, (_, (SValue.EOP1080658716(EOP1080658716), EOP1080658716left, EOP1080658716right)) ::(_, (SValue.start(start), startleft, startright)) ::(_, (SValue.TOKEN__675__(TOKEN__675__), TOKEN__675__left, TOKEN__675__right)) ::rest671)
             => let val result =
                     let
                                             val TOKEN__675__ = TOKEN__675__ ()
                                             val start = start ()
                                             val EOP1080658716 = EOP1080658716 ()
in SValue.NewStartSymbol1080658716 (fn () => (  SValue.S0  (  start  )  )) end                 in (LrTable.NT 0, (result, TOKEN__675__left, EOP1080658716right), rest671) end
 |   (* Position in source: 258.22:-258.49: *)
  (1, (_, (SValue.program(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.start (fn () => (  e1  )) end                 in (LrTable.NT 1, (result, e1left, e1right), rest671) end
 |     (2, (_, (SValue.rule__954__(id__387__), id__387__left, id__387__right)) ::rest671)
             => let val result =
                     let
                                             val id__387__ = id__387__ ()
in SValue.program (fn () => ( ( id__387__ )  )) end                 in (LrTable.NT 2, (result, id__387__left, id__387__right), rest671) end
 |   (* Position in source: 261.6:-262.34: *)
  (3, (_, (SValue.lexdec'(e2), e2left, e2right)) ::(_, (SValue.explist(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val e2 = e2 ()
in SValue.rule__954__ (fn () => (  SML( EXP( e1 ,( e1left , e1right ) ) ,( e1left , e1right ) ) :: e2  )) end                 in (LrTable.NT 3, (result, e1left, e2right), rest671) end
 |   (* Position in source: 263.6:-264.30: *)
  (4, (_, (SValue.explist(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__954__ (fn () => (  [ SML( EXP( e1 ,( e1left , e1right ) ) ,( e1left , e1right ) ) ]  )) end                 in (LrTable.NT 3, (result, e1left, e1right), rest671) end
 |     (5, (_, (SValue.rule__955__(id__388__), id__388__left, id__388__right)) ::rest671)
             => let val result =
                     let
                                             val id__388__ = id__388__ ()
in SValue.lexdec' (fn () => ( ( id__388__ )  )) end                 in (LrTable.NT 4, (result, id__388__left, id__388__right), rest671) end
 |   (* Position in source: 267.6:-267.47: *)
  (6, (_, (SValue.lexdec'(e2), e2left, e2right)) ::(_, (SValue.lexdec(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val e2 = e2 ()
in SValue.rule__955__ (fn () => (  e1 :: e2  )) end                 in (LrTable.NT 5, (result, e1left, e2right), rest671) end
 |   (* Position in source: 268.6:-268.43: *)
  (7, (_, (SValue.lexdec(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__955__ (fn () => (  [ e1 ]  )) end                 in (LrTable.NT 5, (result, e1left, e1right), rest671) end
 |     (8, (_, (SValue.rule__956__(id__389__), id__389__left, id__389__right)) ::rest671)
             => let val result =
                     let
                                             val id__389__ = id__389__ ()
in SValue.lexdec (fn () => ( ( id__389__ )  )) end                 in (LrTable.NT 6, (result, id__389__left, id__389__right), rest671) end
 |   (* Position in source: 271.6:-271.66: *)
  (9, (_, (SValue.regbind(e2), e2left, e2right)) ::(_, (SValue.REGEXP(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val e2 = e2 ()
in SValue.rule__956__ (fn () => (  REG( e2 ,( e1left , e2right ) )  )) end                 in (LrTable.NT 7, (result, e1left, e2right), rest671) end
 |   (* Position in source: 272.6:-272.66: *)
  (10, (_, (SValue.lexbind(e2), e2left, e2right)) ::(_, (SValue.LEXER(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val e2 = e2 ()
in SValue.rule__956__ (fn () => (  LEX( e2 ,( e1left , e2right ) )  )) end                 in (LrTable.NT 7, (result, e1left, e2right), rest671) end
 |   (* Position in source: 273.6:-275.46: *)
  (11, (_, (SValue.explist(e2), e2left, e2right)) ::(_, (SValue.MLKEY(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val e2 = e2 ()
in SValue.rule__956__ (fn () => (  SML( EXP( ATEXP( tokToString e1 ,( e1left , e1right ) ) :: e2 ,( e1left , e2right ) ) ,( e1left , e2right ) )  )) end                 in (LrTable.NT 7, (result, e1left, e2right), rest671) end
 |     (12, (_, (SValue.rule__957__(id__390__), id__390__left, id__390__right)) ::rest671)
             => let val result =
                     let
                                             val id__390__ = id__390__ ()
in SValue.regbind (fn () => ( ( id__390__ )  )) end                 in (LrTable.NT 8, (result, id__390__left, id__390__right), rest671) end
 |   (* Position in source: 278.6:-279.58: *)
  (13, (_, (SValue.regbind(e3), e3left, e3right)) ::(_, (SValue.AND(AND), ANDleft, ANDright)) ::(_, (SValue.regexp''(e2), e2left, e2right)) ::(_, (SValue.EQ(EQ), EQleft, EQright)) ::(_, (SValue.ID(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val EQ = EQ ()
                                             val e2 = e2 ()
                                             val AND = AND ()
                                             val e3 = e3 ()
in SValue.rule__957__ (fn () => (  REGBIND( tokToString e1 , e2 ,( e1left , e2right ) ) :: e3  )) end                 in (LrTable.NT 9, (result, e1left, e3right), rest671) end
 |   (* Position in source: 280.6:-281.54: *)
  (14, (_, (SValue.regexp''(e2), e2left, e2right)) ::(_, (SValue.EQ(EQ), EQleft, EQright)) ::(_, (SValue.ID(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val EQ = EQ ()
                                             val e2 = e2 ()
in SValue.rule__957__ (fn () => (  [ REGBIND( tokToString e1 , e2 ,( e1left , e2right ) ) ]  )) end                 in (LrTable.NT 9, (result, e1left, e2right), rest671) end
 |     (15, (_, (SValue.rule__958__(id__391__), id__391__left, id__391__right)) ::rest671)
             => let val result =
                     let
                                             val id__391__ = id__391__ ()
in SValue.lexbind (fn () => ( ( id__391__ )  )) end                 in (LrTable.NT 10, (result, id__391__left, id__391__right), rest671) end
 |   (* Position in source: 284.6:-287.10: *)
  (16, (_, (SValue.lexbind(e3), e3left, e3right)) ::(_, (SValue.AND(AND), ANDleft, ANDright)) ::(_, (SValue.lmatch(e2), e2left, e2right)) ::(_, (SValue.EQ(EQ), EQleft, EQright)) ::(_, (SValue.ID(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val EQ = EQ ()
                                             val e2 = e2 ()
                                             val AND = AND ()
                                             val e3 = e3 ()
in SValue.rule__958__ (fn () => (  LEXBIND( tokToString e1 , LMATCH( e2 ,( e2left , e2right ) ) ,( e1left , e2right ) ) :: e3  )) end                 in (LrTable.NT 11, (result, e1left, e3right), rest671) end
 |   (* Position in source: 288.6:-290.60: *)
  (17, (_, (SValue.lmatch(e2), e2left, e2right)) ::(_, (SValue.EQ(EQ), EQleft, EQright)) ::(_, (SValue.ID(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val EQ = EQ ()
                                             val e2 = e2 ()
in SValue.rule__958__ (fn () => (  [ LEXBIND( tokToString e1 , LMATCH( e2 ,( e2left , e2right ) ) ,( e1left , e2right ) ) ]  )) end                 in (LrTable.NT 11, (result, e1left, e2right), rest671) end
 |     (18, (_, (SValue.rule__959__(id__392__), id__392__left, id__392__right)) ::rest671)
             => let val result =
                     let
                                             val id__392__ = id__392__ ()
in SValue.lmatch (fn () => ( ( id__392__ )  )) end                 in (LrTable.NT 12, (result, id__392__left, id__392__right), rest671) end
 |   (* Position in source: 293.6:-293.50: *)
  (19, (_, (SValue.lmatch(e2), e2left, e2right)) ::(_, (SValue.BAR(BAR), BARleft, BARright)) ::(_, (SValue.lrule(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val BAR = BAR ()
                                             val e2 = e2 ()
in SValue.rule__959__ (fn () => (  e1 :: e2  )) end                 in (LrTable.NT 13, (result, e1left, e2right), rest671) end
 |   (* Position in source: 294.6:-294.46: *)
  (20, (_, (SValue.lrule(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__959__ (fn () => (  [ e1 ]  )) end                 in (LrTable.NT 13, (result, e1left, e1right), rest671) end
 |     (21, (_, (SValue.rule__960__(id__393__), id__393__left, id__393__right)) ::rest671)
             => let val result =
                     let
                                             val id__393__ = id__393__ ()
in SValue.lrule (fn () => ( ( id__393__ )  )) end                 in (LrTable.NT 14, (result, id__393__left, id__393__right), rest671) end
 |   (* Position in source: 297.6:-300.48: *)
  (22, (_, (SValue.RPAR(RPAR), RPARleft, RPARright)) ::(_, (SValue.lexdec'(e3), e3left, e3right)) ::(_, (SValue.explist(e2), e2left, e2right)) ::(_, (SValue.LPAR(LPAR), LPARleft, LPARright)) ::(_, (SValue.DRARROW(DRARROW), DRARROWleft, DRARROWright)) ::(_, (SValue.regexp''(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val DRARROW = DRARROW ()
                                             val LPAR = LPAR ()
                                             val e2 = e2 ()
                                             val e3 = e3 ()
                                             val RPAR = RPAR ()
in SValue.rule__960__ (fn () => (  LRULE( e1 , PAREXP( SML( EXP( e2 ,( e2left , e2right ) ) ,( e2left , e2right ) ) :: e3 ,( e2left , e3right ) ) ,( e1left , e3right ) )  )) end                 in (LrTable.NT 15, (result, e1left, RPARright), rest671) end
 |   (* Position in source: 301.6:-304.48: *)
  (23, (_, (SValue.RPAR(RPAR), RPARleft, RPARright)) ::(_, (SValue.explist(e2), e2left, e2right)) ::(_, (SValue.LPAR(LPAR), LPARleft, LPARright)) ::(_, (SValue.DRARROW(DRARROW), DRARROWleft, DRARROWright)) ::(_, (SValue.regexp''(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val DRARROW = DRARROW ()
                                             val LPAR = LPAR ()
                                             val e2 = e2 ()
                                             val RPAR = RPAR ()
in SValue.rule__960__ (fn () => (  LRULE( e1 , PAREXP( [( SML( EXP( e2 ,( e2left , e2right ) ) ,( e2left , e2right ) ) ) ] ,( e2left , e2right ) ) ,( e1left , e2right ) )  )) end                 in (LrTable.NT 15, (result, e1left, RPARright), rest671) end
 |     (24, (_, (SValue.rule__961__(id__394__), id__394__left, id__394__right)) ::rest671)
             => let val result =
                     let
                                             val id__394__ = id__394__ ()
in SValue.regexp'' (fn () => ( ( id__394__ )  )) end                 in (LrTable.NT 16, (result, id__394__left, id__394__right), rest671) end
 |   (* Position in source: 307.6:-308.36: *)
  (25, (_, (SValue.regexp''(e2), e2left, e2right)) ::(_, (SValue.BAR(BAR), BARleft, BARright)) ::(_, (SValue.regexp'(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val BAR = BAR ()
                                             val e2 = e2 ()
in SValue.rule__961__ (fn () => (  ALT( e1 , e2 ,( e1left , e2right ) )  )) end                 in (LrTable.NT 17, (result, e1left, e2right), rest671) end
 |   (* Position in source: 309.6:-309.48: *)
  (26, (_, (SValue.regexp'(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__961__ (fn () => (  e1  )) end                 in (LrTable.NT 17, (result, e1left, e1right), rest671) end
 |     (27, (_, (SValue.rule__962__(id__395__), id__395__left, id__395__right)) ::rest671)
             => let val result =
                     let
                                             val id__395__ = id__395__ ()
in SValue.regexp' (fn () => ( ( id__395__ )  )) end                 in (LrTable.NT 18, (result, id__395__left, id__395__right), rest671) end
 |   (* Position in source: 312.6:-312.42: *)
  (28, (_, (SValue.regexp1(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__962__ (fn () => (  e1  )) end                 in (LrTable.NT 19, (result, e1left, e1right), rest671) end
 |   (* Position in source: 313.6:-313.71: *)
  (29, (_, (SValue.regexp'(e2), e2left, e2right)) ::(_, (SValue.regexp1(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val e2 = e2 ()
in SValue.rule__962__ (fn () => (  CAT( e1 , e2 ,( e1left , e2right ) )  )) end                 in (LrTable.NT 19, (result, e1left, e2right), rest671) end
 |     (30, (_, (SValue.rule__963__(id__396__), id__396__left, id__396__right)) ::rest671)
             => let val result =
                     let
                                             val id__396__ = id__396__ ()
in SValue.regexp1 (fn () => ( ( id__396__ )  )) end                 in (LrTable.NT 20, (result, id__396__left, id__396__right), rest671) end
 |   (* Position in source: 318.6:-318.40: *)
  (31, (_, (SValue.RPAR(RPAR), RPARleft, RPARright)) ::(_, (SValue.regexp''(e1), e1left, e1right)) ::(_, (SValue.LPAR(LPAR), LPARleft, LPARright)) ::rest671)
             => let val result =
                     let
                                             val LPAR = LPAR ()
                                             val e1 = e1 ()
                                             val RPAR = RPAR ()
in SValue.rule__963__ (fn () => (  e1  )) end                 in (LrTable.NT 21, (result, LPARleft, RPARright), rest671) end
 |   (* Position in source: 319.6:-319.67: *)
  (32, (_, (SValue.WILDCARD(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__963__ (fn () => (  CHARS( wildcard( ) , 0 ,( e1left , e1right ) )  )) end                 in (LrTable.NT 21, (result, e1left, e1right), rest671) end
 |   (* Position in source: 320.6:-323.26: *)
  (33, (_, (SValue.RBRACK(RBRACK), RBRACKleft, RBRACKright)) ::(_, (SValue.STRING(e1), e1left, e1right)) ::(_, (SValue.LBRACK(LBRACK), LBRACKleft, LBRACKright)) ::rest671)
             => let val result =
                     let
                                             val LBRACK = LBRACK ()
                                             val e1 = e1 ()
                                             val RBRACK = RBRACK ()
in SValue.rule__963__ (fn () => (  CHARS( makeVector( makeArray( tokToString e1 , false ,( e1left , e1right ) ) ) , 0 ,( e1left , e1right ) )  )) end                 in (LrTable.NT 21, (result, LBRACKleft, RBRACKright), rest671) end
 |   (* Position in source: 324.6:-327.26: *)
  (34, (_, (SValue.RBRACK(RBRACK), RBRACKleft, RBRACKright)) ::(_, (SValue.STRING(e1), e1left, e1right)) ::(_, (SValue.CARAT(CARAT), CARATleft, CARATright)) ::(_, (SValue.LBRACK(LBRACK), LBRACKleft, LBRACKright)) ::rest671)
             => let val result =
                     let
                                             val LBRACK = LBRACK ()
                                             val CARAT = CARAT ()
                                             val e1 = e1 ()
                                             val RBRACK = RBRACK ()
in SValue.rule__963__ (fn () => (  CHARS( makeVector( makeArray( tokToString e1 , true ,( e1left , e1right ) ) ) , 0 ,( e1left , e1right ) )  )) end                 in (LrTable.NT 21, (result, LBRACKleft, RBRACKright), rest671) end
 |   (* Position in source: 328.6:-328.71: *)
  (35, (_, (SValue.STRING(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__963__ (fn () => (  stringToExp( tokToString e1 ,( e1left , e1right ) )  )) end                 in (LrTable.NT 21, (result, e1left, e1right), rest671) end
 |   (* Position in source: 329.6:-329.61: *)
  (36, (_, (SValue.ID(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__963__ (fn () => (  REGID( tokToString e1 ,( e1left , e1right ) )  )) end                 in (LrTable.NT 21, (result, e1left, e1right), rest671) end
 |   (* Position in source: 330.6:-330.69: *)
  (37, (_, (SValue.TIMES(e2), e2left, e2right)) ::(_, (SValue.regexp1(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val e2 = e2 ()
in SValue.rule__963__ (fn () => (  CLOSURE( e1 ,( e1left , e2right ) )  )) end                 in (LrTable.NT 21, (result, e1left, e2right), rest671) end
 |   (* Position in source: 331.6:-332.65: *)
  (38, (_, (SValue.PLUS(e2), e2left, e2right)) ::(_, (SValue.regexp1(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val e2 = e2 ()
in SValue.rule__963__ (fn () => (  CAT( e1 , CLOSURE( e1 ,( e1left , e2right ) ) ,( e1left , e2right ) )  )) end                 in (LrTable.NT 21, (result, e1left, e2right), rest671) end
 |   (* Position in source: 333.6:-333.70: *)
  (39, (_, (SValue.QMARK(e2), e2left, e2right)) ::(_, (SValue.regexp1(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val e2 = e2 ()
in SValue.rule__963__ (fn () => (  ALT( EPS , e1 ,( e1left , e2right ) )  )) end                 in (LrTable.NT 21, (result, e1left, e2right), rest671) end
 |   (* Position in source: 334.6:-335.62: *)
  (40, (_, (SValue.RBRACE(RBRACE), RBRACEleft, RBRACEright)) ::(_, (SValue.NUM(e2), e2left, e2right)) ::(_, (SValue.LBRACE(LBRACE), LBRACEleft, LBRACEright)) ::(_, (SValue.regexp1(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val LBRACE = LBRACE ()
                                             val e2 = e2 ()
                                             val RBRACE = RBRACE ()
in SValue.rule__963__ (fn () => (  makeRep( e1 , tokToInt e2 , tokToInt e2 ,( e1left , e2right ) )  )) end                 in (LrTable.NT 21, (result, e1left, RBRACEright), rest671) end
 |   (* Position in source: 336.6:-337.62: *)
  (41, (_, (SValue.RBRACE(RBRACE), RBRACEleft, RBRACEright)) ::(_, (SValue.NUM(e3), e3left, e3right)) ::(_, (SValue.COMMA(COMMA), COMMAleft, COMMAright)) ::(_, (SValue.NUM(e2), e2left, e2right)) ::(_, (SValue.LBRACE(LBRACE), LBRACEleft, LBRACEright)) ::(_, (SValue.regexp1(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val LBRACE = LBRACE ()
                                             val e2 = e2 ()
                                             val COMMA = COMMA ()
                                             val e3 = e3 ()
                                             val RBRACE = RBRACE ()
in SValue.rule__963__ (fn () => (  makeRep( e1 , tokToInt e2 , tokToInt e3 ,( e1left , e3right ) )  )) end                 in (LrTable.NT 21, (result, e1left, RBRACEright), rest671) end
 |     (42, (_, (SValue.rule__964__(id__397__), id__397__left, id__397__right)) ::rest671)
             => let val result =
                     let
                                             val id__397__ = id__397__ ()
in SValue.explist (fn () => ( ( id__397__ )  )) end                 in (LrTable.NT 22, (result, id__397__left, id__397__right), rest671) end
 |   (* Position in source: 340.6:-340.48: *)
  (43, (_, (SValue.explist(e2), e2left, e2right)) ::(_, (SValue.caseexp(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val e2 = e2 ()
in SValue.rule__964__ (fn () => (  e1 :: e2  )) end                 in (LrTable.NT 23, (result, e1left, e2right), rest671) end
 |   (* Position in source: 341.6:-341.42: *)
  (44, (_, (SValue.rule__965__(id__398__), id__398__left, id__398__right)) ::rest671)
             => let val result =
                     let
                                             val id__398__ = id__398__ ()
in SValue.rule__964__ (fn () => (  [ ]  )) end                 in (LrTable.NT 23, (result, id__398__left, id__398__right), rest671) end
 |     (45, rest671)
             => let val result =
                     let
in SValue.rule__965__ (fn () => (  ()  )) end                 in (LrTable.NT 24, (result, defPos, defPos), rest671) end
 |     (46, (_, (SValue.rule__966__(id__399__), id__399__left, id__399__right)) ::rest671)
             => let val result =
                     let
                                             val id__399__ = id__399__ ()
in SValue.explist' (fn () => ( ( id__399__ )  )) end                 in (LrTable.NT 25, (result, id__399__left, id__399__right), rest671) end
 |   (* Position in source: 344.6:-344.28: *)
  (47, (_, (SValue.atexp'(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__966__ (fn () => (  [ e1 ]  )) end                 in (LrTable.NT 26, (result, e1left, e1right), rest671) end
 |   (* Position in source: 345.6:-345.48: *)
  (48, (_, (SValue.explist'(e2), e2left, e2right)) ::(_, (SValue.atexp'(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val e2 = e2 ()
in SValue.rule__966__ (fn () => (  e1 :: e2  )) end                 in (LrTable.NT 26, (result, e1left, e2right), rest671) end
 |     (49, (_, (SValue.rule__967__(id__400__), id__400__left, id__400__right)) ::rest671)
             => let val result =
                     let
                                             val id__400__ = id__400__ ()
in SValue.caseexp (fn () => ( ( id__400__ )  )) end                 in (LrTable.NT 27, (result, id__400__left, id__400__right), rest671) end
 |   (* Position in source: 348.6:-350.25: *)
  (50, (_, (SValue.lmatch(e3), e3left, e3right)) ::(_, (SValue.OF(OF), OFleft, OFright)) ::(_, (SValue.explist'(e2), e2left, e2right)) ::(_, (SValue.RCASE(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
                                             val e2 = e2 ()
                                             val OF = OF ()
                                             val e3 = e3 ()
in SValue.rule__967__ (fn () => (  REGCASE( e2 , LMATCH( addEof e3 [ ] ,( e3left , e3right ) ) ,( e1left , e3right ) )  )) end                 in (LrTable.NT 28, (result, e1left, e3right), rest671) end
 |   (* Position in source: 351.6:-351.25: *)
  (51, (_, (SValue.atexp(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__967__ (fn () => (  e1  )) end                 in (LrTable.NT 28, (result, e1left, e1right), rest671) end
 |     (52, (_, (SValue.rule__968__(id__401__), id__401__left, id__401__right)) ::rest671)
             => let val result =
                     let
                                             val id__401__ = id__401__ ()
in SValue.atexp (fn () => ( ( id__401__ )  )) end                 in (LrTable.NT 29, (result, id__401__left, id__401__right), rest671) end
 |   (* Position in source: 354.6:-354.26: *)
  (53, (_, (SValue.atexp'(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__968__ (fn () => (  e1  )) end                 in (LrTable.NT 30, (result, e1left, e1right), rest671) end
 |   (* Position in source: 355.6:-355.55: *)
  (54, (_, (SValue.OF(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__968__ (fn () => (  ATEXP( "of" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 30, (result, e1left, e1right), rest671) end
 |     (55, (_, (SValue.rule__969__(id__402__), id__402__left, id__402__right)) ::rest671)
             => let val result =
                     let
                                             val id__402__ = id__402__ ()
in SValue.atexp' (fn () => ( ( id__402__ )  )) end                 in (LrTable.NT 31, (result, id__402__left, id__402__right), rest671) end
 |   (* Position in source: 358.6:-358.59: *)
  (56, (_, (SValue.AND(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "and" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 359.6:-359.57: *)
  (57, (_, (SValue.EQ(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "=" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 360.6:-360.57: *)
  (58, (_, (SValue.TIMES(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "*" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 361.6:-361.57: *)
  (59, (_, (SValue.PLUS(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "+" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 362.6:-362.57: *)
  (60, (_, (SValue.QMARK(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "?" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 363.6:-363.58: *)
  (61, (_, (SValue.DRARROW(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "=>" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 364.6:-364.57: *)
  (62, (_, (SValue.BAR(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "|" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 365.6:-365.57: *)
  (63, (_, (SValue.CARAT(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "^" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 366.6:-366.57: *)
  (64, (_, (SValue.LBRACK(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "[" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 367.6:-367.57: *)
  (65, (_, (SValue.RBRACK(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "]" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 368.6:-368.57: *)
  (66, (_, (SValue.COMMA(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "," ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 369.6:-369.57: *)
  (67, (_, (SValue.LBRACE(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "{" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 370.6:-370.57: *)
  (68, (_, (SValue.RBRACE(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "}" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 371.6:-371.67: *)
  (69, (_, (SValue.RPAR(RPAR), RPARleft, RPARright)) ::(_, (SValue.program(e1), e1left, e1right)) ::(_, (SValue.LPAR(LPAR), LPARleft, LPARright)) ::rest671)
             => let val result =
                     let
                                             val LPAR = LPAR ()
                                             val e1 = e1 ()
                                             val RPAR = RPAR ()
in SValue.rule__969__ (fn () => (  PAREXP( e1 ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, LPARleft, RPARright), rest671) end
 |   (* Position in source: 372.6:-372.57: *)
  (70, (_, (SValue.WILDCARD(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( "_" ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 373.6:-373.68: *)
  (71, (_, (SValue.MLOP(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( tokToString e1 ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 374.6:-375.31: *)
  (72, (_, (SValue.NUM(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( Int.toString( tokToInt e1 ) ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 376.6:-377.31: *)
  (73, (_, (SValue.REAL(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( Real.toString( tokToReal e1 ) ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 378.6:-378.68: *)
  (74, (_, (SValue.STRING(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( tokToString e1 ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 379.6:-379.68: *)
  (75, (_, (SValue.ID(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( tokToString e1 ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 |   (* Position in source: 380.6:-380.68: *)
  (76, (_, (SValue.MLTOK(e1), e1left, e1right)) ::rest671)
             => let val result =
                     let
                                             val e1 = e1 ()
in SValue.rule__969__ (fn () => (  ATEXP( tokToString e1 ,( e1left , e1right ) )  )) end                 in (LrTable.NT 32, (result, e1left, e1right), rest671) end
 | _ => raise (exnAction i392)
end

(* additional useful fns, common to all parsers in the file *)
structure Misc =
struct
fun mkGet f g =
    let val t = ref true
in
    fn () => if !t then (t:=false; f ()) else g ()
end
end
end (* end of structure JackeDeclarationsStruct__1081869087 *)

 
local structure J = JackeDeclarationsStruct__1081869087
in
val eval  = fn lexxer =>
let val (a as (_,p1,p2)) = lexxer()
    val f = fn _ => J.Token.TOKEN(J.LrTable.T 0, (J.SValue.TOKEN__675__ (fn _ => ()),p1,p2))
    val lexxer1 = J.Misc.mkGet (fn _ => a) lexxer
    val lexxer2 = J.Misc.mkGet f (J.toInternalToken lexxer1)
    val arg = ()
    val table = J.generatedLrTable
    val saction = J.SAction.actions
    val void = J.SValue.VOID
    val error = parseError
    fun extract (J.SValue.NewStartSymbol1080658716 a) =
        case a () of (J.SValue.S0 b) => b
in
    extract (J.LrParser.parse {arg=arg,
                            lexxer=lexxer2,
                            saction=saction,
                            table=table,
                            void=void,
                            error=error})
end
end

  end  
