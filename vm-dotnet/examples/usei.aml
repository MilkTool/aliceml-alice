import
    type ty
    val inspect : 'a * ty -> unit
    val makeArrowType : ty * ty -> ty
    val makeBasicType : string -> ty
    val makeListType : ty -> ty
    val makeRecordType : ty vector -> ty
    val makeTupleType : ty vector -> ty
from "x-alice:Canvas.dll"

import
  val print
from "x-alice:TextIO.dll"

val _ = print("Entered Useil.aml\n")

val _ = let
  val myTy = makeTupleType(#[makeBasicType("int"), makeBasicType("int"), makeBasicType("string")])
in
  inspect((50,20, "Hallo,Welt!"), myTy)
end

val _ = let
  val l1Ty = makeTupleType(#[makeBasicType("a"), makeBasicType("int")])
  val l2Ty = makeTupleType(#[makeBasicType("b"), makeBasicType("bool")])
  val rcTy = makeRecordType(#[l1Ty, l2Ty])
in
  inspect({a=4711, b=false}, rcTy)
end

val _ = let
  val l1Ty = makeTupleType(#[makeBasicType("a"), makeBasicType("int")])
  val l2Ty = makeTupleType(#[makeBasicType("b"), makeBasicType("bool")])
  val rcTy = makeRecordType(#[l1Ty, l2Ty])
  val l3Ty = makeTupleType(#[makeBasicType("sub1"), rcTy])
  val l4Ty = makeTupleType(#[makeBasicType("sub2"), rcTy])
  val rdTy = makeRecordType(#[l3Ty, l4Ty]) 
in
  inspect({sub1={a=400, b=true}, sub2={a=5600, b=false}}, rdTy)
end

val _ = let
  val listType = makeListType(makeBasicType("int"))
in
  inspect([1,2,3,4], listType)
end