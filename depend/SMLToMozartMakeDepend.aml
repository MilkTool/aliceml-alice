(*
 * Authors:
 *   Leif Kornstaedt <kornstae@ps.uni-sb.de>
 *   Andreas Rossberg <rossberg@ps.uni-sb.de>
 *
 * Copyright:
 *   Leif Kornstaedt and Andreas Rossberg, 2001
 *
 * Last change:
 *   $Date$ by $Author$
 *   $Revision$
 *)

import structure Assert      from "../../lib/utility/Assert"
import structure TextIO      from "../../lib/system/TextIO"
import structure Parser      from "SMLParser"
import functor   MkAnalyzer  from "MkAnalyzer"
import signature MAKE_DEPEND from "MAKE_DEPEND-sig"


structure SMLToMozartMakeDepend :> MAKE_DEPEND =
struct
    structure Analyzer = MkAnalyzer(structure Parser = Parser
				    val extension = "ozf")

    exception FAIL

    fun basename filename =
	let
	    val cs = List.rev (String.explode filename)
	    fun cutExtension (#"."::rest) =
		(case rest of
		     (#"/" | #"\\")::_ => cs
		   | _::_ => rest
		   | nil => cs)
	      | cutExtension ((#"/" | #"\\")::_) = cs
	      | cutExtension (_::rest) = cutExtension rest
	      | cutExtension nil = cs
	in
	    String.implode (List.rev (case cs of
					  #"."::_ => cs
					| _ => cutExtension cs))
	end

    fun stodep arguments =
	(List.app (fn filename =>
		   let
		       val filenames = Analyzer.analyzeFile filename
		   in
		       TextIO.print (basename filename ^ ".ozf" ^ ":");
		       List.app (fn filename =>
				 TextIO.print (" \\\n\t" ^ filename)) filenames;
		       TextIO.print "\n\n"
		   end
		   handle Assert.Assert _ =>
			  (TextIO.output (TextIO.stdErr,
					  "while processing " ^ filename ^
					  ": assertion failure\n");
			   raise FAIL)
			| e =>
			  (TextIO.output (TextIO.stdErr,
					  "while processing " ^ filename ^
					  ": uncaught exception " ^ exnName e ^
					  "\n");
			   raise FAIL)) arguments;
	 OS.Process.success)
	handle FAIL => OS.Process.failure
end
